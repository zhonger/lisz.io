<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr Li</title>
  <subtitle>zhonger’s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lisz.io/"/>
  <updated>2017-07-19T08:28:07.000Z</updated>
  <id>https://lisz.io/</id>
  
  <author>
    <name>zhonger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>archlinux入门初步</title>
    <link href="https://lisz.io/2017/07/19/arch-tutorial/"/>
    <id>https://lisz.io/2017/07/19/arch-tutorial/</id>
    <published>2017-07-19T07:23:10.000Z</published>
    <updated>2017-07-19T08:28:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="制作archlinux启动盘"><a href="#制作archlinux启动盘" class="headerlink" title="制作archlinux启动盘"></a>制作<code>archlinux</code>启动盘</h1><ul>
<li>从<code>archlinux</code>官方或者是镜像源下载到iso文件</li>
<li>使用以下命令制作启动U盘<pre><code>dd if=image.iso of=/dev/sd[x]
</code></pre><blockquote>
<p>参考自<a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media" target="_blank" rel="external">Install_from_a_USB_flash_drive</a></p>
</blockquote>
</li>
</ul>
<h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><ul>
<li>电脑插入启动U盘，并选择从U盘的<code>uefi</code>模式启动</li>
<li>键盘布局: <code>loadkeys us</code></li>
<li>验证启动模式: <code>ls /sys/firmware/efi/efivars</code>，如果目录不存在，系统即为<code>BIOS</code>或<code>CSM</code>模式启动</li>
<li>联网: <code>ping -c 3 www.baidu.com</code>，若发现网络不通，则<code>systemctl stop dhcpcd</code>停用dhcpcd进程</li>
<li>更新系统时间: <code>timedatectl set-ntp true</code>，用<code>timedatectl status</code>检查服务状态</li>
<li>建立硬盘分区: 比如磁盘为<code>/dev/sda</code>，则使用<code>fdisk /dev/sda</code>对磁盘进行操作；首先使用<code>g</code>转换成<code>gpt</code>分区格式；其次使用<code>n</code>分别建立<code>512MB</code>的EFI分区和剩余硬盘大小的根目录分区</li>
<li>挂载分区: <pre><code>mount /dev/sda2 /mnt
mkdir /mnt/boot
mount /dev/sda1 /mnt/boot
</code></pre></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>选择镜像地址: 编辑<code>/etc/pacman.d/mirrorlist</code>，建议使用以下首选<code>mirror</code><pre><code>Server = https://mirrors.shuosc.org/archlinux/$repo/os/$arch
Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
</code></pre></li>
<li>安装基本系统及AUR: <code>pacstrap /mnt base base-devel</code></li>
</ul>
<h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><ul>
<li>Fstab: <code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></li>
<li>Chroot: 使用<code>arch-chroot /mnt</code>Change root到新的安装系统</li>
<li>时区: 使用以下命令设置时区及时间标准为<code>UTC</code><pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
hwclock --systohc --utc
</code></pre></li>
<li>Locale: 修改<code>/etc/locale.gen</code>文件，将所需语言前的注释删除，比如以下几个，再使用<code>locale-gen</code>生成locale配置文件，并提交默认语言<pre><code>en_US.UTF-8 UTF-8
zh_CN.UTF-8 UTF-8
zh_SG.UTF-8 UTF-8
zh_TW.UTF-8 UTF-8
</code></pre><pre><code>locale-gen
echo LANG=en_US.UTF-8 &gt; /etc/locale.conf
</code></pre></li>
<li>主机名: 使用<code>echo arch &gt; /etc/hostname</code>设置主机名，并添加对应信息至<code>/etc/hosts</code>，如下所示：<pre><code>127.0.1.1        arch.localdomain  arch
</code></pre></li>
<li>网络配置: 使用<code>systemctl enable dhcpcd.service</code>让<code>DHCP</code>服务开机自启动</li>
<li>设置用户: 首先如下新增用户，然后往<code>/etc/sudoers</code>添加<code>username ALL=(ALL) NOPASSWD:ALL</code><pre><code>useradd username
passwd username
mkdir /home/username
chown -R username:username /home/username
</code></pre></li>
<li>安装引导程序: <pre><code>pacman -S grub os-prober efibootmgr dosfstools
grub-install --target-x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck
grub-mkconfig -o /boot/grub/grub.cfg
</code></pre></li>
</ul>
<h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><ul>
<li>配置显卡: 使用<code>pacman -S nvidia</code>安装nvidia驱动，删除<code>/etc/pacman.conf</code>中的<code>multilib</code>部分注释，使用<code>pacman -Syy</code>刷新软件缓存，<code>pacman -S lib32-nvidia-utils</code>安装对应的基本库。参考自<a href="https://wiki.archlinux.org/index.php/NVIDIA" target="_blank" rel="external">NVIDIA</a></li>
<li>安装xorg: <pre><code>pacman -S xorg
nvidia-xconfig
</code></pre></li>
<li>安装gnome: <pre><code>pacman -S gnome gnome-extra
pacman -S gnome gdm
systemctl enable gdm
</code></pre></li>
</ul>
<h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>重启之后从硬盘启动就会进入gdm登录界面，使用上面设置的username和密码登录即可，如果用户名和密码都正确无法登录，说明该用户未建立对应用户主目录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;制作archlinux启动盘&quot;&gt;&lt;a href=&quot;#制作archlinux启动盘&quot; class=&quot;headerlink&quot; title=&quot;制作archlinux启动盘&quot;&gt;&lt;/a&gt;制作&lt;code&gt;archlinux&lt;/code&gt;启动盘&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从&lt;c
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="archlinux" scheme="https://lisz.io/tags/archlinux/"/>
    
      <category term="setup" scheme="https://lisz.io/tags/setup/"/>
    
  </entry>
  
  <entry>
    <title>在linux系统上没有磁盘阵列实现合并磁盘</title>
    <link href="https://lisz.io/2017/07/01/linux-lvm/"/>
    <id>https://lisz.io/2017/07/01/linux-lvm/</id>
    <published>2017-07-01T06:27:06.000Z</published>
    <updated>2017-07-01T08:14:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul>
<li><code>物理存储</code>:指的是物理的硬盘，在<code>/dev</code>目录下的<code>sda</code>、<code>sdb</code>等</li>
<li><code>物理卷</code>:指的是物理硬盘上的分区或逻辑上与磁盘分区具有相同功能的设备，是LVM的基本存储块，但和分区相比，却包含了与LVM管理相关的参数</li>
<li><code>卷组</code>:LVM的卷组类似于物理硬盘，卷组上边可以建立多个虚拟的分区，LVM卷组由一个或多个物理卷组成</li>
<li><code>逻辑卷</code>:LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷上边可以建立文件系统，用于mount到不同的挂载点，提升分区空间——<code>真正跟用户打交道的部分</code></li>
<li><code>Physcial Extent</code>:每一个物理卷被划分为一个个的基本存储单元，每一个PE都具有唯一的编址（类似于物理磁盘上的磁盘地址），PE的大小默认为4MB</li>
<li><code>Logical Extent</code>:每一个逻辑卷也被划分为一个个的基本存储单元，每一个LE也具有唯一的编址，在同一个卷组中，LE和PE的大小是相等的</li>
</ul>
<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><ul>
<li>Ubuntu Server 16.04 LTS </li>
<li>已安装好系统的1T硬盘</li>
<li>2块2T空硬盘</li>
</ul>
<h1 id="实验步骤-在root用户下操作"><a href="#实验步骤-在root用户下操作" class="headerlink" title="实验步骤(在root用户下操作)"></a>实验步骤(在root用户下操作)</h1><h2 id="第一步-分区"><a href="#第一步-分区" class="headerlink" title="第一步 分区"></a>第一步 分区</h2><ul>
<li>格式化<code>fdisk /dev/sda</code><pre><code>Command(m for help): n  (创建新分区)
</code></pre></li>
<li>接下来选择创建主分区、默认分区号为1，把所有空间全部分配给这个分区(默认即可)</li>
<li>使用<code>p</code>查看分区情况，使用<code>t</code>命令(<code>30</code>为<code>Linux LVM</code>)<pre><code>Hex code (type L to list codes): 30
</code></pre></li>
<li>最后再用<code>w</code>命令保存分区表</li>
<li>另外一块也按照以上的步骤格式化为<code>LVM</code>格式</li>
</ul>
<h2 id="第二步-建立LVM分区和VG逻辑卷组"><a href="#第二步-建立LVM分区和VG逻辑卷组" class="headerlink" title="第二步 建立LVM分区和VG逻辑卷组"></a>第二步 建立LVM分区和VG逻辑卷组</h2><pre><code>pvcreate /dev/sda1 /dev/sdb1
pvdisplay
vgextend asc-vg /dev/sda1 /dev/sdb1 (或者vgcreate extspace /dev/sda1 /dev/sdb1)
vgdisplay
</code></pre><h2 id="第三步-创建逻辑卷"><a href="#第三步-创建逻辑卷" class="headerlink" title="第三步 创建逻辑卷"></a>第三步 创建逻辑卷</h2><pre><code>lvcreate --name data --size 3.6T asc-vg
lvdisplay
</code></pre><h2 id="第四步-挂载逻辑卷"><a href="#第四步-挂载逻辑卷" class="headerlink" title="第四步 挂载逻辑卷"></a>第四步 挂载逻辑卷</h2><pre><code>mkfs.ext4 /dev/asc-vg/data 
mount /dev/asc-vg/data /home/data
</code></pre><h2 id="第五步-配置自动挂载"><a href="#第五步-配置自动挂载" class="headerlink" title="第五步 配置自动挂载"></a>第五步 配置自动挂载</h2><ul>
<li>修改<code>/etc/fstab</code>，增加以下几行：<pre><code>/dev/asc-vg/data /home/data ext4 rw,noatime 0 0
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;物理存储&lt;/code&gt;:指的是物理的硬盘，在&lt;code&gt;/dev&lt;/code&gt;目录下的&lt;code&gt;s
    
    </summary>
    
    
      <category term="linux" scheme="https://lisz.io/tags/linux/"/>
    
      <category term="lvm" scheme="https://lisz.io/tags/lvm/"/>
    
      <category term="合并磁盘" scheme="https://lisz.io/tags/%E5%90%88%E5%B9%B6%E7%A3%81%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>使用caddy和apache搭建php环境</title>
    <link href="https://lisz.io/2017/06/21/caddy-apache/"/>
    <id>https://lisz.io/2017/06/21/caddy-apache/</id>
    <published>2017-06-21T12:53:02.000Z</published>
    <updated>2017-06-21T13:30:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="caddy篇"><a href="#caddy篇" class="headerlink" title="caddy篇"></a>caddy篇</h1><h2 id="安装caddy"><a href="#安装caddy" class="headerlink" title="安装caddy"></a>安装caddy</h2><pre><code>$ curl https://getcaddy.com | bash
</code></pre><h2 id="配置Caddyfile"><a href="#配置Caddyfile" class="headerlink" title="配置Caddyfile"></a>配置Caddyfile</h2><pre><code>yun.wl27.cn {
    gzip
    proxy / http://127.0.0.1:10080
}
</code></pre><h2 id="安装并配置supervisor"><a href="#安装并配置supervisor" class="headerlink" title="安装并配置supervisor"></a>安装并配置supervisor</h2><pre><code>$ sudo pip install supervisor
</code></pre><p><code>/etc/supervisord.conf</code></p>
<pre><code>[program:caddy]
command=caddy -conf /root/Caddyfile
user=root
autostart=true
autorestart=true
startsecs=3
stderr_logfile=/tmp/caddy_err.log
stdout_logfile=/tmp/caddy.log

[supervisord]
</code></pre><h1 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h1><pre><code>$ sudo apt-get install apache2 
$ sudo a2enmod rewrite env headers mime dir setenvif
</code></pre><h1 id="php篇"><a href="#php篇" class="headerlink" title="php篇"></a>php篇</h1><h2 id="安装php7-0"><a href="#安装php7-0" class="headerlink" title="安装php7.0"></a>安装php7.0</h2><pre><code>$ sudo apt-get install python-software-properties
$ sudo add-apt-repository ppa:ondrej/php
$ sudo apt-get update
$ sudo apt-get install -y php7.0
$ sudo apt-get install libapache2-mod-php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-common php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring
</code></pre><h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p><code>/etc/apache2/sites-available</code></p>
<pre><code>
</code></pre><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;caddy篇&quot;&gt;&lt;a href=&quot;#caddy篇&quot; class=&quot;headerlink&quot; title=&quot;caddy篇&quot;&gt;&lt;/a&gt;caddy篇&lt;/h1&gt;&lt;h2 id=&quot;安装caddy&quot;&gt;&lt;a href=&quot;#安装caddy&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>镜像站构建</title>
    <link href="https://lisz.io/2017/05/10/mirrors-build/"/>
    <id>https://lisz.io/2017/05/10/mirrors-build/</id>
    <published>2017-05-10T02:02:50.000Z</published>
    <updated>2017-06-21T10:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>构建镜像站主要是对于linux开源平台的软件源、pypi源、cran源、mysql等开源软件第三方源，大部分源支持使用rsync工具直接进行同步，少部分源比较特殊，比如pypi源必须采用官方提供的bandsnatch工具，mysql源则只能采用wget的方式镜像整站。</p>
<h1 id="linux镜像"><a href="#linux镜像" class="headerlink" title="linux镜像"></a>linux镜像</h1><ul>
<li>采用<code>rsync</code>工具</li>
<li></li>
</ul>
<h1 id="pypi镜像"><a href="#pypi镜像" class="headerlink" title="pypi镜像"></a>pypi镜像</h1><h2 id="安装bandersnatch"><a href="#安装bandersnatch" class="headerlink" title="安装bandersnatch"></a>安装bandersnatch</h2><p><code>sudo pip install bandersnatch</code></p>
<h2 id="尝试启动bandersnatch"><a href="#尝试启动bandersnatch" class="headerlink" title="尝试启动bandersnatch"></a>尝试启动bandersnatch</h2><p><code>bandersnatch mirror</code>  （返回没有/etc/bandersnatch.conf文件错误）</p>
<h2 id="创建bandersnatch-conf文件（文件内容如下）"><a href="#创建bandersnatch-conf文件（文件内容如下）" class="headerlink" title="创建bandersnatch.conf文件（文件内容如下）"></a>创建bandersnatch.conf文件（文件内容如下）</h2><pre><code>[mirror]
directory = /srv/pypi
master = https://pypi.python.org
</code></pre><h2 id="启动bandersnatch"><a href="#启动bandersnatch" class="headerlink" title="启动bandersnatch"></a>启动bandersnatch</h2><pre><code>tmux
bandersnatch mirror
ctrl+b+d
</code></pre><p>（tmux为终端会话工具，<code>ctrl+b+d</code>让任务在后台执行）</p>
<h2 id="配置web-服务器到同步路径"><a href="#配置web-服务器到同步路径" class="headerlink" title="配置web 服务器到同步路径"></a>配置web 服务器到同步路径</h2><p>web服务的根目录为<code>/srv/pypi/web</code><br>在linux系统用户配置中修改pypi默认镜像（<code>～/.pip/pip.conf</code>）</p>
<pre><code>[global]
index-url = https://pypi.doubanio.com/simple/  （该地址修改为web服务器对应地址）
</code></pre><h1 id="其他镜像"><a href="#其他镜像" class="headerlink" title="其他镜像"></a>其他镜像</h1><ul>
<li>采用wget镜像<code>nodejs.org</code>站点<pre><code>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://nodejs.org/dist  -e robots=off
</code></pre></li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;构建镜像站主要是对于linux开源平台的软件源、pypi源、cran源、mysql等开源软件第三方源，大部分源支持使用rsync工具直接进行
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="mirror" scheme="https://lisz.io/tags/mirror/"/>
    
      <category term="build" scheme="https://lisz.io/tags/build/"/>
    
      <category term="rsync" scheme="https://lisz.io/tags/rsync/"/>
    
      <category term="cran" scheme="https://lisz.io/tags/cran/"/>
    
      <category term="wget" scheme="https://lisz.io/tags/wget/"/>
    
      <category term="bandsnatch" scheme="https://lisz.io/tags/bandsnatch/"/>
    
  </entry>
  
  <entry>
    <title>docker平台学习初步</title>
    <link href="https://lisz.io/2017/05/09/docker-init/"/>
    <id>https://lisz.io/2017/05/09/docker-init/</id>
    <published>2017-05-09T04:43:31.000Z</published>
    <updated>2017-05-10T02:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="docker" scheme="https://lisz.io/tags/docker/"/>
    
      <category term="ubuntu" scheme="https://lisz.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu16.04下安装nvidia gtx 970显卡驱动</title>
    <link href="https://lisz.io/2017/05/09/ubuntu-nvidia/"/>
    <id>https://lisz.io/2017/05/09/ubuntu-nvidia/</id>
    <published>2017-05-09T04:02:49.000Z</published>
    <updated>2017-05-10T02:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><ul>
<li>Ubuntu 16.04 Desktop (内核版本：4.8.0-46-generic)</li>
<li>显卡：GTX-960</li>
</ul>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载NVIDIA驱动程序"><a href="#下载NVIDIA驱动程序" class="headerlink" title="下载NVIDIA驱动程序"></a>下载NVIDIA驱动程序</h2><ul>
<li>在<a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="external">nvidia官网下载</a>对应的驱动（<code>.run</code>文件）<h2 id="删除旧驱动"><a href="#删除旧驱动" class="headerlink" title="删除旧驱动"></a>删除旧驱动</h2></li>
<li><code>sudo apt-get purge nvidia*</code>（如果返回卸载成功或无匹配结果均可）<h2 id="禁用自带的nouveau-nvidia驱动"><a href="#禁用自带的nouveau-nvidia驱动" class="headerlink" title="禁用自带的nouveau nvidia驱动"></a>禁用自带的nouveau nvidia驱动</h2></li>
<li>通过命令<code>sudo vim /etc/modprobe.d/blacklist-nouveau.conf</code>创建文件，并添加内容如下：<pre><code>blacklist nouveau
options nouveau modeset=0
</code></pre></li>
<li>执行更新命令<code>sudo update-initramfs -u</code>，并重启操作系统（重启后可用<code>lsmod | grep nouveau</code>检查是否禁用成功）<h2 id="安装内核头"><a href="#安装内核头" class="headerlink" title="安装内核头"></a>安装内核头</h2></li>
<li>通过命令安装<pre><code class="shell">sudo apt-get install linux-headers-$(uname -r)
</code></pre>
</li>
</ul>
<h1 id="正式安装过程"><a href="#正式安装过程" class="headerlink" title="正式安装过程"></a>正式安装过程</h1><ul>
<li>通过命令<code>sudo service lightdm stop</code>关闭<code>x-window</code></li>
<li>执行NVIDIA驱动安装程序<code>sudo sh NVIDIA.run</code>（<code>.run</code>文件需提前赋予执行权限）</li>
<li>一步一步选择下去执行安装即可，最终显示安装成功</li>
<li>通过命令<code>sudo service lightdm start</code>开启<code>x-window</code></li>
</ul>
<h1 id="完成显卡驱动安装"><a href="#完成显卡驱动安装" class="headerlink" title="完成显卡驱动安装"></a>完成显卡驱动安装</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04 Desktop (内核版本：4.8.0-46-generic)&lt;/li&gt;
&lt;li&gt;显卡
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="ubuntu" scheme="https://lisz.io/tags/ubuntu/"/>
    
      <category term="nvidia" scheme="https://lisz.io/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>laravel5.2在lnmpa一键安装包环境下的部署</title>
    <link href="https://lisz.io/2016/03/14/laravel-lnmpa/"/>
    <id>https://lisz.io/2016/03/14/laravel-lnmpa/</id>
    <published>2016-03-14T14:19:48.000Z</published>
    <updated>2017-03-23T14:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>1.阿里云ECS服务器：<code>ubuntu14.04LTS 64位</code><br>2.使用<code>lnmp.org</code>提供的<code>linux+nginx+mysql+apache+php</code>一键安装包，已安装lnmpa<br>3.其他条件满足（Git工具和ssh私钥、<code>composer</code>工具、<code>bower</code>工具）</p>
<h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>1.将<code>php命令</code>添加到系统环境变量中：往<code>/etc/enviroment</code>文件中添加”:<code>/usr/local/php/bin</code>（该路径为php命令所在目录，前面一定要包含冒号）<br>2.修改<code>php.ini</code>：将<code>proc_get_status,proc_open</code>从<code>disable_functions</code>中去掉<br>3.使用<code>sudo lnmp vhost add</code>命令添加虚拟主机，自动在<code>/usr/local/nginx/conf/vhost</code>和<code>/usr/local/apache/conf/vhost</code>生成<code>“域名.conf”</code><br>4.修改<code>nginx</code>中的<code>“域名.conf”</code>文件的<code>root目录</code>为<code>laravel的根目录/public</code>（比如使用<code>composer create-project laravel/laravel laravel</code>命令生成的laravel目录）<br>5.修改<code>apache</code>中的“域名.conf”文件：open_basedir 后面的路径同上一步中的laravel的根目录，Document root和Directory后面的路径为“laravel根目录/public”，这是域名绑定的入口目录<br>6.使用git工具将github或oschina.net的代码克隆至域名绑定<code>root目录</code>，使用<code>chmod 777 -R storage</code>命令给<code>storage文件夹读写权限</code><br>7.使用<code>composer install</code>和<code>bower install</code>命令安装相关php依赖和前端依赖<br>就这样，laravel就可以正常运行在lnmpa环境中了</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><blockquote>
<p>问题一：打开空白，使用浏览器控制台查看network为<code>500错误</code>？</p>
</blockquote>
<p>解决方法：<br>1.检查是否使用<code>composer</code>安装好<code>php函数依赖</code>；<br>2.检查<code>storage文件夹</code>是否有读写权限；<br>3.检查<code>apache</code>的虚拟主机配置文件中的<code>open_basedir</code>和<code>Directory目录</code>是否正确；</p>
<blockquote>
<p>问题二：<code>composer install</code>命令执行返回<code>proc_open()</code>和<code>proc_get_status()</code>两个函数不能正常使用？</p>
</blockquote>
<p>解决办法：修改<code>php.ini</code>中<code>disable_functions()</code></p>
<blockquote>
<p>问题三：页面<code>css</code>和<code>js</code>资源不能正常引用？</p>
</blockquote>
<p>解决办法：修改<code>nginx</code>的虚拟主机配置文件的root目录为laravel应用程序的根目录，而非public目录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;p&gt;1.阿里云ECS服务器：&lt;code&gt;ubuntu14.04LTS 64位&lt;/code&gt;&lt;br&gt;2.使用&lt;code&gt;lnmp.
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="laravel" scheme="https://lisz.io/tags/laravel/"/>
    
      <category term="lnmpa" scheme="https://lisz.io/tags/lnmpa/"/>
    
  </entry>
  
  <entry>
    <title>windows安装配置python 3.5.1+pip 8.1.0 +django 1.9.4</title>
    <link href="https://lisz.io/2016/03/08/windows-pip/"/>
    <id>https://lisz.io/2016/03/08/windows-pip/</id>
    <published>2016-03-08T14:12:49.000Z</published>
    <updated>2017-03-23T14:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载并安装python3-5-1"><a href="#下载并安装python3-5-1" class="headerlink" title="下载并安装python3.5.1"></a>下载并安装python3.5.1</h1><blockquote>
<p>python官网：<a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a></p>
</blockquote>
<ul>
<li>下载完毕后，点击<code>.exe</code>文件直接安装，安装选项可以选择配置<code>python</code>到系统变量、安装<code>pip</code>工具</li>
<li>在<code>cmd窗口</code>使用<code>python</code>命令检查<code>python</code>是否安装成功（成功的话会进入<code>python shell</code>，失败会返回没有这个命令）</li>
</ul>
<h1 id="更新pip至最新版本"><a href="#更新pip至最新版本" class="headerlink" title="更新pip至最新版本"></a>更新pip至最新版本</h1><ul>
<li>在<code>cmd窗口</code>使用<code>pip list</code>命令检查pip是否安装成功（成功的话会显示当前<code>pip</code>的版本和<code>setuptool</code>的版本）</li>
<li>输入<code>python -m pip install -U pip</code>命令升级<code>pip</code>至最新版本</li>
<li>再输入<code>pip list</code>检查当前<code>pip</code>版本（当前<code>pip</code>的最新版本为<code>8.1.0</code>版本）</li>
</ul>
<h1 id="更换pip的镜像源为上海大学开源社区镜像源"><a href="#更换pip的镜像源为上海大学开源社区镜像源" class="headerlink" title="更换pip的镜像源为上海大学开源社区镜像源"></a>更换pip的镜像源为上海大学开源社区镜像源</h1><ul>
<li>由于pip的默认服务器在美国，日常使用<code>pip install</code>命令会出现超时，所以我们要把镜像源更换为<code>上海大学开源社区pip镜像源</code></li>
<li>更换方法是，在当前windows用户的主目录，添加一个<code>pip</code>文件夹，在<code>pip</code>文件夹中新建一个<code>pip.ini</code>文件，并把以下内容写入文件：<pre><code>[global]
index-url=https://pypi.shuosc.org/simple
[list]
format=columns
</code></pre></li>
</ul>
<h1 id="安装django1-9-4（当前最新版本）"><a href="#安装django1-9-4（当前最新版本）" class="headerlink" title="安装django1.9.4（当前最新版本）"></a>安装django1.9.4（当前最新版本）</h1><p>新开一个cmd窗口，在窗口中输入<code>pip install django</code>命令来安装<code>django</code>最新版本</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载并安装python3-5-1&quot;&gt;&lt;a href=&quot;#下载并安装python3-5-1&quot; class=&quot;headerlink&quot; title=&quot;下载并安装python3.5.1&quot;&gt;&lt;/a&gt;下载并安装python3.5.1&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;p
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="windows" scheme="https://lisz.io/tags/windows/"/>
    
      <category term="pip" scheme="https://lisz.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器CVM作为MYSQL遇到远程无法连接的解决办法</title>
    <link href="https://lisz.io/2016/03/03/tencent-mysql/"/>
    <id>https://lisz.io/2016/03/03/tencent-mysql/</id>
    <published>2016-03-03T14:04:40.000Z</published>
    <updated>2017-03-23T14:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改mysql配置"><a href="#修改mysql配置" class="headerlink" title="修改mysql配置"></a>修改mysql配置</h1><p>首先需要确认安装的mysql服务器的配置文件/etc/mysql/my.cnf是否将bindless 120.0.0.1:0注释掉，务必保证已注释；</p>
<h1 id="更新腾讯云服务器的安全组策略"><a href="#更新腾讯云服务器的安全组策略" class="headerlink" title="更新腾讯云服务器的安全组策略"></a>更新腾讯云服务器的安全组策略</h1><ol>
<li>在云服务器列表中选择安全组</li>
<li>在安全组中新建一个安全组，名称任意</li>
<li>添加入站规则和出站规则</li>
<li>将云服务器主机添加入新建的安全组，并从其他安全组中退出。</li>
</ol>
<blockquote>
<p>入站规则是指外网可以访问服务器的端口，即服务器对外开放资源获取的端口；出站规则是指服务器访问网络上的策略，一般是全部开放，（除非有特殊限制要求，本问题的解决不考虑，所以设为ALL TRAFFIC）</p>
</blockquote>
<h1 id="在腾讯云服务操作面板中重启服务器使安全组生效"><a href="#在腾讯云服务操作面板中重启服务器使安全组生效" class="headerlink" title="在腾讯云服务操作面板中重启服务器使安全组生效"></a>在腾讯云服务操作面板中重启服务器使安全组生效</h1><h1 id="在客户端系统中使用Navicat等软件连接MYSQL数据库"><a href="#在客户端系统中使用Navicat等软件连接MYSQL数据库" class="headerlink" title="在客户端系统中使用Navicat等软件连接MYSQL数据库"></a>在客户端系统中使用Navicat等软件连接MYSQL数据库</h1><h1 id="就这样，一台MYSQL数据库服务器就搭建完毕了"><a href="#就这样，一台MYSQL数据库服务器就搭建完毕了" class="headerlink" title="就这样，一台MYSQL数据库服务器就搭建完毕了"></a>就这样，一台MYSQL数据库服务器就搭建完毕了</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改mysql配置&quot;&gt;&lt;a href=&quot;#修改mysql配置&quot; class=&quot;headerlink&quot; title=&quot;修改mysql配置&quot;&gt;&lt;/a&gt;修改mysql配置&lt;/h1&gt;&lt;p&gt;首先需要确认安装的mysql服务器的配置文件/etc/mysql/my.cnf是否将
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="腾讯云" scheme="https://lisz.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="Mysql" scheme="https://lisz.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器重装系统后……</title>
    <link href="https://lisz.io/2016/03/02/tencent-down/"/>
    <id>https://lisz.io/2016/03/02/tencent-down/</id>
    <published>2016-03-02T08:36:27.000Z</published>
    <updated>2017-03-23T14:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、添加用户并设为sudo权限"><a href="#一、添加用户并设为sudo权限" class="headerlink" title="一、添加用户并设为sudo权限"></a>一、添加用户并设为sudo权限</h1><p><code>sudo useradd 用户名</code><br><code>sudo passwd 用户名</code><br><code>sudo chmod +w /etc/sudoers</code><br><code>sudo vi  /etc/sudoers (加入 用户名 ALL=(ALL:ALL) ALL )</code></p>
<h1 id="二、更改用户linux的shell的操作方法"><a href="#二、更改用户linux的shell的操作方法" class="headerlink" title="二、更改用户linux的shell的操作方法"></a>二、更改用户linux的shell的操作方法</h1><p>查看当前用户的shell方式 <code>echo $SHELL</code>    输出 <code>/bin/sh</code><br>更换shell操作方式为<code>/bin/bash</code>   <code>sudo vi /etc/passwd</code>  在用户行尾加上<code>/bin/bash</code><br>退出系统再次登录</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、添加用户并设为sudo权限&quot;&gt;&lt;a href=&quot;#一、添加用户并设为sudo权限&quot; class=&quot;headerlink&quot; title=&quot;一、添加用户并设为sudo权限&quot;&gt;&lt;/a&gt;一、添加用户并设为sudo权限&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sudo useradd
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="腾讯云" scheme="https://lisz.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.04安装composer+laravel配置</title>
    <link href="https://lisz.io/2016/02/05/ubuntu-composer/"/>
    <id>https://lisz.io/2016/02/05/ubuntu-composer/</id>
    <published>2016-02-05T08:29:05.000Z</published>
    <updated>2017-03-23T14:22:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装前提：系统已安装好php环境，可在全局使用php命令</p>
<h1 id="安装compsoer并设置为全局调用"><a href="#安装compsoer并设置为全局调用" class="headerlink" title="安装compsoer并设置为全局调用"></a>安装compsoer并设置为全局调用</h1><pre><code class="bash">curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
</code></pre>
<h1 id="使用composer建立laravel-installer安装工具"><a href="#使用composer建立laravel-installer安装工具" class="headerlink" title="使用composer建立laravel installer安装工具"></a>使用composer建立laravel installer安装工具</h1><pre><code class="bash">composer global require &quot;laravel/installer&quot;
</code></pre>
<h1 id="将laravel命令添加进用户环境变量"><a href="#将laravel命令添加进用户环境变量" class="headerlink" title="将laravel命令添加进用户环境变量"></a>将laravel命令添加进用户环境变量</h1><p>打开<code>~/.bashrc</code>文件最末添加命令：<code>PATH=$PATH:~/.composer/vendor/bin</code><br><code>source ~/.bashrc</code> 命令使环境变量变化生效</p>
<h1 id="可以在全局使用laravel-new-应用名称-了"><a href="#可以在全局使用laravel-new-应用名称-了" class="headerlink" title="可以在全局使用laravel new {应用名称}了"></a>可以在全局使用laravel new {应用名称}了</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装前提：系统已安装好php环境，可在全局使用php命令&lt;/p&gt;
&lt;h1 id=&quot;安装compsoer并设置为全局调用&quot;&gt;&lt;a href=&quot;#安装compsoer并设置为全局调用&quot; class=&quot;headerlink&quot; title=&quot;安装compsoer并设置为全局调用&quot;&gt;
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="ubuntu" scheme="https://lisz.io/tags/ubuntu/"/>
    
      <category term="laravel" scheme="https://lisz.io/tags/laravel/"/>
    
      <category term="composer" scheme="https://lisz.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.04常用美化、配置、软件安装（持续更新中。。。）</title>
    <link href="https://lisz.io/2016/01/06/ubuntu-beatiful/"/>
    <id>https://lisz.io/2016/01/06/ubuntu-beatiful/</id>
    <published>2016-01-06T08:23:27.000Z</published>
    <updated>2017-03-15T08:29:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装扁平化主题"><a href="#一、安装扁平化主题" class="headerlink" title="一、安装扁平化主题"></a>一、安装扁平化主题</h1><ul>
<li>1.安装ubuntu-tweak<pre><code class="bash">sudo add-apt-repository ppa:tualatrix/ppa
sudo apt-get update
sudo apt-get install ubuntu-tweak
</code></pre>
</li>
<li>2.下载主题包文件<pre><code class="bash">wget –no-check-certificate https://github.com/anmoljagetia/Flatabulous/archive/master.zip
</code></pre>
下载好后解压到用户根目录的.themes文件夹（没有请使用<code>mkdir .themes</code>命令新建文件夹）</li>
<li>3.安装图标<pre><code class="bash">sudo add-apt-repository ppa:noobslab/icons
sudo apt-get update
sudo apt-get install ultra-flat-icons
</code></pre>
也可<code>sudo apt-get install ultra-flat-icons-orange</code>或者<code>sudo apt-get install ultra-flat-icons-green</code>来安装其他两种颜色</li>
<li>4.使用ubuntu-tweak图形化界面更改主题及图标即可<br>（该部分参考自<a href="http://www.jianshu.com/p/5b80711f304f" target="_blank" rel="external">http://www.jianshu.com/p/5b80711f304f</a>）</li>
</ul>
<h1 id="二、安装shadowsocks"><a href="#二、安装shadowsocks" class="headerlink" title="二、安装shadowsocks"></a>二、安装shadowsocks</h1><p>百度一下<code>ubuntu shadowsocks</code>的结果很凄惨，根本没有什么有用的，不过google还是挺厉害的，安装<code>shadowsocks-qt5</code>即可</p>
<pre><code class="bash">sudo add-apt-repository ppa:hzwhuang/ss-qt5
sudo apt-get update
sudo apt-get install shadowsocks-qt5
</code></pre>
<p>（该部分参考自<a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html" target="_blank" rel="external">https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html</a>）</p>
<h1 id="三、安装常用工具"><a href="#三、安装常用工具" class="headerlink" title="三、安装常用工具"></a>三、安装常用工具</h1><ul>
<li>1.rinetd端口转发工具<pre><code class="bash">sudo apt-get install rinetd    (配置文件为/etc/rinetd.conf)
</code></pre>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装扁平化主题&quot;&gt;&lt;a href=&quot;#一、安装扁平化主题&quot; class=&quot;headerlink&quot; title=&quot;一、安装扁平化主题&quot;&gt;&lt;/a&gt;一、安装扁平化主题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.安装ubuntu-tweak&lt;pre&gt;&lt;code class=&quot;ba
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="ubuntu" scheme="https://lisz.io/tags/ubuntu/"/>
    
      <category term="美化" scheme="https://lisz.io/tags/%E7%BE%8E%E5%8C%96/"/>
    
      <category term="软件安装" scheme="https://lisz.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-14.04-lts安装配置nodejs+bower</title>
    <link href="https://lisz.io/2015/12/23/ubuntu-nodejs/"/>
    <id>https://lisz.io/2015/12/23/ubuntu-nodejs/</id>
    <published>2015-12-23T08:16:16.000Z</published>
    <updated>2017-03-15T08:21:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>强烈推荐方案二</p>
</blockquote>
<h1 id="一、方案一"><a href="#一、方案一" class="headerlink" title="一、方案一"></a>一、方案一</h1><p>安装准备：<code>pyhton，make，gcc，g++</code>均已安装</p>
<ul>
<li>第一步 将<code>nodejs的ppa源</code>加入系统    <code>$ sudo  add-apt-repository ppa:chris-lea/node.js</code></li>
<li>第二步 更新系统软件源缓存并安装<code>nodejs</code>  <code>$sudo apt-get update  $ sudo apt-get install nodejs</code></li>
<li>第三步 使用<code>npm</code>命令全局安装bower命令 <code>$ sudo npm install bower -g</code><br>到此<code>nodejs</code>和<code>bower</code>工具安装完成，接下来请享受<code>bower</code>工具带来的舒适吧！<br>注：$ 为<code>bash</code>命令行前标识符</li>
</ul>
<h1 id="二、方案二"><a href="#二、方案二" class="headerlink" title="二、方案二"></a>二、方案二</h1><p>由于国内直接访问软件源的网速不是很好，而且<code>apt源</code>的<code>nodejs</code>版本也不是很好，所以建议采用方案二——使用<code>NPM淘宝镜像</code>来实现</p>
<ul>
<li>第一步  在<code>https://npm.taobao.org/mirrors/node</code>中找到你想要的<code>nodejs</code>版本，建议采用<code>v4.4.3LTS版本</code>或者<code>the latest版本</code><br>参考命令为：<code>wget –no-check-certifica https://npm.taobao.org/mirrors/node/v4.4.3/node-v4.4.3-linux-x64.tar.gz</code><br>（因为实验时主机为<code>Ubuntu 14.04 LTS 64位</code>操作系统，所以选择<code>node-v4.4.3-linux-x64.tar.gz</code>）</li>
<li>第二步 在用户根目录创建node文件夹，将下载的压缩包内容解压到该文件夹<br>参考命令为：<code>tar zxf node-v4.4.3-linux-x64.tar.gz ~/node/</code></li>
<li>第三步  将node和npm命令加入用户环境变量<br>参考命令为： <code>vim .bashrc</code><br>在<code>.bashrc</code>文件的末尾加入<code>PATH=$PATH:~/node/bin</code><br><code>source .bashrc</code><br>（使该配置文件立即生效，如果不生效可以重新开个窗口试试<code>node -v</code> 是否会返回<code>v4.4.3</code>）<br>（这样的命令就是只能单用户使用，如果需要多用户使用，请将<code>node文件夹</code>设置在系统公用目录，然后将<code>bin</code>目录赋给权限<code>755</code>）</li>
<li>第四步  安装cnpm<br>参考命令为：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>到此为止，<code>cnpm</code>命令就可以完全替代<code>npm</code>进行使用，并且安装模块的速度杠杠的哦（毕竟是淘宝镜像源啊～）</li>
<li>第五步  安装bower<br>参考命令：<code>cnpm install -g bower</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;强烈推荐方案二&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、方案一&quot;&gt;&lt;a href=&quot;#一、方案一&quot; class=&quot;headerlink&quot; title=&quot;一、方案一&quot;&gt;&lt;/a&gt;一、方案一&lt;/h1&gt;&lt;p&gt;安装准备：&lt;code&gt;pyhto
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="ubuntu" scheme="https://lisz.io/tags/ubuntu/"/>
    
      <category term="nodejs" scheme="https://lisz.io/tags/nodejs/"/>
    
      <category term="bower" scheme="https://lisz.io/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>windows配置composer和laravel笔记</title>
    <link href="https://lisz.io/2015/11/11/windows-composer/"/>
    <id>https://lisz.io/2015/11/11/windows-composer/</id>
    <published>2015-11-11T08:09:39.000Z</published>
    <updated>2017-03-15T08:15:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装及配置composer"><a href="#一、安装及配置composer" class="headerlink" title="一、安装及配置composer"></a>一、安装及配置composer</h1><ul>
<li>1.由于getcomposer.org的服务器在国外，国内访问网速有点慢，所以采用了国内镜像（<a href="http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中" target="_blank" rel="external">http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中</a></li>
<li>2.下载php至电脑上，并将php.exe所在文件夹位置添加至环境变量Path中</li>
<li>3.在composer.phar所在文件夹按住Shift键点击鼠标右键选择“在此处打开cmd命令”，输入     <pre><code class="bash">echo @php &quot;%~dp0composer.phar&quot; %*&gt;composer.bat
</code></pre>
</li>
<li>4.到这里，composer全局安装完成，在命令行中输入”composer -v”进行验证是否成功</li>
<li>5.输入下列命令配置composer包和依赖库国内下载镜像<pre><code class="bash">composer config -g repositories.packagist composer https://packagist.phpcomposer.com
</code></pre>
</li>
<li>6.composer配置已较为完善，试试看，访问速度还不错哟</li>
</ul>
<h1 id="二、安装laravel应用"><a href="#二、安装laravel应用" class="headerlink" title="二、安装laravel应用"></a>二、安装laravel应用</h1><p><a href="http://laravel-china.org/docs/5.0/installation" target="_blank" rel="external">laravel中文官网文档</a>是提供了两种安装方法，一种是采用配置laravel安装工具（反正我是按照配的结果安装应用时返回错误的），另一种是采用composer命令的方式安装，个人觉得第二种方法靠谱点，毕竟我用第二种方法就成功地创建了laravel应用（虽然命令稍微长一点）</p>
<pre><code class="bash">composer create-project laravel/laravel blog  –prefer-dist
</code></pre>
<p>解释：composer create-project 就是使用composer工具创建项目的意思，laravel/laravel就是指明模板是什么， blog是你要创建的应用的名称，后面那个就是命令的参数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装及配置composer&quot;&gt;&lt;a href=&quot;#一、安装及配置composer&quot; class=&quot;headerlink&quot; title=&quot;一、安装及配置composer&quot;&gt;&lt;/a&gt;一、安装及配置composer&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.由于getcompo
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="laravel" scheme="https://lisz.io/tags/laravel/"/>
    
      <category term="composer" scheme="https://lisz.io/tags/composer/"/>
    
      <category term="windows" scheme="https://lisz.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>我的女儿</title>
    <link href="https://lisz.io/2015/09/19/my-daughter/"/>
    <id>https://lisz.io/2015/09/19/my-daughter/</id>
    <published>2015-09-19T08:06:07.000Z</published>
    <updated>2017-03-15T08:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的女儿"><a href="#我的女儿" class="headerlink" title="我的女儿"></a>我的女儿</h1><p>我的女儿是一个从小没有母亲的孩子<br>她的母亲在战火中牺牲<br>我却无能为力<br>所以我既是父亲也是母亲</p>
<p>我的女儿是一个有很多姑姑的孩子<br>她的姑姑们教会她知识和美德<br>我却什么都没教她<br>所以我不是一个好父亲</p>
<p>我的女儿是一个热衷于求知的孩子<br>一馆子的书是她最好的朋友<br>我却成不了她的朋友<br>所以她有超越我的智慧</p>
<p>我的女儿是一个心怀天下的孩子<br>周游世界收获世间的真<br>我却不能伴着她、照顾她<br>所以她走得比我更远</p>
<p>她是我的女儿<br>我是她的父亲<br>然而，她以我为榜样<br>我因她而骄傲</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我的女儿&quot;&gt;&lt;a href=&quot;#我的女儿&quot; class=&quot;headerlink&quot; title=&quot;我的女儿&quot;&gt;&lt;/a&gt;我的女儿&lt;/h1&gt;&lt;p&gt;我的女儿是一个从小没有母亲的孩子&lt;br&gt;她的母亲在战火中牺牲&lt;br&gt;我却无能为力&lt;br&gt;所以我既是父亲也是母亲&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="传说中的杂文" scheme="https://lisz.io/categories/%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E6%9D%82%E6%96%87/"/>
    
    
      <category term="现代诗" scheme="https://lisz.io/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>作为码农，我们为什么要写作</title>
    <link href="https://lisz.io/2015/08/12/why-write/"/>
    <id>https://lisz.io/2015/08/12/why-write/</id>
    <published>2015-08-12T07:56:22.000Z</published>
    <updated>2017-03-15T08:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。</p>
<h1 id="提高自己对知识的掌握层次"><a href="#提高自己对知识的掌握层次" class="headerlink" title="提高自己对知识的掌握层次"></a>提高自己对知识的掌握层次</h1><p>　　美国教育心理学家Bloom将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/071832044245186.png" alt="认知历程图" title="">
                </div>
                <div class="image-caption">认知历程图</div>
            </figure><br>　　对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。<br>　　我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。</p>
<h1 id="提高表达和沟通的能力"><a href="#提高表达和沟通的能力" class="headerlink" title="提高表达和沟通的能力"></a>提高表达和沟通的能力</h1><p>　　作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。<br>　　长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。</p>
<h1 id="接受读者的沟通和反馈"><a href="#接受读者的沟通和反馈" class="headerlink" title="接受读者的沟通和反馈"></a>接受读者的沟通和反馈</h1><p>　　当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：</p>
<ul>
<li>错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。</li>
<li>认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。</li>
<li>了解更多相关信息：一些读者会回复说：”某某框架也用了这个技术方案”，或者是：”你的这个实现方案没有另一个某某开源方案好”。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。</li>
</ul>
<h1 id="影响力"><a href="#影响力" class="headerlink" title="影响力"></a>影响力</h1><p>　　当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>　　在写作过程中，你将收获提高自己对知识的掌握层次和提高表达和沟通的能力的好处。<br>　　在写作结束后，你将收获错误内容反馈、认识朋友和了解更多相关信息的好处。<br>　　在坚持写作一段时间，你将收获影响力和传递知识的乐趣。<br>　　另外，《暗时间》的作者刘未鹏在他的文章，也总结了很多写作的好处，大家也可以看看。<br>　　看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！</p>
<p>原文转载自<a href="http://kb.cnblogs.com/page/526625/" target="_blank" rel="external">作者：唐巧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。不得
    
    </summary>
    
      <category term="哲学" scheme="https://lisz.io/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="码农" scheme="https://lisz.io/tags/%E7%A0%81%E5%86%9C/"/>
    
      <category term="写作" scheme="https://lisz.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Linux踢出其他正在SSH登陆用户</title>
    <link href="https://lisz.io/2015/08/09/linux-del-sshuser/"/>
    <id>https://lisz.io/2015/08/09/linux-del-sshuser/</id>
    <published>2015-08-09T07:45:53.000Z</published>
    <updated>2017-03-15T07:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些生产平台或者做安全审计的时候往往看到一大堆的用户SSH连接到同一台服务器，或者连接后没有正常关闭进程还驻留在系统内。限制SSH连接数与手动断开空闲连接也有必要之举，这里写出手动剔出其他用户的过程。</p>
<h1 id="查看系统在线用户"><a href="#查看系统在线用户" class="headerlink" title="查看系统在线用户"></a>查看系统在线用户</h1><pre><code>[root@apache ~]# w 
14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT 
root     pts/0    116.204.64.165   14:15    0.00s  0.06s  0.04s w 
root     pts/1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash
</code></pre><h1 id="查看当前自己占用终端，别把自己干掉了"><a href="#查看当前自己占用终端，别把自己干掉了" class="headerlink" title="查看当前自己占用终端，别把自己干掉了"></a>查看当前自己占用终端，别把自己干掉了</h1><pre><code>[root@apache ~]# who am i 
root     pts/0        2013-01-16 14:15 (116.204.64.165)
</code></pre><h1 id="用pkill-命令剔除对方"><a href="#用pkill-命令剔除对方" class="headerlink" title="用pkill 命令剔除对方"></a>用pkill 命令剔除对方</h1><pre><code>[root@apache ~]# pkill -kill -t pts/1
</code></pre><h1 id="用w命令在看看干掉没。"><a href="#用w命令在看看干掉没。" class="headerlink" title="用w命令在看看干掉没。"></a>用w命令在看看干掉没。</h1><pre><code>[root@apache ~]# w 
14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT 
root     pts/0    116.204.64.165   14:15    0.00s  0.03s  0.00s w
</code></pre><p>后记：<br>如果最后查看还是没有干掉，建议加上-9 强制杀死。</p>
<pre><code>[root@apache ~]# pkill -9 -t pts/1
</code></pre><p>原文转自<a href="http://www.myhack58.com/Article/48/66/2013/37031.htm" target="_blank" rel="external">http://www.myhack58.com/Article/48/66/2013/37031.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一些生产平台或者做安全审计的时候往往看到一大堆的用户SSH连接到同一台服务器，或者连接后没有正常关闭进程还驻留在系统内。限制SSH连接数与手动断开空闲连接也有必要之举，这里写出手动剔出其他用户的过程。&lt;/p&gt;
&lt;h1 id=&quot;查看系统在线用户&quot;&gt;&lt;a href=&quot;#查看系
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="linux" scheme="https://lisz.io/tags/linux/"/>
    
      <category term="踢出ssh用户" scheme="https://lisz.io/tags/%E8%B8%A2%E5%87%BAssh%E7%94%A8%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>Gravatar Fixed 头像载入出错</title>
    <link href="https://lisz.io/2015/08/08/gravatar-error/"/>
    <id>https://lisz.io/2015/08/08/gravatar-error/</id>
    <published>2015-08-08T07:41:01.000Z</published>
    <updated>2017-03-15T07:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>WordPress使用的用户默认头像是Gravatar Fixed 头像，由于种种原因，经常在国内载入出错。一般的解决办法有好几种，主要的是Gravatar Fixed 插件和修改wp-include中文件代码。</p>
<h1 id="一、Gravatar-Fixed-插件"><a href="#一、Gravatar-Fixed-插件" class="headerlink" title="一、Gravatar Fixed 插件"></a>一、Gravatar Fixed 插件</h1><p>在管理后台搜索该插件，排在第一的应该是<code>FV Gravatar Cache</code>插件，然而这个插件需要使用到国外google的一些东西，所以载入也基本上是没什么戏。还是用第二种方法，虽然不能一劳永逸，但是不升级wordpress时还是蛮管用的。</p>
<h1 id="二、修改wp-include目录下的link-template-php文件（大约在3604行）"><a href="#二、修改wp-include目录下的link-template-php文件（大约在3604行）" class="headerlink" title="二、修改wp-include目录下的link-template.php文件（大约在3604行）"></a>二、修改wp-include目录下的<code>link-template.php</code>文件（大约在3604行）</h1><p>1.使用vi工具编辑该文件，按esc键，直接输入<code>3604gg</code>（无回显），代码就会自动跳转到指定的3604行<br>2.按照下面修改：</p>
<pre><code class="bash">$url = sprintf(‘http://%d.gravatar.com/avatar/%s’, $gravatar_server, $email_hash );
</code></pre>
<p>修改为</p>
<pre><code class="bash">$url = sprintf(‘http://cn.gravatar.com/avatar/%s’, $email_hash );
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WordPress使用的用户默认头像是Gravatar Fixed 头像，由于种种原因，经常在国内载入出错。一般的解决办法有好几种，主要的是Gravatar Fixed 插件和修改wp-include中文件代码。&lt;/p&gt;
&lt;h1 id=&quot;一、Gravatar-Fixed-插
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="gravatar" scheme="https://lisz.io/tags/gravatar/"/>
    
      <category term="wordpress" scheme="https://lisz.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>解决VPS升级/安装WordPress主题及插件需要输入FTP账户和密码的问题</title>
    <link href="https://lisz.io/2015/08/08/wordpress-ftp/"/>
    <id>https://lisz.io/2015/08/08/wordpress-ftp/</id>
    <published>2015-08-08T06:24:10.000Z</published>
    <updated>2017-03-15T07:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天正式将原来博客网站转移至VPS中，原博客域名 <code>www.wl27.cn</code> 正式改为 <code>blog.wl27.cn</code> 。在VPS中搭建Wordpress博客，和使用主机空间搭建稍微有些不同。我使用的这台VPS是<code>Ubuntu 14.04 LTS</code>版本系统，采用LNMP一键架设整个服务坏境。在和使用主机空间搭建一样完成之后，由于Linux安全权限原因，我在网站后台升级、安全主题或者插件的时候，会出现提示需要我提供FTP信息的界面。有这样的字样提示”要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商”。<br>解决这样一个问题，其实只需要我们可以给自己的WP网站授权就可以了。</p>
<pre><code class="bash">chown -R www /home/wwwroot/blog.wl27.cn(修改成网站域名目录)
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天正式将原来博客网站转移至VPS中，原博客域名 &lt;code&gt;www.wl27.cn&lt;/code&gt; 正式改为 &lt;code&gt;blog.wl27.cn&lt;/code&gt; 。在VPS中搭建Wordpress博客，和使用主机空间搭建稍微有些不同。我使用的这台VPS是&lt;code&gt;Ubun
    
    </summary>
    
      <category term="tech" scheme="https://lisz.io/categories/tech/"/>
    
    
      <category term="vps" scheme="https://lisz.io/tags/vps/"/>
    
      <category term="ftp" scheme="https://lisz.io/tags/ftp/"/>
    
      <category term="wordpress主题安装" scheme="https://lisz.io/tags/wordpress%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>小小网页秀</title>
    <link href="https://lisz.io/2015/08/08/web-show/"/>
    <id>https://lisz.io/2015/08/08/web-show/</id>
    <published>2015-08-08T05:57:34.000Z</published>
    <updated>2017-03-15T06:21:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下面是一些很早之前做的一些网页，仅供欣赏："><a href="#下面是一些很早之前做的一些网页，仅供欣赏：" class="headerlink" title="下面是一些很早之前做的一些网页，仅供欣赏："></a>下面是一些很早之前做的一些网页，仅供欣赏：</h3><ul>
<li><a href="http://love.wl27.cn/614" target="_blank" rel="external">特色寝室答辩</a></li>
<li><a href="http://love.wl27.cn/bb/" target="_blank" rel="external">学生标兵答辩</a></li>
<li><a href="http://mk.wl27.cn" target="_blank" rel="external">markdown在线编辑器</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下面是一些很早之前做的一些网页，仅供欣赏：&quot;&gt;&lt;a href=&quot;#下面是一些很早之前做的一些网页，仅供欣赏：&quot; class=&quot;headerlink&quot; title=&quot;下面是一些很早之前做的一些网页，仅供欣赏：&quot;&gt;&lt;/a&gt;下面是一些很早之前做的一些网页，仅供欣赏：&lt;/
    
    </summary>
    
      <category term="作品展示" scheme="https://lisz.io/categories/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="网页秀" scheme="https://lisz.io/tags/%E7%BD%91%E9%A1%B5%E7%A7%80/"/>
    
  </entry>
  
</feed>
