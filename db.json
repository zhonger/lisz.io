{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/071832044245186.png","path":"images/071832044245186.png","modified":1,"renderable":0},{"_id":"source/images/201233182266986.jpg","path":"images/201233182266986.jpg","modified":1,"renderable":0},{"_id":"source/images/tree2.ico","path":"images/tree2.ico","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"97d91d5f5d4018a8bd44739702fc358684e9f83a","modified":1512296487811},{"_id":"source/_posts/arch-tutorial.md","hash":"5bdda2ad695afd8f1e1d10c1e26533feef44b3dd","modified":1512296487811},{"_id":"source/_posts/caddy-apache.md","hash":"d152b47c3bea58a3dcaa379f6b8096c0b96e063c","modified":1512296487811},{"_id":"source/_posts/docker-init.md","hash":"58a3d45d614c2cbcc6b3bc2182ab8434c0a2df69","modified":1512296487811},{"_id":"source/_posts/gravatar-error.md","hash":"e073cfdf23eea7a987ba099f5c4d13b29d1fa7e9","modified":1512296487811},{"_id":"source/_posts/laravel-lnmpa.md","hash":"6bab70e4b53c8f0551ee93bdccc6f1673a617606","modified":1512296487811},{"_id":"source/_posts/linux-del-sshuser.md","hash":"656bb4d20978ecc2dbed51740f289ae79bdb3f42","modified":1512296487811},{"_id":"source/_posts/linux-lvm.md","hash":"489bfc41a97c32d789eb22b1560688e32bfc6050","modified":1512296487811},{"_id":"source/_posts/mirrors-build.md","hash":"fe6693cee420cb6bc79f947a24c6ef4764fdb9a8","modified":1512296487811},{"_id":"source/_posts/my-daughter.md","hash":"4166212aa218882732c5f571fdb31fba63cba145","modified":1512296487811},{"_id":"source/_posts/tencent-down.md","hash":"e7018d83800b3d32a5d518afdc78fb69ad6d2a76","modified":1512296487811},{"_id":"source/_posts/tencent-mysql.md","hash":"8e5413f4d7c3171a0223699ccc4506f5fc98434d","modified":1512296487811},{"_id":"source/_posts/ubuntu-beatiful.md","hash":"373d9a45c87b63775af21b80b2f0405e15b972ae","modified":1512296487811},{"_id":"source/_posts/ubuntu-composer.md","hash":"e49cbf547f6175ea1358aa20004f0c4348c92bff","modified":1512296487811},{"_id":"source/_posts/ubuntu-nodejs.md","hash":"8a420222fdd69703cdd922bd14642a9b3229669a","modified":1512296487811},{"_id":"source/_posts/ubuntu-nvidia.md","hash":"3442fcf7c05719385d2245f83ca805efe4acd9a9","modified":1512296487811},{"_id":"source/_posts/unbound-dns.md","hash":"9d090dc690072b23adf9a16822149f719604e297","modified":1512301619340},{"_id":"source/_posts/web-show.md","hash":"5ab32ec30dbbd259abb5a63187831e1279e87069","modified":1512296487811},{"_id":"source/_posts/why-write.md","hash":"15077fcb5da24fb3c276e13bdca1fda68c1ae997","modified":1512296487811},{"_id":"source/_posts/windows-composer.md","hash":"c59984eeb344a320a9da70f460e73b03091cc5e2","modified":1512296487811},{"_id":"source/_posts/windows-pip.md","hash":"2d79276a85636e4ce4f458a0a662061e37db1d21","modified":1512296487811},{"_id":"source/_posts/wordpress-ftp.md","hash":"5cd579dfdf7588f59b44e5cb96a2eede5d044d10","modified":1512296487811},{"_id":"source/categories/index.md","hash":"bd657ac6fb65baaaa674fce33fecd707df9dad75","modified":1512296487811},{"_id":"source/css/tranquil-heart.min.css","hash":"9c669545e3517de77f5cff50a58e4ef035855c87","modified":1512296487811},{"_id":"source/images/071832044245186.png","hash":"6814f2608230b6cd760e9193bc166172de729dcd","modified":1512296487811},{"_id":"source/images/201233182266986.jpg","hash":"376bc75754018ff2406f94c3f5afdf0b2983e89e","modified":1512296487811},{"_id":"source/images/tree2.ico","hash":"6d3894e102a32b2a41ad9b181a38a9496f4976b3","modified":1512296487811},{"_id":"source/js/prettify.js","hash":"02c1a2d7ea1ff7e025473623ff45e24f4c87b6bb","modified":1512296487811},{"_id":"source/tags/index.md","hash":"af5792abf2b698fcdd8030560b7dd82338811cd8","modified":1512296487811}],"Category":[{"name":"tech","_id":"cjaqpcu530004tstnwbnvo76v"},{"name":"传说中的杂文","_id":"cjaqpcu5g000otstn4ev1dykl"},{"name":"作品展示","_id":"cjaqpcu5o001dtstnekbcwkmh"},{"name":"哲学","_id":"cjaqpcu5r001ktstngdfctd2z"}],"Data":[],"Page":[{"layout":"categories","comments":0,"title":"categories","date":"2017-03-15T05:01:36.000Z","_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ncomments: false\ntitle: categories\ndate: 2017-03-15 13:01:36\n---\n","updated":"2017-12-03T10:21:27.811Z","path":"categories/index.html","_id":"cjaqpcu500001tstn48yd7r5u","content":"","excerpt":"","more":""},{"_content":"/*! Color themes for Google Code Prettify | MIT License | github.com/jmblog/color-themes-for-google-code-prettify */\n.prettyprint{background:#2f3640;font-family:Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Consolas,monospace;border:0!important}.pln{color:#e6e9ed}ol.linenums{margin-top:0;margin-bottom:0;color:#656d78}li.L0,li.L1,li.L2,li.L3,li.L4,li.L5,li.L6,li.L7,li.L8,li.L9{padding-left:1em;background-color:#2f3640;list-style-type:decimal}@media screen{.str{color:#ffce54}.kwd{color:#4fc1e9}.com{color:#656d78}.typ{color:#4fc1e9}.lit{color:#ac92ec}.pun{color:#e6e9ed}.opn{color:#e6e9ed}.clo{color:#e6e9ed}.tag{color:#ed5565}.atn{color:#a0d468}.atv{color:#ffce54}.dec{color:#ac92ec}.var{color:#e6e9ed}.fun{color:#e6e9ed}}","source":"css/tranquil-heart.min.css","raw":"/*! Color themes for Google Code Prettify | MIT License | github.com/jmblog/color-themes-for-google-code-prettify */\n.prettyprint{background:#2f3640;font-family:Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Consolas,monospace;border:0!important}.pln{color:#e6e9ed}ol.linenums{margin-top:0;margin-bottom:0;color:#656d78}li.L0,li.L1,li.L2,li.L3,li.L4,li.L5,li.L6,li.L7,li.L8,li.L9{padding-left:1em;background-color:#2f3640;list-style-type:decimal}@media screen{.str{color:#ffce54}.kwd{color:#4fc1e9}.com{color:#656d78}.typ{color:#4fc1e9}.lit{color:#ac92ec}.pun{color:#e6e9ed}.opn{color:#e6e9ed}.clo{color:#e6e9ed}.tag{color:#ed5565}.atn{color:#a0d468}.atv{color:#ffce54}.dec{color:#ac92ec}.var{color:#e6e9ed}.fun{color:#e6e9ed}}","date":"2017-12-03T10:21:27.811Z","updated":"2017-12-03T10:21:27.811Z","path":"css/tranquil-heart.min.css","layout":"false","title":"","comments":1,"_id":"cjaqpcu520003tstn9x6lpc3d","content":"/*! Color themes for Google Code Prettify | MIT License | github.com/jmblog/color-themes-for-google-code-prettify */\n.prettyprint{background:#2f3640;font-family:Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Consolas,monospace;border:0!important}.pln{color:#e6e9ed}ol.linenums{margin-top:0;margin-bottom:0;color:#656d78}li.L0,li.L1,li.L2,li.L3,li.L4,li.L5,li.L6,li.L7,li.L8,li.L9{padding-left:1em;background-color:#2f3640;list-style-type:decimal}@media screen{.str{color:#ffce54}.kwd{color:#4fc1e9}.com{color:#656d78}.typ{color:#4fc1e9}.lit{color:#ac92ec}.pun{color:#e6e9ed}.opn{color:#e6e9ed}.clo{color:#e6e9ed}.tag{color:#ed5565}.atn{color:#a0d468}.atv{color:#ffce54}.dec{color:#ac92ec}.var{color:#e6e9ed}.fun{color:#e6e9ed}}","excerpt":"","more":"/*! Color themes for Google Code Prettify | MIT License | github.com/jmblog/color-themes-for-google-code-prettify */\n.prettyprint{background:#2f3640;font-family:Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Consolas,monospace;border:0!important}.pln{color:#e6e9ed}ol.linenums{margin-top:0;margin-bottom:0;color:#656d78}li.L0,li.L1,li.L2,li.L3,li.L4,li.L5,li.L6,li.L7,li.L8,li.L9{padding-left:1em;background-color:#2f3640;list-style-type:decimal}@media screen{.str{color:#ffce54}.kwd{color:#4fc1e9}.com{color:#656d78}.typ{color:#4fc1e9}.lit{color:#ac92ec}.pun{color:#e6e9ed}.opn{color:#e6e9ed}.clo{color:#e6e9ed}.tag{color:#ed5565}.atn{color:#a0d468}.atv{color:#ffce54}.dec{color:#ac92ec}.var{color:#e6e9ed}.fun{color:#e6e9ed}}"},{"_content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\nvar HACK_TO_FIX_JS_INCLUDE_PL;\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","source":"js/prettify.js","raw":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\nvar HACK_TO_FIX_JS_INCLUDE_PL;\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","date":"2017-12-03T10:21:27.811Z","updated":"2017-12-03T10:21:27.811Z","path":"js/prettify.js","layout":"false","title":"","comments":1,"_id":"cjaqpcu6t003utstnbhvbcvtm","content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"external\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <br>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <br>}) corresponding to that\n*     span.\n* </dd></dt></dd></dt></dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\nvar HACK_TO_FIX_JS_INCLUDE_PL;\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * </p><p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1=\"\" 2=\"\" 65=\"\" c1=\"\" &&=\"\" <=\"7\" )=\"\" {=\"\" return=\"\" parseint(charsetpart.substring(1),=\"\" 8);=\"\" }=\"\" else=\"\" if=\"\" (c1=\"==\" 'u'=\"\" ||=\"\" 'x')=\"\" parseint(charsetpart.substring(2),=\"\" 16);=\"\" charsetpart.charcodeat(1);=\"\" function=\"\" encodeescape(charcode)=\"\" (charcode=\"\" 0x20)=\"\" 0x10=\"\" ?=\"\" '\\\\x0'=\"\" :=\"\" '\\\\x')=\"\" +=\"\" charcode.tostring(16);=\"\" var=\"\" ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\'=\"\" '-'=\"\" ']'=\"\" '^')=\"\" \"\\\\\"=\"\" ch;=\"\" casefoldcharset(charset)=\"\" charsetparts=\"charSet.substring(1,\" charset.length=\"\" -=\"\" 1).match(=\"\" new=\"\" regexp(=\"\" '\\\\\\\\u[0-9a-fa-f]{4}'=\"\" '|\\\\\\\\x[0-9a-fa-f]{2}'=\"\" '|\\\\\\\\[0-3][0-7]{0,2}'=\"\" '|\\\\\\\\[0-7]{1,2}'=\"\" '|\\\\\\\\[\\\\s\\\\s]'=\"\" '|-'=\"\" '|[^-\\\\\\\\]',=\"\" 'g'));=\"\" ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^';=\"\" out=\"['['];\" (inverse)=\"\" out.push('^');=\"\" for=\"\" (var=\"\" i=\"inverse\" 0,=\"\" n=\"charsetParts.length;\" n;=\"\" ++i)=\"\" p=\"charsetParts[i];\" (=\"\" \\\\[bdsw]=\"\" i.test(p))=\"\" don't=\"\" muck=\"\" with=\"\" named=\"\" groups.=\"\" out.push(p);=\"\" start=\"decodeEscape(p);\" end;=\"\" (i=\"\" charsetparts[i=\"\" 1])=\"\" end=\"decodeEscape(charsetParts[i\" 2]);=\"\" ranges.push([start,=\"\" end]);=\"\" the=\"\" range=\"\" might=\"\" intersect=\"\" letters,=\"\" then=\"\" expand=\"\" it.=\"\" this=\"\" case=\"\" handling=\"\" is=\"\" too=\"\" simplistic.=\"\" it=\"\" does=\"\" not=\"\" deal=\"\" non-latin=\"\" folding.=\"\" works=\"\" latin=\"\" source=\"\" code=\"\" identifiers=\"\" though.=\"\" (!(end=\"\"> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1]=\"\" +=\"\" 1)=\"\" {=\"\" range[1]);=\"\" }=\"\" else=\"\" consolidatedranges.push(lastrange=\"range);\" for=\"\" (var=\"\" i=\"0;\" <=\"\" consolidatedranges.length;=\"\" ++i)=\"\" var=\"\" range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0]));=\"\" if=\"\" (range[1]=\"\"> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex)=\"\" {=\"\" capturedgroups[decimalvalue]=\"-1;\" }=\"\" else=\"\" replace=\"\" with=\"\" an=\"\" unambiguous=\"\" escape=\"\" sequence=\"\" so=\"\" that=\"\" octal=\"\" does=\"\" not=\"\" turn=\"\" into=\"\" a=\"\" backreference=\"\" to=\"\" capturing=\"\" group=\"\" from=\"\" earlier=\"\" regex.=\"\" parts[i]=\"encodeEscape(decimalValue);\" renumber=\"\" groups=\"\" and=\"\" reduce=\"\" non-capturing=\"\" where=\"\" possible.=\"\" for=\"\" (var=\"\" i=\"1;\" <=\"\" capturedgroups.length;=\"\" ++i)=\"\" if=\"\" (-1=\"==\" capturedgroups[i])=\"\" capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n;=\"\" var=\"\" p=\"parts[i];\" (p=\"==\" '(')=\"\" ++groupindex;=\"\" (!capturedgroups[groupindex])=\"\" ;=\"\" ('\\\\'=\"==\" p.charat(0))=\"\" decimalvalue=\"+p.substring(1);\" (decimalvalue=\"\" &&=\"\" +=\"\" capturedgroups[decimalvalue];=\"\" remove=\"\" any=\"\" prefix=\"\" anchors=\"\" the=\"\" output=\"\" will=\"\" match=\"\" anywhere.=\"\" ^^=\"\" really=\"\" mean=\"\" anchored=\"\" though.=\"\" ('^'=\"==\" '^'=\"\" !=\"=\" parts[i=\"\" 1])=\"\" expand=\"\" letters=\"\" handle=\"\" mixing=\"\" of=\"\" case-sensitive=\"\" case-insensitive=\"\" patterns=\"\" necessary.=\"\" (regex.ignorecase=\"\" needtofoldcase)=\"\" ch0=\"p.charAt(0);\" (p.length=\"\">= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...=\"\">} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1=\"\" index_n,=\"\" and=\"\" style_n-1=\"\" applies=\"\" to=\"\" *=\"\" all=\"\" characters=\"\" in=\"\" sourcecode[index_n-1:index_n].=\"\" the=\"\" stylepatterns=\"\" is=\"\" a=\"\" list=\"\" whose=\"\" elements=\"\" have=\"\" form=\"\" [style=\"\" :=\"\" string,=\"\" pattern=\"\" regexp,=\"\" deprecated,=\"\" shortcut=\"\" string].=\"\" style=\"\" constant=\"\" like=\"\" pr_plain,=\"\" or=\"\" can=\"\" be=\"\" string=\"\" of=\"\" 'lang-foo',=\"\" where=\"\" foo=\"\" language=\"\" extension=\"\" describing=\"\" portion=\"\" token=\"\" $1=\"\" after=\"\" executes.=\"\" e.g.,=\"\" if=\"\" 'lang-lisp',=\"\" group=\"\" contains=\"\" text=\"\" '(hello=\"\" (world))',=\"\" then=\"\" that=\"\" will=\"\" passed=\"\" registered=\"\" lisp=\"\" handler=\"\" for=\"\" formatting.=\"\" before=\"\" restyled=\"\" using=\"\" this=\"\" decorator=\"\" so=\"\" decorators=\"\" should=\"\" take=\"\" care=\"\" doesn't=\"\" result=\"\" infinite=\"\" recursion.=\"\" example,=\"\" html=\"\" lexer=\"\" rule=\"\" script=\"\" looks=\"\" something=\"\" ['lang-js',=\"\" <[s]cript=\"\">(.+?)<\\ script=\"\">/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n</script></\\></=></code></pre></p></code></pre></string></number|node></number|node></number|string></p></pre></code></pre></p>","excerpt":"","more":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\nvar HACK_TO_FIX_JS_INCLUDE_PL;\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n"},{"layout":"tags","comments":0,"title":"tags","date":"2017-03-15T05:00:35.000Z","_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ncomments: false\ntitle: tags\ndate: 2017-03-15 13:00:35\n---\n","updated":"2017-12-03T10:21:27.811Z","path":"tags/index.html","_id":"cjaqpcu6u003vtstnefgxhl7y","content":"","excerpt":"","more":""}],"Post":[{"title":"archlinux入门初步","date":"2017-07-19T07:23:10.000Z","_content":"# 制作`archlinux`启动盘\n- 从`archlinux`官方或者是镜像源下载到iso文件\n- 使用以下命令制作启动U盘\n```\ndd if=image.iso of=/dev/sd[x]\n```\n> 参考自[Install_from_a_USB_flash_drive](https://wiki.archlinux.org/index.php/USB_flash_installation_media)\n\n# 安装准备\n- 电脑插入启动U盘，并选择从U盘的`uefi`模式启动\n- 键盘布局: `loadkeys us`\n- 验证启动模式: `ls /sys/firmware/efi/efivars`，如果目录不存在，系统即为`BIOS`或`CSM`模式启动\n- 联网: `ping -c 3 www.baidu.com`，若发现网络不通，则`systemctl stop dhcpcd`停用dhcpcd进程\n- 更新系统时间: `timedatectl set-ntp true`，用`timedatectl status`检查服务状态\n- 建立硬盘分区: 比如磁盘为`/dev/sda`，则使用`fdisk /dev/sda`对磁盘进行操作；首先使用`g`转换成`gpt`分区格式；其次使用`n`分别建立`512MB`的EFI分区和剩余硬盘大小的根目录分区\n- 挂载分区: \n```\nmount /dev/sda2 /mnt\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\n```\n\n# 安装\n- 选择镜像地址: 编辑`/etc/pacman.d/mirrorlist`，建议使用以下首选`mirror`\n```\nServer = https://mirrors.shuosc.org/archlinux/$repo/os/$arch\nServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\n```\n- 安装基本系统及AUR: `pacstrap /mnt base base-devel`\n\n# 配置系统\n- Fstab: `genfstab -U /mnt >> /mnt/etc/fstab`\n- Chroot: 使用`arch-chroot /mnt`Change root到新的安装系统\n- 时区: 使用以下命令设置时区及时间标准为`UTC`\n```\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nhwclock --systohc --utc\n```\n- Locale: 修改`/etc/locale.gen`文件，将所需语言前的注释删除，比如以下几个，再使用`locale-gen`生成locale配置文件，并提交默认语言\n```\nen_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8\nzh_SG.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8\n```\n```\nlocale-gen\necho LANG=en_US.UTF-8 > /etc/locale.conf\n```\n- 主机名: 使用`echo arch > /etc/hostname`设置主机名，并添加对应信息至`/etc/hosts`，如下所示：\n```\n127.0.1.1        arch.localdomain  arch\n```\n- 网络配置: 使用`systemctl enable dhcpcd.service`让`DHCP`服务开机自启动\n- 设置用户: 首先如下新增用户，然后往`/etc/sudoers`添加`username ALL=(ALL) NOPASSWD:ALL`\n```\nuseradd username\npasswd username\nmkdir /home/username\nchown -R username:username /home/username\n```\n- 安装引导程序: \n```\npacman -S grub os-prober efibootmgr dosfstools\ngrub-install --target-x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck\ngrub-mkconfig -o /boot/grub/grub.cfg\n```\n\n# 其他配置\n- 配置显卡: 使用`pacman -S nvidia`安装nvidia驱动，删除`/etc/pacman.conf`中的`multilib`部分注释，使用`pacman -Syy`刷新软件缓存，`pacman -S lib32-nvidia-utils`安装对应的基本库。参考自[NVIDIA](https://wiki.archlinux.org/index.php/NVIDIA)\n- 安装xorg: \n```\npacman -S xorg\nnvidia-xconfig\n```\n- 安装gnome: \n```\npacman -S gnome gnome-extra\npacman -S gnome gdm\nsystemctl enable gdm\n```\n\n# 重启\n重启之后从硬盘启动就会进入gdm登录界面，使用上面设置的username和密码登录即可，如果用户名和密码都正确无法登录，说明该用户未建立对应用户主目录","source":"_posts/arch-tutorial.md","raw":"---\ntitle: archlinux入门初步\ndate: 2017-07-19 15:23:10\ncategories:\n- tech\ntags:\n- archlinux\n- setup\n---\n# 制作`archlinux`启动盘\n- 从`archlinux`官方或者是镜像源下载到iso文件\n- 使用以下命令制作启动U盘\n```\ndd if=image.iso of=/dev/sd[x]\n```\n> 参考自[Install_from_a_USB_flash_drive](https://wiki.archlinux.org/index.php/USB_flash_installation_media)\n\n# 安装准备\n- 电脑插入启动U盘，并选择从U盘的`uefi`模式启动\n- 键盘布局: `loadkeys us`\n- 验证启动模式: `ls /sys/firmware/efi/efivars`，如果目录不存在，系统即为`BIOS`或`CSM`模式启动\n- 联网: `ping -c 3 www.baidu.com`，若发现网络不通，则`systemctl stop dhcpcd`停用dhcpcd进程\n- 更新系统时间: `timedatectl set-ntp true`，用`timedatectl status`检查服务状态\n- 建立硬盘分区: 比如磁盘为`/dev/sda`，则使用`fdisk /dev/sda`对磁盘进行操作；首先使用`g`转换成`gpt`分区格式；其次使用`n`分别建立`512MB`的EFI分区和剩余硬盘大小的根目录分区\n- 挂载分区: \n```\nmount /dev/sda2 /mnt\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\n```\n\n# 安装\n- 选择镜像地址: 编辑`/etc/pacman.d/mirrorlist`，建议使用以下首选`mirror`\n```\nServer = https://mirrors.shuosc.org/archlinux/$repo/os/$arch\nServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\n```\n- 安装基本系统及AUR: `pacstrap /mnt base base-devel`\n\n# 配置系统\n- Fstab: `genfstab -U /mnt >> /mnt/etc/fstab`\n- Chroot: 使用`arch-chroot /mnt`Change root到新的安装系统\n- 时区: 使用以下命令设置时区及时间标准为`UTC`\n```\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nhwclock --systohc --utc\n```\n- Locale: 修改`/etc/locale.gen`文件，将所需语言前的注释删除，比如以下几个，再使用`locale-gen`生成locale配置文件，并提交默认语言\n```\nen_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8\nzh_SG.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8\n```\n```\nlocale-gen\necho LANG=en_US.UTF-8 > /etc/locale.conf\n```\n- 主机名: 使用`echo arch > /etc/hostname`设置主机名，并添加对应信息至`/etc/hosts`，如下所示：\n```\n127.0.1.1        arch.localdomain  arch\n```\n- 网络配置: 使用`systemctl enable dhcpcd.service`让`DHCP`服务开机自启动\n- 设置用户: 首先如下新增用户，然后往`/etc/sudoers`添加`username ALL=(ALL) NOPASSWD:ALL`\n```\nuseradd username\npasswd username\nmkdir /home/username\nchown -R username:username /home/username\n```\n- 安装引导程序: \n```\npacman -S grub os-prober efibootmgr dosfstools\ngrub-install --target-x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck\ngrub-mkconfig -o /boot/grub/grub.cfg\n```\n\n# 其他配置\n- 配置显卡: 使用`pacman -S nvidia`安装nvidia驱动，删除`/etc/pacman.conf`中的`multilib`部分注释，使用`pacman -Syy`刷新软件缓存，`pacman -S lib32-nvidia-utils`安装对应的基本库。参考自[NVIDIA](https://wiki.archlinux.org/index.php/NVIDIA)\n- 安装xorg: \n```\npacman -S xorg\nnvidia-xconfig\n```\n- 安装gnome: \n```\npacman -S gnome gnome-extra\npacman -S gnome gdm\nsystemctl enable gdm\n```\n\n# 重启\n重启之后从硬盘启动就会进入gdm登录界面，使用上面设置的username和密码登录即可，如果用户名和密码都正确无法登录，说明该用户未建立对应用户主目录","slug":"arch-tutorial","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu4x0000tstn3utxchrb","content":"<h1 id=\"制作archlinux启动盘\"><a href=\"#制作archlinux启动盘\" class=\"headerlink\" title=\"制作archlinux启动盘\"></a>制作<code>archlinux</code>启动盘</h1><ul>\n<li>从<code>archlinux</code>官方或者是镜像源下载到iso文件</li>\n<li>使用以下命令制作启动U盘<pre><code>dd if=image.iso of=/dev/sd[x]\n</code></pre><blockquote>\n<p>参考自<a href=\"https://wiki.archlinux.org/index.php/USB_flash_installation_media\" target=\"_blank\" rel=\"external\">Install_from_a_USB_flash_drive</a></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h1><ul>\n<li>电脑插入启动U盘，并选择从U盘的<code>uefi</code>模式启动</li>\n<li>键盘布局: <code>loadkeys us</code></li>\n<li>验证启动模式: <code>ls /sys/firmware/efi/efivars</code>，如果目录不存在，系统即为<code>BIOS</code>或<code>CSM</code>模式启动</li>\n<li>联网: <code>ping -c 3 www.baidu.com</code>，若发现网络不通，则<code>systemctl stop dhcpcd</code>停用dhcpcd进程</li>\n<li>更新系统时间: <code>timedatectl set-ntp true</code>，用<code>timedatectl status</code>检查服务状态</li>\n<li>建立硬盘分区: 比如磁盘为<code>/dev/sda</code>，则使用<code>fdisk /dev/sda</code>对磁盘进行操作；首先使用<code>g</code>转换成<code>gpt</code>分区格式；其次使用<code>n</code>分别建立<code>512MB</code>的EFI分区和剩余硬盘大小的根目录分区</li>\n<li>挂载分区: <pre><code>mount /dev/sda2 /mnt\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\n</code></pre></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ul>\n<li>选择镜像地址: 编辑<code>/etc/pacman.d/mirrorlist</code>，建议使用以下首选<code>mirror</code><pre><code>Server = https://mirrors.shuosc.org/archlinux/$repo/os/$arch\nServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\n</code></pre></li>\n<li>安装基本系统及AUR: <code>pacstrap /mnt base base-devel</code></li>\n</ul>\n<h1 id=\"配置系统\"><a href=\"#配置系统\" class=\"headerlink\" title=\"配置系统\"></a>配置系统</h1><ul>\n<li>Fstab: <code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></li>\n<li>Chroot: 使用<code>arch-chroot /mnt</code>Change root到新的安装系统</li>\n<li>时区: 使用以下命令设置时区及时间标准为<code>UTC</code><pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nhwclock --systohc --utc\n</code></pre></li>\n<li>Locale: 修改<code>/etc/locale.gen</code>文件，将所需语言前的注释删除，比如以下几个，再使用<code>locale-gen</code>生成locale配置文件，并提交默认语言<pre><code>en_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8\nzh_SG.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8\n</code></pre><pre><code>locale-gen\necho LANG=en_US.UTF-8 &gt; /etc/locale.conf\n</code></pre></li>\n<li>主机名: 使用<code>echo arch &gt; /etc/hostname</code>设置主机名，并添加对应信息至<code>/etc/hosts</code>，如下所示：<pre><code>127.0.1.1        arch.localdomain  arch\n</code></pre></li>\n<li>网络配置: 使用<code>systemctl enable dhcpcd.service</code>让<code>DHCP</code>服务开机自启动</li>\n<li>设置用户: 首先如下新增用户，然后往<code>/etc/sudoers</code>添加<code>username ALL=(ALL) NOPASSWD:ALL</code><pre><code>useradd username\npasswd username\nmkdir /home/username\nchown -R username:username /home/username\n</code></pre></li>\n<li>安装引导程序: <pre><code>pacman -S grub os-prober efibootmgr dosfstools\ngrub-install --target-x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck\ngrub-mkconfig -o /boot/grub/grub.cfg\n</code></pre></li>\n</ul>\n<h1 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h1><ul>\n<li>配置显卡: 使用<code>pacman -S nvidia</code>安装nvidia驱动，删除<code>/etc/pacman.conf</code>中的<code>multilib</code>部分注释，使用<code>pacman -Syy</code>刷新软件缓存，<code>pacman -S lib32-nvidia-utils</code>安装对应的基本库。参考自<a href=\"https://wiki.archlinux.org/index.php/NVIDIA\" target=\"_blank\" rel=\"external\">NVIDIA</a></li>\n<li>安装xorg: <pre><code>pacman -S xorg\nnvidia-xconfig\n</code></pre></li>\n<li>安装gnome: <pre><code>pacman -S gnome gnome-extra\npacman -S gnome gdm\nsystemctl enable gdm\n</code></pre></li>\n</ul>\n<h1 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h1><p>重启之后从硬盘启动就会进入gdm登录界面，使用上面设置的username和密码登录即可，如果用户名和密码都正确无法登录，说明该用户未建立对应用户主目录</p>\n","excerpt":"","more":"<h1 id=\"制作archlinux启动盘\"><a href=\"#制作archlinux启动盘\" class=\"headerlink\" title=\"制作archlinux启动盘\"></a>制作<code>archlinux</code>启动盘</h1><ul>\n<li>从<code>archlinux</code>官方或者是镜像源下载到iso文件</li>\n<li>使用以下命令制作启动U盘<pre><code>dd if=image.iso of=/dev/sd[x]\n</code></pre><blockquote>\n<p>参考自<a href=\"https://wiki.archlinux.org/index.php/USB_flash_installation_media\">Install_from_a_USB_flash_drive</a></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h1><ul>\n<li>电脑插入启动U盘，并选择从U盘的<code>uefi</code>模式启动</li>\n<li>键盘布局: <code>loadkeys us</code></li>\n<li>验证启动模式: <code>ls /sys/firmware/efi/efivars</code>，如果目录不存在，系统即为<code>BIOS</code>或<code>CSM</code>模式启动</li>\n<li>联网: <code>ping -c 3 www.baidu.com</code>，若发现网络不通，则<code>systemctl stop dhcpcd</code>停用dhcpcd进程</li>\n<li>更新系统时间: <code>timedatectl set-ntp true</code>，用<code>timedatectl status</code>检查服务状态</li>\n<li>建立硬盘分区: 比如磁盘为<code>/dev/sda</code>，则使用<code>fdisk /dev/sda</code>对磁盘进行操作；首先使用<code>g</code>转换成<code>gpt</code>分区格式；其次使用<code>n</code>分别建立<code>512MB</code>的EFI分区和剩余硬盘大小的根目录分区</li>\n<li>挂载分区: <pre><code>mount /dev/sda2 /mnt\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\n</code></pre></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ul>\n<li>选择镜像地址: 编辑<code>/etc/pacman.d/mirrorlist</code>，建议使用以下首选<code>mirror</code><pre><code>Server = https://mirrors.shuosc.org/archlinux/$repo/os/$arch\nServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\n</code></pre></li>\n<li>安装基本系统及AUR: <code>pacstrap /mnt base base-devel</code></li>\n</ul>\n<h1 id=\"配置系统\"><a href=\"#配置系统\" class=\"headerlink\" title=\"配置系统\"></a>配置系统</h1><ul>\n<li>Fstab: <code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></li>\n<li>Chroot: 使用<code>arch-chroot /mnt</code>Change root到新的安装系统</li>\n<li>时区: 使用以下命令设置时区及时间标准为<code>UTC</code><pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nhwclock --systohc --utc\n</code></pre></li>\n<li>Locale: 修改<code>/etc/locale.gen</code>文件，将所需语言前的注释删除，比如以下几个，再使用<code>locale-gen</code>生成locale配置文件，并提交默认语言<pre><code>en_US.UTF-8 UTF-8\nzh_CN.UTF-8 UTF-8\nzh_SG.UTF-8 UTF-8\nzh_TW.UTF-8 UTF-8\n</code></pre><pre><code>locale-gen\necho LANG=en_US.UTF-8 &gt; /etc/locale.conf\n</code></pre></li>\n<li>主机名: 使用<code>echo arch &gt; /etc/hostname</code>设置主机名，并添加对应信息至<code>/etc/hosts</code>，如下所示：<pre><code>127.0.1.1        arch.localdomain  arch\n</code></pre></li>\n<li>网络配置: 使用<code>systemctl enable dhcpcd.service</code>让<code>DHCP</code>服务开机自启动</li>\n<li>设置用户: 首先如下新增用户，然后往<code>/etc/sudoers</code>添加<code>username ALL=(ALL) NOPASSWD:ALL</code><pre><code>useradd username\npasswd username\nmkdir /home/username\nchown -R username:username /home/username\n</code></pre></li>\n<li>安装引导程序: <pre><code>pacman -S grub os-prober efibootmgr dosfstools\ngrub-install --target-x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck\ngrub-mkconfig -o /boot/grub/grub.cfg\n</code></pre></li>\n</ul>\n<h1 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h1><ul>\n<li>配置显卡: 使用<code>pacman -S nvidia</code>安装nvidia驱动，删除<code>/etc/pacman.conf</code>中的<code>multilib</code>部分注释，使用<code>pacman -Syy</code>刷新软件缓存，<code>pacman -S lib32-nvidia-utils</code>安装对应的基本库。参考自<a href=\"https://wiki.archlinux.org/index.php/NVIDIA\">NVIDIA</a></li>\n<li>安装xorg: <pre><code>pacman -S xorg\nnvidia-xconfig\n</code></pre></li>\n<li>安装gnome: <pre><code>pacman -S gnome gnome-extra\npacman -S gnome gdm\nsystemctl enable gdm\n</code></pre></li>\n</ul>\n<h1 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h1><p>重启之后从硬盘启动就会进入gdm登录界面，使用上面设置的username和密码登录即可，如果用户名和密码都正确无法登录，说明该用户未建立对应用户主目录</p>\n"},{"title":"使用caddy和apache搭建php环境","date":"2017-06-21T12:53:02.000Z","_content":"\n# caddy篇\n## 安装caddy\n```\n$ curl https://getcaddy.com | bash\n```\n## 配置Caddyfile\n```\nyun.wl27.cn {\n    gzip\n    proxy / http://127.0.0.1:10080\n}\n\n```\n## 安装并配置supervisor\n```\n$ sudo pip install supervisor\n```\n`/etc/supervisord.conf`\n```\n[program:caddy]\ncommand=caddy -conf /root/Caddyfile\nuser=root\nautostart=true\nautorestart=true\nstartsecs=3\nstderr_logfile=/tmp/caddy_err.log\nstdout_logfile=/tmp/caddy.log\n\n[supervisord]\n```\n\n\n# 安装apache\n```\n$ sudo apt-get install apache2 \n$ sudo a2enmod rewrite env headers mime dir setenvif\n```\n\n# php篇\n## 安装php7.0\n```\n$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.0\n$ sudo apt-get install libapache2-mod-php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-common php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring\n```\n## 配置虚拟主机\n`/etc/apache2/sites-available`\n```\n\n```\n\n# 安装mysql\n","source":"_posts/caddy-apache.md","raw":"---\ntitle: 使用caddy和apache搭建php环境\ndate: 2017-06-21 20:53:02\ntags:\n---\n\n# caddy篇\n## 安装caddy\n```\n$ curl https://getcaddy.com | bash\n```\n## 配置Caddyfile\n```\nyun.wl27.cn {\n    gzip\n    proxy / http://127.0.0.1:10080\n}\n\n```\n## 安装并配置supervisor\n```\n$ sudo pip install supervisor\n```\n`/etc/supervisord.conf`\n```\n[program:caddy]\ncommand=caddy -conf /root/Caddyfile\nuser=root\nautostart=true\nautorestart=true\nstartsecs=3\nstderr_logfile=/tmp/caddy_err.log\nstdout_logfile=/tmp/caddy.log\n\n[supervisord]\n```\n\n\n# 安装apache\n```\n$ sudo apt-get install apache2 \n$ sudo a2enmod rewrite env headers mime dir setenvif\n```\n\n# php篇\n## 安装php7.0\n```\n$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.0\n$ sudo apt-get install libapache2-mod-php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-common php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring\n```\n## 配置虚拟主机\n`/etc/apache2/sites-available`\n```\n\n```\n\n# 安装mysql\n","slug":"caddy-apache","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu510002tstniu96jhzm","content":"<h1 id=\"caddy篇\"><a href=\"#caddy篇\" class=\"headerlink\" title=\"caddy篇\"></a>caddy篇</h1><h2 id=\"安装caddy\"><a href=\"#安装caddy\" class=\"headerlink\" title=\"安装caddy\"></a>安装caddy</h2><pre><code>$ curl https://getcaddy.com | bash\n</code></pre><h2 id=\"配置Caddyfile\"><a href=\"#配置Caddyfile\" class=\"headerlink\" title=\"配置Caddyfile\"></a>配置Caddyfile</h2><pre><code>yun.wl27.cn {\n    gzip\n    proxy / http://127.0.0.1:10080\n}\n</code></pre><h2 id=\"安装并配置supervisor\"><a href=\"#安装并配置supervisor\" class=\"headerlink\" title=\"安装并配置supervisor\"></a>安装并配置supervisor</h2><pre><code>$ sudo pip install supervisor\n</code></pre><p><code>/etc/supervisord.conf</code></p>\n<pre><code>[program:caddy]\ncommand=caddy -conf /root/Caddyfile\nuser=root\nautostart=true\nautorestart=true\nstartsecs=3\nstderr_logfile=/tmp/caddy_err.log\nstdout_logfile=/tmp/caddy.log\n\n[supervisord]\n</code></pre><h1 id=\"安装apache\"><a href=\"#安装apache\" class=\"headerlink\" title=\"安装apache\"></a>安装apache</h1><pre><code>$ sudo apt-get install apache2 \n$ sudo a2enmod rewrite env headers mime dir setenvif\n</code></pre><h1 id=\"php篇\"><a href=\"#php篇\" class=\"headerlink\" title=\"php篇\"></a>php篇</h1><h2 id=\"安装php7-0\"><a href=\"#安装php7-0\" class=\"headerlink\" title=\"安装php7.0\"></a>安装php7.0</h2><pre><code>$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.0\n$ sudo apt-get install libapache2-mod-php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-common php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring\n</code></pre><h2 id=\"配置虚拟主机\"><a href=\"#配置虚拟主机\" class=\"headerlink\" title=\"配置虚拟主机\"></a>配置虚拟主机</h2><p><code>/etc/apache2/sites-available</code></p>\n<pre><code>\n</code></pre><h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1>","excerpt":"","more":"<h1 id=\"caddy篇\"><a href=\"#caddy篇\" class=\"headerlink\" title=\"caddy篇\"></a>caddy篇</h1><h2 id=\"安装caddy\"><a href=\"#安装caddy\" class=\"headerlink\" title=\"安装caddy\"></a>安装caddy</h2><pre><code>$ curl https://getcaddy.com | bash\n</code></pre><h2 id=\"配置Caddyfile\"><a href=\"#配置Caddyfile\" class=\"headerlink\" title=\"配置Caddyfile\"></a>配置Caddyfile</h2><pre><code>yun.wl27.cn {\n    gzip\n    proxy / http://127.0.0.1:10080\n}\n</code></pre><h2 id=\"安装并配置supervisor\"><a href=\"#安装并配置supervisor\" class=\"headerlink\" title=\"安装并配置supervisor\"></a>安装并配置supervisor</h2><pre><code>$ sudo pip install supervisor\n</code></pre><p><code>/etc/supervisord.conf</code></p>\n<pre><code>[program:caddy]\ncommand=caddy -conf /root/Caddyfile\nuser=root\nautostart=true\nautorestart=true\nstartsecs=3\nstderr_logfile=/tmp/caddy_err.log\nstdout_logfile=/tmp/caddy.log\n\n[supervisord]\n</code></pre><h1 id=\"安装apache\"><a href=\"#安装apache\" class=\"headerlink\" title=\"安装apache\"></a>安装apache</h1><pre><code>$ sudo apt-get install apache2 \n$ sudo a2enmod rewrite env headers mime dir setenvif\n</code></pre><h1 id=\"php篇\"><a href=\"#php篇\" class=\"headerlink\" title=\"php篇\"></a>php篇</h1><h2 id=\"安装php7-0\"><a href=\"#安装php7-0\" class=\"headerlink\" title=\"安装php7.0\"></a>安装php7.0</h2><pre><code>$ sudo apt-get install python-software-properties\n$ sudo add-apt-repository ppa:ondrej/php\n$ sudo apt-get update\n$ sudo apt-get install -y php7.0\n$ sudo apt-get install libapache2-mod-php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-common php7.0-gd php7.0-zip php7.0-xml php7.0-mbstring\n</code></pre><h2 id=\"配置虚拟主机\"><a href=\"#配置虚拟主机\" class=\"headerlink\" title=\"配置虚拟主机\"></a>配置虚拟主机</h2><p><code>/etc/apache2/sites-available</code></p>\n<pre><code>\n</code></pre><h1 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1>"},{"title":"docker平台学习初步","date":"2017-05-09T04:43:31.000Z","_content":"# 安装\n","source":"_posts/docker-init.md","raw":"---\ntitle: docker平台学习初步\ndate: 2017-05-09 12:43:31\ntags:\n- docker \n- ubuntu\ncategories: tech\n---\n# 安装\n","slug":"docker-init","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu550006tstnloo2xh30","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1>","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1>"},{"title":"Gravatar Fixed 头像载入出错","date":"2015-08-08T07:41:01.000Z","_content":"\nWordPress使用的用户默认头像是Gravatar Fixed 头像，由于种种原因，经常在国内载入出错。一般的解决办法有好几种，主要的是Gravatar Fixed 插件和修改wp-include中文件代码。\n# 一、Gravatar Fixed 插件\n在管理后台搜索该插件，排在第一的应该是`FV Gravatar Cache`插件，然而这个插件需要使用到国外google的一些东西，所以载入也基本上是没什么戏。还是用第二种方法，虽然不能一劳永逸，但是不升级wordpress时还是蛮管用的。\n# 二、修改wp-include目录下的`link-template.php`文件（大约在3604行）\n1.使用vi工具编辑该文件，按esc键，直接输入`3604gg`（无回显），代码就会自动跳转到指定的3604行\n2.按照下面修改：\n```bash\n$url = sprintf(‘http://%d.gravatar.com/avatar/%s’, $gravatar_server, $email_hash );\n```\n修改为\n```bash\n$url = sprintf(‘http://cn.gravatar.com/avatar/%s’, $email_hash );\n```","source":"_posts/gravatar-error.md","raw":"---\ntitle: Gravatar Fixed 头像载入出错\ndate: 2015-08-08 15:41:01\ntags:\n- gravatar \n- wordpress\ncategories: tech\n---\n\nWordPress使用的用户默认头像是Gravatar Fixed 头像，由于种种原因，经常在国内载入出错。一般的解决办法有好几种，主要的是Gravatar Fixed 插件和修改wp-include中文件代码。\n# 一、Gravatar Fixed 插件\n在管理后台搜索该插件，排在第一的应该是`FV Gravatar Cache`插件，然而这个插件需要使用到国外google的一些东西，所以载入也基本上是没什么戏。还是用第二种方法，虽然不能一劳永逸，但是不升级wordpress时还是蛮管用的。\n# 二、修改wp-include目录下的`link-template.php`文件（大约在3604行）\n1.使用vi工具编辑该文件，按esc键，直接输入`3604gg`（无回显），代码就会自动跳转到指定的3604行\n2.按照下面修改：\n```bash\n$url = sprintf(‘http://%d.gravatar.com/avatar/%s’, $gravatar_server, $email_hash );\n```\n修改为\n```bash\n$url = sprintf(‘http://cn.gravatar.com/avatar/%s’, $email_hash );\n```","slug":"gravatar-error","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu570007tstnk0c3vrg0","content":"<p>WordPress使用的用户默认头像是Gravatar Fixed 头像，由于种种原因，经常在国内载入出错。一般的解决办法有好几种，主要的是Gravatar Fixed 插件和修改wp-include中文件代码。</p>\n<h1 id=\"一、Gravatar-Fixed-插件\"><a href=\"#一、Gravatar-Fixed-插件\" class=\"headerlink\" title=\"一、Gravatar Fixed 插件\"></a>一、Gravatar Fixed 插件</h1><p>在管理后台搜索该插件，排在第一的应该是<code>FV Gravatar Cache</code>插件，然而这个插件需要使用到国外google的一些东西，所以载入也基本上是没什么戏。还是用第二种方法，虽然不能一劳永逸，但是不升级wordpress时还是蛮管用的。</p>\n<h1 id=\"二、修改wp-include目录下的link-template-php文件（大约在3604行）\"><a href=\"#二、修改wp-include目录下的link-template-php文件（大约在3604行）\" class=\"headerlink\" title=\"二、修改wp-include目录下的link-template.php文件（大约在3604行）\"></a>二、修改wp-include目录下的<code>link-template.php</code>文件（大约在3604行）</h1><p>1.使用vi工具编辑该文件，按esc键，直接输入<code>3604gg</code>（无回显），代码就会自动跳转到指定的3604行<br>2.按照下面修改：</p>\n<pre><code class=\"bash\">$url = sprintf(‘http://%d.gravatar.com/avatar/%s’, $gravatar_server, $email_hash );\n</code></pre>\n<p>修改为</p>\n<pre><code class=\"bash\">$url = sprintf(‘http://cn.gravatar.com/avatar/%s’, $email_hash );\n</code></pre>\n","excerpt":"","more":"<p>WordPress使用的用户默认头像是Gravatar Fixed 头像，由于种种原因，经常在国内载入出错。一般的解决办法有好几种，主要的是Gravatar Fixed 插件和修改wp-include中文件代码。</p>\n<h1 id=\"一、Gravatar-Fixed-插件\"><a href=\"#一、Gravatar-Fixed-插件\" class=\"headerlink\" title=\"一、Gravatar Fixed 插件\"></a>一、Gravatar Fixed 插件</h1><p>在管理后台搜索该插件，排在第一的应该是<code>FV Gravatar Cache</code>插件，然而这个插件需要使用到国外google的一些东西，所以载入也基本上是没什么戏。还是用第二种方法，虽然不能一劳永逸，但是不升级wordpress时还是蛮管用的。</p>\n<h1 id=\"二、修改wp-include目录下的link-template-php文件（大约在3604行）\"><a href=\"#二、修改wp-include目录下的link-template-php文件（大约在3604行）\" class=\"headerlink\" title=\"二、修改wp-include目录下的link-template.php文件（大约在3604行）\"></a>二、修改wp-include目录下的<code>link-template.php</code>文件（大约在3604行）</h1><p>1.使用vi工具编辑该文件，按esc键，直接输入<code>3604gg</code>（无回显），代码就会自动跳转到指定的3604行<br>2.按照下面修改：</p>\n<pre><code class=\"bash\">$url = sprintf(‘http://%d.gravatar.com/avatar/%s’, $gravatar_server, $email_hash );\n</code></pre>\n<p>修改为</p>\n<pre><code class=\"bash\">$url = sprintf(‘http://cn.gravatar.com/avatar/%s’, $email_hash );\n</code></pre>\n"},{"title":"laravel5.2在lnmpa一键安装包环境下的部署","date":"2016-03-14T14:19:48.000Z","_content":"# 实验环境\n1.阿里云ECS服务器：`ubuntu14.04LTS 64位`\n2.使用`lnmp.org`提供的`linux+nginx+mysql+apache+php`一键安装包，已安装lnmpa\n3.其他条件满足（Git工具和ssh私钥、`composer`工具、`bower`工具）\n\n# 部署步骤\n1.将`php命令`添加到系统环境变量中：往`/etc/enviroment`文件中添加”:`/usr/local/php/bin`（该路径为php命令所在目录，前面一定要包含冒号）\n2.修改`php.ini`：将`proc_get_status,proc_open`从`disable_functions`中去掉\n3.使用`sudo lnmp vhost add`命令添加虚拟主机，自动在`/usr/local/nginx/conf/vhost`和`/usr/local/apache/conf/vhost`生成`“域名.conf”`\n4.修改`nginx`中的`“域名.conf”`文件的`root目录`为`laravel的根目录/public`（比如使用`composer create-project laravel/laravel laravel`命令生成的laravel目录）\n5.修改`apache`中的“域名.conf”文件：open_basedir 后面的路径同上一步中的laravel的根目录，Document root和Directory后面的路径为“laravel根目录/public”，这是域名绑定的入口目录\n6.使用git工具将github或oschina.net的代码克隆至域名绑定`root目录`，使用`chmod 777 -R storage`命令给`storage文件夹读写权限`\n7.使用`composer install`和`bower install`命令安装相关php依赖和前端依赖\n就这样，laravel就可以正常运行在lnmpa环境中了\n\n# 问题解决\n> 问题一：打开空白，使用浏览器控制台查看network为`500错误`？\n\n解决方法：\n1.检查是否使用`composer`安装好`php函数依赖`；\n2.检查`storage文件夹`是否有读写权限；\n3.检查`apache`的虚拟主机配置文件中的`open_basedir`和`Directory目录`是否正确；\n> 问题二：`composer install`命令执行返回`proc_open()`和`proc_get_status()`两个函数不能正常使用？\n\n解决办法：修改`php.ini`中`disable_functions()`\n> 问题三：页面`css`和`js`资源不能正常引用？\n\n解决办法：修改`nginx`的虚拟主机配置文件的root目录为laravel应用程序的根目录，而非public目录","source":"_posts/laravel-lnmpa.md","raw":"---\ntitle: laravel5.2在lnmpa一键安装包环境下的部署\ndate: 2016-03-14 22:19:48\ntags:\n- laravel\n- lnmpa\ncategories: tech\n---\n# 实验环境\n1.阿里云ECS服务器：`ubuntu14.04LTS 64位`\n2.使用`lnmp.org`提供的`linux+nginx+mysql+apache+php`一键安装包，已安装lnmpa\n3.其他条件满足（Git工具和ssh私钥、`composer`工具、`bower`工具）\n\n# 部署步骤\n1.将`php命令`添加到系统环境变量中：往`/etc/enviroment`文件中添加”:`/usr/local/php/bin`（该路径为php命令所在目录，前面一定要包含冒号）\n2.修改`php.ini`：将`proc_get_status,proc_open`从`disable_functions`中去掉\n3.使用`sudo lnmp vhost add`命令添加虚拟主机，自动在`/usr/local/nginx/conf/vhost`和`/usr/local/apache/conf/vhost`生成`“域名.conf”`\n4.修改`nginx`中的`“域名.conf”`文件的`root目录`为`laravel的根目录/public`（比如使用`composer create-project laravel/laravel laravel`命令生成的laravel目录）\n5.修改`apache`中的“域名.conf”文件：open_basedir 后面的路径同上一步中的laravel的根目录，Document root和Directory后面的路径为“laravel根目录/public”，这是域名绑定的入口目录\n6.使用git工具将github或oschina.net的代码克隆至域名绑定`root目录`，使用`chmod 777 -R storage`命令给`storage文件夹读写权限`\n7.使用`composer install`和`bower install`命令安装相关php依赖和前端依赖\n就这样，laravel就可以正常运行在lnmpa环境中了\n\n# 问题解决\n> 问题一：打开空白，使用浏览器控制台查看network为`500错误`？\n\n解决方法：\n1.检查是否使用`composer`安装好`php函数依赖`；\n2.检查`storage文件夹`是否有读写权限；\n3.检查`apache`的虚拟主机配置文件中的`open_basedir`和`Directory目录`是否正确；\n> 问题二：`composer install`命令执行返回`proc_open()`和`proc_get_status()`两个函数不能正常使用？\n\n解决办法：修改`php.ini`中`disable_functions()`\n> 问题三：页面`css`和`js`资源不能正常引用？\n\n解决办法：修改`nginx`的虚拟主机配置文件的root目录为laravel应用程序的根目录，而非public目录","slug":"laravel-lnmpa","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu570008tstnp3ns1tw5","content":"<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><p>1.阿里云ECS服务器：<code>ubuntu14.04LTS 64位</code><br>2.使用<code>lnmp.org</code>提供的<code>linux+nginx+mysql+apache+php</code>一键安装包，已安装lnmpa<br>3.其他条件满足（Git工具和ssh私钥、<code>composer</code>工具、<code>bower</code>工具）</p>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>1.将<code>php命令</code>添加到系统环境变量中：往<code>/etc/enviroment</code>文件中添加”:<code>/usr/local/php/bin</code>（该路径为php命令所在目录，前面一定要包含冒号）<br>2.修改<code>php.ini</code>：将<code>proc_get_status,proc_open</code>从<code>disable_functions</code>中去掉<br>3.使用<code>sudo lnmp vhost add</code>命令添加虚拟主机，自动在<code>/usr/local/nginx/conf/vhost</code>和<code>/usr/local/apache/conf/vhost</code>生成<code>“域名.conf”</code><br>4.修改<code>nginx</code>中的<code>“域名.conf”</code>文件的<code>root目录</code>为<code>laravel的根目录/public</code>（比如使用<code>composer create-project laravel/laravel laravel</code>命令生成的laravel目录）<br>5.修改<code>apache</code>中的“域名.conf”文件：open_basedir 后面的路径同上一步中的laravel的根目录，Document root和Directory后面的路径为“laravel根目录/public”，这是域名绑定的入口目录<br>6.使用git工具将github或oschina.net的代码克隆至域名绑定<code>root目录</code>，使用<code>chmod 777 -R storage</code>命令给<code>storage文件夹读写权限</code><br>7.使用<code>composer install</code>和<code>bower install</code>命令安装相关php依赖和前端依赖<br>就这样，laravel就可以正常运行在lnmpa环境中了</p>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><blockquote>\n<p>问题一：打开空白，使用浏览器控制台查看network为<code>500错误</code>？</p>\n</blockquote>\n<p>解决方法：<br>1.检查是否使用<code>composer</code>安装好<code>php函数依赖</code>；<br>2.检查<code>storage文件夹</code>是否有读写权限；<br>3.检查<code>apache</code>的虚拟主机配置文件中的<code>open_basedir</code>和<code>Directory目录</code>是否正确；</p>\n<blockquote>\n<p>问题二：<code>composer install</code>命令执行返回<code>proc_open()</code>和<code>proc_get_status()</code>两个函数不能正常使用？</p>\n</blockquote>\n<p>解决办法：修改<code>php.ini</code>中<code>disable_functions()</code></p>\n<blockquote>\n<p>问题三：页面<code>css</code>和<code>js</code>资源不能正常引用？</p>\n</blockquote>\n<p>解决办法：修改<code>nginx</code>的虚拟主机配置文件的root目录为laravel应用程序的根目录，而非public目录</p>\n","excerpt":"","more":"<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><p>1.阿里云ECS服务器：<code>ubuntu14.04LTS 64位</code><br>2.使用<code>lnmp.org</code>提供的<code>linux+nginx+mysql+apache+php</code>一键安装包，已安装lnmpa<br>3.其他条件满足（Git工具和ssh私钥、<code>composer</code>工具、<code>bower</code>工具）</p>\n<h1 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h1><p>1.将<code>php命令</code>添加到系统环境变量中：往<code>/etc/enviroment</code>文件中添加”:<code>/usr/local/php/bin</code>（该路径为php命令所在目录，前面一定要包含冒号）<br>2.修改<code>php.ini</code>：将<code>proc_get_status,proc_open</code>从<code>disable_functions</code>中去掉<br>3.使用<code>sudo lnmp vhost add</code>命令添加虚拟主机，自动在<code>/usr/local/nginx/conf/vhost</code>和<code>/usr/local/apache/conf/vhost</code>生成<code>“域名.conf”</code><br>4.修改<code>nginx</code>中的<code>“域名.conf”</code>文件的<code>root目录</code>为<code>laravel的根目录/public</code>（比如使用<code>composer create-project laravel/laravel laravel</code>命令生成的laravel目录）<br>5.修改<code>apache</code>中的“域名.conf”文件：open_basedir 后面的路径同上一步中的laravel的根目录，Document root和Directory后面的路径为“laravel根目录/public”，这是域名绑定的入口目录<br>6.使用git工具将github或oschina.net的代码克隆至域名绑定<code>root目录</code>，使用<code>chmod 777 -R storage</code>命令给<code>storage文件夹读写权限</code><br>7.使用<code>composer install</code>和<code>bower install</code>命令安装相关php依赖和前端依赖<br>就这样，laravel就可以正常运行在lnmpa环境中了</p>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><blockquote>\n<p>问题一：打开空白，使用浏览器控制台查看network为<code>500错误</code>？</p>\n</blockquote>\n<p>解决方法：<br>1.检查是否使用<code>composer</code>安装好<code>php函数依赖</code>；<br>2.检查<code>storage文件夹</code>是否有读写权限；<br>3.检查<code>apache</code>的虚拟主机配置文件中的<code>open_basedir</code>和<code>Directory目录</code>是否正确；</p>\n<blockquote>\n<p>问题二：<code>composer install</code>命令执行返回<code>proc_open()</code>和<code>proc_get_status()</code>两个函数不能正常使用？</p>\n</blockquote>\n<p>解决办法：修改<code>php.ini</code>中<code>disable_functions()</code></p>\n<blockquote>\n<p>问题三：页面<code>css</code>和<code>js</code>资源不能正常引用？</p>\n</blockquote>\n<p>解决办法：修改<code>nginx</code>的虚拟主机配置文件的root目录为laravel应用程序的根目录，而非public目录</p>\n"},{"title":"Linux踢出其他正在SSH登陆用户","date":"2015-08-09T07:45:53.000Z","_content":"在一些生产平台或者做安全审计的时候往往看到一大堆的用户SSH连接到同一台服务器，或者连接后没有正常关闭进程还驻留在系统内。限制SSH连接数与手动断开空闲连接也有必要之举，这里写出手动剔出其他用户的过程。\n# 查看系统在线用户\n```\n[root@apache ~]# w \n14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.06s  0.04s w \nroot     pts/1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash\n```\n# 查看当前自己占用终端，别把自己干掉了\n```\n[root@apache ~]# who am i \nroot     pts/0        2013-01-16 14:15 (116.204.64.165)\n```\n# 用pkill 命令剔除对方\n```\n[root@apache ~]# pkill -kill -t pts/1\n```\n# 用w命令在看看干掉没。\n```\n[root@apache ~]# w \n14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.03s  0.00s w\n```\n后记：\n如果最后查看还是没有干掉，建议加上-9 强制杀死。\n```\n[root@apache ~]# pkill -9 -t pts/1\n```\n原文转自[http://www.myhack58.com/Article/48/66/2013/37031.htm](http://www.myhack58.com/Article/48/66/2013/37031.htm)","source":"_posts/linux-del-sshuser.md","raw":"---\ntitle: Linux踢出其他正在SSH登陆用户\ndate: 2015-08-09 15:45:53\ntags:\n- linux\n- 踢出ssh用户\ncategories: tech\n---\n在一些生产平台或者做安全审计的时候往往看到一大堆的用户SSH连接到同一台服务器，或者连接后没有正常关闭进程还驻留在系统内。限制SSH连接数与手动断开空闲连接也有必要之举，这里写出手动剔出其他用户的过程。\n# 查看系统在线用户\n```\n[root@apache ~]# w \n14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.06s  0.04s w \nroot     pts/1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash\n```\n# 查看当前自己占用终端，别把自己干掉了\n```\n[root@apache ~]# who am i \nroot     pts/0        2013-01-16 14:15 (116.204.64.165)\n```\n# 用pkill 命令剔除对方\n```\n[root@apache ~]# pkill -kill -t pts/1\n```\n# 用w命令在看看干掉没。\n```\n[root@apache ~]# w \n14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.03s  0.00s w\n```\n后记：\n如果最后查看还是没有干掉，建议加上-9 强制杀死。\n```\n[root@apache ~]# pkill -9 -t pts/1\n```\n原文转自[http://www.myhack58.com/Article/48/66/2013/37031.htm](http://www.myhack58.com/Article/48/66/2013/37031.htm)","slug":"linux-del-sshuser","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5a000btstn48rrnvf9","content":"<p>在一些生产平台或者做安全审计的时候往往看到一大堆的用户SSH连接到同一台服务器，或者连接后没有正常关闭进程还驻留在系统内。限制SSH连接数与手动断开空闲连接也有必要之举，这里写出手动剔出其他用户的过程。</p>\n<h1 id=\"查看系统在线用户\"><a href=\"#查看系统在线用户\" class=\"headerlink\" title=\"查看系统在线用户\"></a>查看系统在线用户</h1><pre><code>[root@apache ~]# w \n14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.06s  0.04s w \nroot     pts/1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash\n</code></pre><h1 id=\"查看当前自己占用终端，别把自己干掉了\"><a href=\"#查看当前自己占用终端，别把自己干掉了\" class=\"headerlink\" title=\"查看当前自己占用终端，别把自己干掉了\"></a>查看当前自己占用终端，别把自己干掉了</h1><pre><code>[root@apache ~]# who am i \nroot     pts/0        2013-01-16 14:15 (116.204.64.165)\n</code></pre><h1 id=\"用pkill-命令剔除对方\"><a href=\"#用pkill-命令剔除对方\" class=\"headerlink\" title=\"用pkill 命令剔除对方\"></a>用pkill 命令剔除对方</h1><pre><code>[root@apache ~]# pkill -kill -t pts/1\n</code></pre><h1 id=\"用w命令在看看干掉没。\"><a href=\"#用w命令在看看干掉没。\" class=\"headerlink\" title=\"用w命令在看看干掉没。\"></a>用w命令在看看干掉没。</h1><pre><code>[root@apache ~]# w \n14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.03s  0.00s w\n</code></pre><p>后记：<br>如果最后查看还是没有干掉，建议加上-9 强制杀死。</p>\n<pre><code>[root@apache ~]# pkill -9 -t pts/1\n</code></pre><p>原文转自<a href=\"http://www.myhack58.com/Article/48/66/2013/37031.htm\" target=\"_blank\" rel=\"external\">http://www.myhack58.com/Article/48/66/2013/37031.htm</a></p>\n","excerpt":"","more":"<p>在一些生产平台或者做安全审计的时候往往看到一大堆的用户SSH连接到同一台服务器，或者连接后没有正常关闭进程还驻留在系统内。限制SSH连接数与手动断开空闲连接也有必要之举，这里写出手动剔出其他用户的过程。</p>\n<h1 id=\"查看系统在线用户\"><a href=\"#查看系统在线用户\" class=\"headerlink\" title=\"查看系统在线用户\"></a>查看系统在线用户</h1><pre><code>[root@apache ~]# w \n14:15:41 up 42 days, 56 min,  2 users,  load average: 0.07, 0.02, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.06s  0.04s w \nroot     pts/1    116.204.64.165   14:15    2.00s  0.02s  0.02s –bash\n</code></pre><h1 id=\"查看当前自己占用终端，别把自己干掉了\"><a href=\"#查看当前自己占用终端，别把自己干掉了\" class=\"headerlink\" title=\"查看当前自己占用终端，别把自己干掉了\"></a>查看当前自己占用终端，别把自己干掉了</h1><pre><code>[root@apache ~]# who am i \nroot     pts/0        2013-01-16 14:15 (116.204.64.165)\n</code></pre><h1 id=\"用pkill-命令剔除对方\"><a href=\"#用pkill-命令剔除对方\" class=\"headerlink\" title=\"用pkill 命令剔除对方\"></a>用pkill 命令剔除对方</h1><pre><code>[root@apache ~]# pkill -kill -t pts/1\n</code></pre><h1 id=\"用w命令在看看干掉没。\"><a href=\"#用w命令在看看干掉没。\" class=\"headerlink\" title=\"用w命令在看看干掉没。\"></a>用w命令在看看干掉没。</h1><pre><code>[root@apache ~]# w \n14:19:47 up 42 days,  1:00,  1 user,  load average: 0.00, 0.00, 0.00 \nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT \nroot     pts/0    116.204.64.165   14:15    0.00s  0.03s  0.00s w\n</code></pre><p>后记：<br>如果最后查看还是没有干掉，建议加上-9 强制杀死。</p>\n<pre><code>[root@apache ~]# pkill -9 -t pts/1\n</code></pre><p>原文转自<a href=\"http://www.myhack58.com/Article/48/66/2013/37031.htm\">http://www.myhack58.com/Article/48/66/2013/37031.htm</a></p>\n"},{"title":"在linux系统上没有磁盘阵列实现合并磁盘","date":"2017-07-01T06:27:06.000Z","_content":"\n# 基本概念\n\n- `物理存储`:指的是物理的硬盘，在`/dev`目录下的`sda`、`sdb`等\n- `物理卷`:指的是物理硬盘上的分区或逻辑上与磁盘分区具有相同功能的设备，是LVM的基本存储块，但和分区相比，却包含了与LVM管理相关的参数\n- `卷组`:LVM的卷组类似于物理硬盘，卷组上边可以建立多个虚拟的分区，LVM卷组由一个或多个物理卷组成\n- `逻辑卷`:LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷上边可以建立文件系统，用于mount到不同的挂载点，提升分区空间——`真正跟用户打交道的部分`\n- `Physcial Extent`:每一个物理卷被划分为一个个的基本存储单元，每一个PE都具有唯一的编址（类似于物理磁盘上的磁盘地址），PE的大小默认为4MB\n- `Logical Extent`:每一个逻辑卷也被划分为一个个的基本存储单元，每一个LE也具有唯一的编址，在同一个卷组中，LE和PE的大小是相等的\n\n# 实验环境\n- Ubuntu Server 16.04 LTS \n- 已安装好系统的1T硬盘\n- 2块2T空硬盘\n\n# 实验步骤(在root用户下操作)\n\n## 第一步 分区\n- 格式化`fdisk /dev/sda`\n```\nCommand(m for help): n  (创建新分区)\n```\n- 接下来选择创建主分区、默认分区号为1，把所有空间全部分配给这个分区(默认即可)\n- 使用`p`查看分区情况，使用`t`命令(`30`为`Linux LVM`)\n```\nHex code (type L to list codes): 30\n```\n- 最后再用`w`命令保存分区表\n- 另外一块也按照以上的步骤格式化为`LVM`格式\n\n## 第二步 建立LVM分区和VG逻辑卷组\n```\npvcreate /dev/sda1 /dev/sdb1\npvdisplay\nvgextend asc-vg /dev/sda1 /dev/sdb1 (或者vgcreate extspace /dev/sda1 /dev/sdb1)\nvgdisplay\n```\n\n## 第三步 创建逻辑卷\n```\nlvcreate --name data --size 3.6T asc-vg\nlvdisplay\n```\n\n## 第四步 挂载逻辑卷\n```\nmkfs.ext4 /dev/asc-vg/data \nmount /dev/asc-vg/data /home/data\n```\n\n## 第五步 配置自动挂载\n- 修改`/etc/fstab`，增加以下几行：\n```\n/dev/asc-vg/data /home/data ext4 rw,noatime 0 0\n```\n","source":"_posts/linux-lvm.md","raw":"---\ntitle: 在linux系统上没有磁盘阵列实现合并磁盘\ndate: 2017-07-01 14:27:06\ntags:\n    - linux\n    - lvm\n    - 合并磁盘\n---\n\n# 基本概念\n\n- `物理存储`:指的是物理的硬盘，在`/dev`目录下的`sda`、`sdb`等\n- `物理卷`:指的是物理硬盘上的分区或逻辑上与磁盘分区具有相同功能的设备，是LVM的基本存储块，但和分区相比，却包含了与LVM管理相关的参数\n- `卷组`:LVM的卷组类似于物理硬盘，卷组上边可以建立多个虚拟的分区，LVM卷组由一个或多个物理卷组成\n- `逻辑卷`:LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷上边可以建立文件系统，用于mount到不同的挂载点，提升分区空间——`真正跟用户打交道的部分`\n- `Physcial Extent`:每一个物理卷被划分为一个个的基本存储单元，每一个PE都具有唯一的编址（类似于物理磁盘上的磁盘地址），PE的大小默认为4MB\n- `Logical Extent`:每一个逻辑卷也被划分为一个个的基本存储单元，每一个LE也具有唯一的编址，在同一个卷组中，LE和PE的大小是相等的\n\n# 实验环境\n- Ubuntu Server 16.04 LTS \n- 已安装好系统的1T硬盘\n- 2块2T空硬盘\n\n# 实验步骤(在root用户下操作)\n\n## 第一步 分区\n- 格式化`fdisk /dev/sda`\n```\nCommand(m for help): n  (创建新分区)\n```\n- 接下来选择创建主分区、默认分区号为1，把所有空间全部分配给这个分区(默认即可)\n- 使用`p`查看分区情况，使用`t`命令(`30`为`Linux LVM`)\n```\nHex code (type L to list codes): 30\n```\n- 最后再用`w`命令保存分区表\n- 另外一块也按照以上的步骤格式化为`LVM`格式\n\n## 第二步 建立LVM分区和VG逻辑卷组\n```\npvcreate /dev/sda1 /dev/sdb1\npvdisplay\nvgextend asc-vg /dev/sda1 /dev/sdb1 (或者vgcreate extspace /dev/sda1 /dev/sdb1)\nvgdisplay\n```\n\n## 第三步 创建逻辑卷\n```\nlvcreate --name data --size 3.6T asc-vg\nlvdisplay\n```\n\n## 第四步 挂载逻辑卷\n```\nmkfs.ext4 /dev/asc-vg/data \nmount /dev/asc-vg/data /home/data\n```\n\n## 第五步 配置自动挂载\n- 修改`/etc/fstab`，增加以下几行：\n```\n/dev/asc-vg/data /home/data ext4 rw,noatime 0 0\n```\n","slug":"linux-lvm","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5b000dtstnlq5bsds3","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li><code>物理存储</code>:指的是物理的硬盘，在<code>/dev</code>目录下的<code>sda</code>、<code>sdb</code>等</li>\n<li><code>物理卷</code>:指的是物理硬盘上的分区或逻辑上与磁盘分区具有相同功能的设备，是LVM的基本存储块，但和分区相比，却包含了与LVM管理相关的参数</li>\n<li><code>卷组</code>:LVM的卷组类似于物理硬盘，卷组上边可以建立多个虚拟的分区，LVM卷组由一个或多个物理卷组成</li>\n<li><code>逻辑卷</code>:LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷上边可以建立文件系统，用于mount到不同的挂载点，提升分区空间——<code>真正跟用户打交道的部分</code></li>\n<li><code>Physcial Extent</code>:每一个物理卷被划分为一个个的基本存储单元，每一个PE都具有唯一的编址（类似于物理磁盘上的磁盘地址），PE的大小默认为4MB</li>\n<li><code>Logical Extent</code>:每一个逻辑卷也被划分为一个个的基本存储单元，每一个LE也具有唯一的编址，在同一个卷组中，LE和PE的大小是相等的</li>\n</ul>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>Ubuntu Server 16.04 LTS </li>\n<li>已安装好系统的1T硬盘</li>\n<li>2块2T空硬盘</li>\n</ul>\n<h1 id=\"实验步骤-在root用户下操作\"><a href=\"#实验步骤-在root用户下操作\" class=\"headerlink\" title=\"实验步骤(在root用户下操作)\"></a>实验步骤(在root用户下操作)</h1><h2 id=\"第一步-分区\"><a href=\"#第一步-分区\" class=\"headerlink\" title=\"第一步 分区\"></a>第一步 分区</h2><ul>\n<li>格式化<code>fdisk /dev/sda</code><pre><code>Command(m for help): n  (创建新分区)\n</code></pre></li>\n<li>接下来选择创建主分区、默认分区号为1，把所有空间全部分配给这个分区(默认即可)</li>\n<li>使用<code>p</code>查看分区情况，使用<code>t</code>命令(<code>30</code>为<code>Linux LVM</code>)<pre><code>Hex code (type L to list codes): 30\n</code></pre></li>\n<li>最后再用<code>w</code>命令保存分区表</li>\n<li>另外一块也按照以上的步骤格式化为<code>LVM</code>格式</li>\n</ul>\n<h2 id=\"第二步-建立LVM分区和VG逻辑卷组\"><a href=\"#第二步-建立LVM分区和VG逻辑卷组\" class=\"headerlink\" title=\"第二步 建立LVM分区和VG逻辑卷组\"></a>第二步 建立LVM分区和VG逻辑卷组</h2><pre><code>pvcreate /dev/sda1 /dev/sdb1\npvdisplay\nvgextend asc-vg /dev/sda1 /dev/sdb1 (或者vgcreate extspace /dev/sda1 /dev/sdb1)\nvgdisplay\n</code></pre><h2 id=\"第三步-创建逻辑卷\"><a href=\"#第三步-创建逻辑卷\" class=\"headerlink\" title=\"第三步 创建逻辑卷\"></a>第三步 创建逻辑卷</h2><pre><code>lvcreate --name data --size 3.6T asc-vg\nlvdisplay\n</code></pre><h2 id=\"第四步-挂载逻辑卷\"><a href=\"#第四步-挂载逻辑卷\" class=\"headerlink\" title=\"第四步 挂载逻辑卷\"></a>第四步 挂载逻辑卷</h2><pre><code>mkfs.ext4 /dev/asc-vg/data \nmount /dev/asc-vg/data /home/data\n</code></pre><h2 id=\"第五步-配置自动挂载\"><a href=\"#第五步-配置自动挂载\" class=\"headerlink\" title=\"第五步 配置自动挂载\"></a>第五步 配置自动挂载</h2><ul>\n<li>修改<code>/etc/fstab</code>，增加以下几行：<pre><code>/dev/asc-vg/data /home/data ext4 rw,noatime 0 0\n</code></pre></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li><code>物理存储</code>:指的是物理的硬盘，在<code>/dev</code>目录下的<code>sda</code>、<code>sdb</code>等</li>\n<li><code>物理卷</code>:指的是物理硬盘上的分区或逻辑上与磁盘分区具有相同功能的设备，是LVM的基本存储块，但和分区相比，却包含了与LVM管理相关的参数</li>\n<li><code>卷组</code>:LVM的卷组类似于物理硬盘，卷组上边可以建立多个虚拟的分区，LVM卷组由一个或多个物理卷组成</li>\n<li><code>逻辑卷</code>:LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷上边可以建立文件系统，用于mount到不同的挂载点，提升分区空间——<code>真正跟用户打交道的部分</code></li>\n<li><code>Physcial Extent</code>:每一个物理卷被划分为一个个的基本存储单元，每一个PE都具有唯一的编址（类似于物理磁盘上的磁盘地址），PE的大小默认为4MB</li>\n<li><code>Logical Extent</code>:每一个逻辑卷也被划分为一个个的基本存储单元，每一个LE也具有唯一的编址，在同一个卷组中，LE和PE的大小是相等的</li>\n</ul>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>Ubuntu Server 16.04 LTS </li>\n<li>已安装好系统的1T硬盘</li>\n<li>2块2T空硬盘</li>\n</ul>\n<h1 id=\"实验步骤-在root用户下操作\"><a href=\"#实验步骤-在root用户下操作\" class=\"headerlink\" title=\"实验步骤(在root用户下操作)\"></a>实验步骤(在root用户下操作)</h1><h2 id=\"第一步-分区\"><a href=\"#第一步-分区\" class=\"headerlink\" title=\"第一步 分区\"></a>第一步 分区</h2><ul>\n<li>格式化<code>fdisk /dev/sda</code><pre><code>Command(m for help): n  (创建新分区)\n</code></pre></li>\n<li>接下来选择创建主分区、默认分区号为1，把所有空间全部分配给这个分区(默认即可)</li>\n<li>使用<code>p</code>查看分区情况，使用<code>t</code>命令(<code>30</code>为<code>Linux LVM</code>)<pre><code>Hex code (type L to list codes): 30\n</code></pre></li>\n<li>最后再用<code>w</code>命令保存分区表</li>\n<li>另外一块也按照以上的步骤格式化为<code>LVM</code>格式</li>\n</ul>\n<h2 id=\"第二步-建立LVM分区和VG逻辑卷组\"><a href=\"#第二步-建立LVM分区和VG逻辑卷组\" class=\"headerlink\" title=\"第二步 建立LVM分区和VG逻辑卷组\"></a>第二步 建立LVM分区和VG逻辑卷组</h2><pre><code>pvcreate /dev/sda1 /dev/sdb1\npvdisplay\nvgextend asc-vg /dev/sda1 /dev/sdb1 (或者vgcreate extspace /dev/sda1 /dev/sdb1)\nvgdisplay\n</code></pre><h2 id=\"第三步-创建逻辑卷\"><a href=\"#第三步-创建逻辑卷\" class=\"headerlink\" title=\"第三步 创建逻辑卷\"></a>第三步 创建逻辑卷</h2><pre><code>lvcreate --name data --size 3.6T asc-vg\nlvdisplay\n</code></pre><h2 id=\"第四步-挂载逻辑卷\"><a href=\"#第四步-挂载逻辑卷\" class=\"headerlink\" title=\"第四步 挂载逻辑卷\"></a>第四步 挂载逻辑卷</h2><pre><code>mkfs.ext4 /dev/asc-vg/data \nmount /dev/asc-vg/data /home/data\n</code></pre><h2 id=\"第五步-配置自动挂载\"><a href=\"#第五步-配置自动挂载\" class=\"headerlink\" title=\"第五步 配置自动挂载\"></a>第五步 配置自动挂载</h2><ul>\n<li>修改<code>/etc/fstab</code>，增加以下几行：<pre><code>/dev/asc-vg/data /home/data ext4 rw,noatime 0 0\n</code></pre></li>\n</ul>\n"},{"title":"镜像站构建","date":"2017-05-10T02:02:50.000Z","_content":"# 引言\n构建镜像站主要是对于linux开源平台的软件源、pypi源、cran源、mysql等开源软件第三方源，大部分源支持使用rsync工具直接进行同步，少部分源比较特殊，比如pypi源必须采用官方提供的bandsnatch工具，mysql源则只能采用wget的方式镜像整站。\n\n# linux镜像\n- 采用`rsync`工具\n- \n\n# pypi镜像\n## 安装bandersnatch\n`sudo pip install bandersnatch`\n## 尝试启动bandersnatch\n`bandersnatch mirror`  （返回没有/etc/bandersnatch.conf文件错误）\n## 创建bandersnatch.conf文件（文件内容如下）\n```\n[mirror]\ndirectory = /srv/pypi\nmaster = https://pypi.python.org\n```\n## 启动bandersnatch\n```\ntmux\nbandersnatch mirror\nctrl+b+d\n```\n（tmux为终端会话工具，`ctrl+b+d`让任务在后台执行）\n## 配置web 服务器到同步路径\nweb服务的根目录为`/srv/pypi/web`\n在linux系统用户配置中修改pypi默认镜像（`～/.pip/pip.conf`）\n```\n[global]\nindex-url = https://pypi.doubanio.com/simple/  （该地址修改为web服务器对应地址）\n```\n\n# 其他镜像\n- 采用wget镜像`nodejs.org`站点\n```\nwget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://nodejs.org/dist  -e robots=off\n```\n- ","source":"_posts/mirrors-build.md","raw":"---\ntitle: 镜像站构建\ndate: 2017-05-10 10:02:50\ntags:\n- mirror\n- build\n- rsync\n- cran\n- wget\n- bandsnatch\ncategories: tech\n---\n# 引言\n构建镜像站主要是对于linux开源平台的软件源、pypi源、cran源、mysql等开源软件第三方源，大部分源支持使用rsync工具直接进行同步，少部分源比较特殊，比如pypi源必须采用官方提供的bandsnatch工具，mysql源则只能采用wget的方式镜像整站。\n\n# linux镜像\n- 采用`rsync`工具\n- \n\n# pypi镜像\n## 安装bandersnatch\n`sudo pip install bandersnatch`\n## 尝试启动bandersnatch\n`bandersnatch mirror`  （返回没有/etc/bandersnatch.conf文件错误）\n## 创建bandersnatch.conf文件（文件内容如下）\n```\n[mirror]\ndirectory = /srv/pypi\nmaster = https://pypi.python.org\n```\n## 启动bandersnatch\n```\ntmux\nbandersnatch mirror\nctrl+b+d\n```\n（tmux为终端会话工具，`ctrl+b+d`让任务在后台执行）\n## 配置web 服务器到同步路径\nweb服务的根目录为`/srv/pypi/web`\n在linux系统用户配置中修改pypi默认镜像（`～/.pip/pip.conf`）\n```\n[global]\nindex-url = https://pypi.doubanio.com/simple/  （该地址修改为web服务器对应地址）\n```\n\n# 其他镜像\n- 采用wget镜像`nodejs.org`站点\n```\nwget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://nodejs.org/dist  -e robots=off\n```\n- ","slug":"mirrors-build","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5c000gtstnjsvrqfqr","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>构建镜像站主要是对于linux开源平台的软件源、pypi源、cran源、mysql等开源软件第三方源，大部分源支持使用rsync工具直接进行同步，少部分源比较特殊，比如pypi源必须采用官方提供的bandsnatch工具，mysql源则只能采用wget的方式镜像整站。</p>\n<h1 id=\"linux镜像\"><a href=\"#linux镜像\" class=\"headerlink\" title=\"linux镜像\"></a>linux镜像</h1><ul>\n<li>采用<code>rsync</code>工具</li>\n<li></li>\n</ul>\n<h1 id=\"pypi镜像\"><a href=\"#pypi镜像\" class=\"headerlink\" title=\"pypi镜像\"></a>pypi镜像</h1><h2 id=\"安装bandersnatch\"><a href=\"#安装bandersnatch\" class=\"headerlink\" title=\"安装bandersnatch\"></a>安装bandersnatch</h2><p><code>sudo pip install bandersnatch</code></p>\n<h2 id=\"尝试启动bandersnatch\"><a href=\"#尝试启动bandersnatch\" class=\"headerlink\" title=\"尝试启动bandersnatch\"></a>尝试启动bandersnatch</h2><p><code>bandersnatch mirror</code>  （返回没有/etc/bandersnatch.conf文件错误）</p>\n<h2 id=\"创建bandersnatch-conf文件（文件内容如下）\"><a href=\"#创建bandersnatch-conf文件（文件内容如下）\" class=\"headerlink\" title=\"创建bandersnatch.conf文件（文件内容如下）\"></a>创建bandersnatch.conf文件（文件内容如下）</h2><pre><code>[mirror]\ndirectory = /srv/pypi\nmaster = https://pypi.python.org\n</code></pre><h2 id=\"启动bandersnatch\"><a href=\"#启动bandersnatch\" class=\"headerlink\" title=\"启动bandersnatch\"></a>启动bandersnatch</h2><pre><code>tmux\nbandersnatch mirror\nctrl+b+d\n</code></pre><p>（tmux为终端会话工具，<code>ctrl+b+d</code>让任务在后台执行）</p>\n<h2 id=\"配置web-服务器到同步路径\"><a href=\"#配置web-服务器到同步路径\" class=\"headerlink\" title=\"配置web 服务器到同步路径\"></a>配置web 服务器到同步路径</h2><p>web服务的根目录为<code>/srv/pypi/web</code><br>在linux系统用户配置中修改pypi默认镜像（<code>～/.pip/pip.conf</code>）</p>\n<pre><code>[global]\nindex-url = https://pypi.doubanio.com/simple/  （该地址修改为web服务器对应地址）\n</code></pre><h1 id=\"其他镜像\"><a href=\"#其他镜像\" class=\"headerlink\" title=\"其他镜像\"></a>其他镜像</h1><ul>\n<li>采用wget镜像<code>nodejs.org</code>站点<pre><code>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://nodejs.org/dist  -e robots=off\n</code></pre></li>\n<li></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>构建镜像站主要是对于linux开源平台的软件源、pypi源、cran源、mysql等开源软件第三方源，大部分源支持使用rsync工具直接进行同步，少部分源比较特殊，比如pypi源必须采用官方提供的bandsnatch工具，mysql源则只能采用wget的方式镜像整站。</p>\n<h1 id=\"linux镜像\"><a href=\"#linux镜像\" class=\"headerlink\" title=\"linux镜像\"></a>linux镜像</h1><ul>\n<li>采用<code>rsync</code>工具</li>\n<li></li>\n</ul>\n<h1 id=\"pypi镜像\"><a href=\"#pypi镜像\" class=\"headerlink\" title=\"pypi镜像\"></a>pypi镜像</h1><h2 id=\"安装bandersnatch\"><a href=\"#安装bandersnatch\" class=\"headerlink\" title=\"安装bandersnatch\"></a>安装bandersnatch</h2><p><code>sudo pip install bandersnatch</code></p>\n<h2 id=\"尝试启动bandersnatch\"><a href=\"#尝试启动bandersnatch\" class=\"headerlink\" title=\"尝试启动bandersnatch\"></a>尝试启动bandersnatch</h2><p><code>bandersnatch mirror</code>  （返回没有/etc/bandersnatch.conf文件错误）</p>\n<h2 id=\"创建bandersnatch-conf文件（文件内容如下）\"><a href=\"#创建bandersnatch-conf文件（文件内容如下）\" class=\"headerlink\" title=\"创建bandersnatch.conf文件（文件内容如下）\"></a>创建bandersnatch.conf文件（文件内容如下）</h2><pre><code>[mirror]\ndirectory = /srv/pypi\nmaster = https://pypi.python.org\n</code></pre><h2 id=\"启动bandersnatch\"><a href=\"#启动bandersnatch\" class=\"headerlink\" title=\"启动bandersnatch\"></a>启动bandersnatch</h2><pre><code>tmux\nbandersnatch mirror\nctrl+b+d\n</code></pre><p>（tmux为终端会话工具，<code>ctrl+b+d</code>让任务在后台执行）</p>\n<h2 id=\"配置web-服务器到同步路径\"><a href=\"#配置web-服务器到同步路径\" class=\"headerlink\" title=\"配置web 服务器到同步路径\"></a>配置web 服务器到同步路径</h2><p>web服务的根目录为<code>/srv/pypi/web</code><br>在linux系统用户配置中修改pypi默认镜像（<code>～/.pip/pip.conf</code>）</p>\n<pre><code>[global]\nindex-url = https://pypi.doubanio.com/simple/  （该地址修改为web服务器对应地址）\n</code></pre><h1 id=\"其他镜像\"><a href=\"#其他镜像\" class=\"headerlink\" title=\"其他镜像\"></a>其他镜像</h1><ul>\n<li>采用wget镜像<code>nodejs.org</code>站点<pre><code>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://nodejs.org/dist  -e robots=off\n</code></pre></li>\n<li></li>\n</ul>\n"},{"title":"我的女儿","date":"2015-09-19T08:06:07.000Z","_content":"# 我的女儿\n我的女儿是一个从小没有母亲的孩子\n她的母亲在战火中牺牲\n我却无能为力\n所以我既是父亲也是母亲\n\n我的女儿是一个有很多姑姑的孩子\n她的姑姑们教会她知识和美德\n我却什么都没教她\n所以我不是一个好父亲\n\n我的女儿是一个热衷于求知的孩子\n一馆子的书是她最好的朋友\n我却成不了她的朋友\n所以她有超越我的智慧\n\n我的女儿是一个心怀天下的孩子\n周游世界收获世间的真\n我却不能伴着她、照顾她\n所以她走得比我更远\n\n她是我的女儿\n我是她的父亲\n然而，她以我为榜样\n我因她而骄傲\n","source":"_posts/my-daughter.md","raw":"---\ntitle: 我的女儿\ndate: 2015-09-19 16:06:07\ntags:\n- 现代诗\ncategories: 传说中的杂文\n---\n# 我的女儿\n我的女儿是一个从小没有母亲的孩子\n她的母亲在战火中牺牲\n我却无能为力\n所以我既是父亲也是母亲\n\n我的女儿是一个有很多姑姑的孩子\n她的姑姑们教会她知识和美德\n我却什么都没教她\n所以我不是一个好父亲\n\n我的女儿是一个热衷于求知的孩子\n一馆子的书是她最好的朋友\n我却成不了她的朋友\n所以她有超越我的智慧\n\n我的女儿是一个心怀天下的孩子\n周游世界收获世间的真\n我却不能伴着她、照顾她\n所以她走得比我更远\n\n她是我的女儿\n我是她的父亲\n然而，她以我为榜样\n我因她而骄傲\n","slug":"my-daughter","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5e000jtstnfekoyh6t","content":"<h1 id=\"我的女儿\"><a href=\"#我的女儿\" class=\"headerlink\" title=\"我的女儿\"></a>我的女儿</h1><p>我的女儿是一个从小没有母亲的孩子<br>她的母亲在战火中牺牲<br>我却无能为力<br>所以我既是父亲也是母亲</p>\n<p>我的女儿是一个有很多姑姑的孩子<br>她的姑姑们教会她知识和美德<br>我却什么都没教她<br>所以我不是一个好父亲</p>\n<p>我的女儿是一个热衷于求知的孩子<br>一馆子的书是她最好的朋友<br>我却成不了她的朋友<br>所以她有超越我的智慧</p>\n<p>我的女儿是一个心怀天下的孩子<br>周游世界收获世间的真<br>我却不能伴着她、照顾她<br>所以她走得比我更远</p>\n<p>她是我的女儿<br>我是她的父亲<br>然而，她以我为榜样<br>我因她而骄傲</p>\n","excerpt":"","more":"<h1 id=\"我的女儿\"><a href=\"#我的女儿\" class=\"headerlink\" title=\"我的女儿\"></a>我的女儿</h1><p>我的女儿是一个从小没有母亲的孩子<br>她的母亲在战火中牺牲<br>我却无能为力<br>所以我既是父亲也是母亲</p>\n<p>我的女儿是一个有很多姑姑的孩子<br>她的姑姑们教会她知识和美德<br>我却什么都没教她<br>所以我不是一个好父亲</p>\n<p>我的女儿是一个热衷于求知的孩子<br>一馆子的书是她最好的朋友<br>我却成不了她的朋友<br>所以她有超越我的智慧</p>\n<p>我的女儿是一个心怀天下的孩子<br>周游世界收获世间的真<br>我却不能伴着她、照顾她<br>所以她走得比我更远</p>\n<p>她是我的女儿<br>我是她的父亲<br>然而，她以我为榜样<br>我因她而骄傲</p>\n"},{"title":"腾讯云服务器重装系统后……","date":"2016-03-02T08:36:27.000Z","_content":"# 一、添加用户并设为sudo权限\n`sudo useradd 用户名`\n`sudo passwd 用户名`\n`sudo chmod +w /etc/sudoers`\n`sudo vi  /etc/sudoers (加入 用户名 ALL=(ALL:ALL) ALL )`\n\n# 二、更改用户linux的shell的操作方法\n查看当前用户的shell方式 `echo $SHELL`    输出 `/bin/sh`\n更换shell操作方式为`/bin/bash`   `sudo vi /etc/passwd`  在用户行尾加上`/bin/bash`\n退出系统再次登录","source":"_posts/tencent-down.md","raw":"---\ntitle: 腾讯云服务器重装系统后……\ndate: 2016-03-02 16:36:27\ntags:\n- 腾讯云\ncategories: tech\n---\n# 一、添加用户并设为sudo权限\n`sudo useradd 用户名`\n`sudo passwd 用户名`\n`sudo chmod +w /etc/sudoers`\n`sudo vi  /etc/sudoers (加入 用户名 ALL=(ALL:ALL) ALL )`\n\n# 二、更改用户linux的shell的操作方法\n查看当前用户的shell方式 `echo $SHELL`    输出 `/bin/sh`\n更换shell操作方式为`/bin/bash`   `sudo vi /etc/passwd`  在用户行尾加上`/bin/bash`\n退出系统再次登录","slug":"tencent-down","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5f000ntstn69r8t0ak","content":"<h1 id=\"一、添加用户并设为sudo权限\"><a href=\"#一、添加用户并设为sudo权限\" class=\"headerlink\" title=\"一、添加用户并设为sudo权限\"></a>一、添加用户并设为sudo权限</h1><p><code>sudo useradd 用户名</code><br><code>sudo passwd 用户名</code><br><code>sudo chmod +w /etc/sudoers</code><br><code>sudo vi  /etc/sudoers (加入 用户名 ALL=(ALL:ALL) ALL )</code></p>\n<h1 id=\"二、更改用户linux的shell的操作方法\"><a href=\"#二、更改用户linux的shell的操作方法\" class=\"headerlink\" title=\"二、更改用户linux的shell的操作方法\"></a>二、更改用户linux的shell的操作方法</h1><p>查看当前用户的shell方式 <code>echo $SHELL</code>    输出 <code>/bin/sh</code><br>更换shell操作方式为<code>/bin/bash</code>   <code>sudo vi /etc/passwd</code>  在用户行尾加上<code>/bin/bash</code><br>退出系统再次登录</p>\n","excerpt":"","more":"<h1 id=\"一、添加用户并设为sudo权限\"><a href=\"#一、添加用户并设为sudo权限\" class=\"headerlink\" title=\"一、添加用户并设为sudo权限\"></a>一、添加用户并设为sudo权限</h1><p><code>sudo useradd 用户名</code><br><code>sudo passwd 用户名</code><br><code>sudo chmod +w /etc/sudoers</code><br><code>sudo vi  /etc/sudoers (加入 用户名 ALL=(ALL:ALL) ALL )</code></p>\n<h1 id=\"二、更改用户linux的shell的操作方法\"><a href=\"#二、更改用户linux的shell的操作方法\" class=\"headerlink\" title=\"二、更改用户linux的shell的操作方法\"></a>二、更改用户linux的shell的操作方法</h1><p>查看当前用户的shell方式 <code>echo $SHELL</code>    输出 <code>/bin/sh</code><br>更换shell操作方式为<code>/bin/bash</code>   <code>sudo vi /etc/passwd</code>  在用户行尾加上<code>/bin/bash</code><br>退出系统再次登录</p>\n"},{"title":"腾讯云服务器CVM作为MYSQL遇到远程无法连接的解决办法","date":"2016-03-03T14:04:40.000Z","_content":"# 修改mysql配置\n首先需要确认安装的mysql服务器的配置文件/etc/mysql/my.cnf是否将bindless 120.0.0.1:0注释掉，务必保证已注释；\n\n# 更新腾讯云服务器的安全组策略\n1. 在云服务器列表中选择安全组\n2. 在安全组中新建一个安全组，名称任意\n3. 添加入站规则和出站规则\n4. 将云服务器主机添加入新建的安全组，并从其他安全组中退出。\n\n> 入站规则是指外网可以访问服务器的端口，即服务器对外开放资源获取的端口；出站规则是指服务器访问网络上的策略，一般是全部开放，（除非有特殊限制要求，本问题的解决不考虑，所以设为ALL TRAFFIC）\n\n# 在腾讯云服务操作面板中重启服务器使安全组生效\n# 在客户端系统中使用Navicat等软件连接MYSQL数据库\n# 就这样，一台MYSQL数据库服务器就搭建完毕了","source":"_posts/tencent-mysql.md","raw":"---\ntitle: 腾讯云服务器CVM作为MYSQL遇到远程无法连接的解决办法\ndate: 2016-03-03 22:04:40\ntags: \n- 腾讯云\n- Mysql\ncategories: tech\n---\n# 修改mysql配置\n首先需要确认安装的mysql服务器的配置文件/etc/mysql/my.cnf是否将bindless 120.0.0.1:0注释掉，务必保证已注释；\n\n# 更新腾讯云服务器的安全组策略\n1. 在云服务器列表中选择安全组\n2. 在安全组中新建一个安全组，名称任意\n3. 添加入站规则和出站规则\n4. 将云服务器主机添加入新建的安全组，并从其他安全组中退出。\n\n> 入站规则是指外网可以访问服务器的端口，即服务器对外开放资源获取的端口；出站规则是指服务器访问网络上的策略，一般是全部开放，（除非有特殊限制要求，本问题的解决不考虑，所以设为ALL TRAFFIC）\n\n# 在腾讯云服务操作面板中重启服务器使安全组生效\n# 在客户端系统中使用Navicat等软件连接MYSQL数据库\n# 就这样，一台MYSQL数据库服务器就搭建完毕了","slug":"tencent-mysql","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5g000qtstn13c7a1gy","content":"<h1 id=\"修改mysql配置\"><a href=\"#修改mysql配置\" class=\"headerlink\" title=\"修改mysql配置\"></a>修改mysql配置</h1><p>首先需要确认安装的mysql服务器的配置文件/etc/mysql/my.cnf是否将bindless 120.0.0.1:0注释掉，务必保证已注释；</p>\n<h1 id=\"更新腾讯云服务器的安全组策略\"><a href=\"#更新腾讯云服务器的安全组策略\" class=\"headerlink\" title=\"更新腾讯云服务器的安全组策略\"></a>更新腾讯云服务器的安全组策略</h1><ol>\n<li>在云服务器列表中选择安全组</li>\n<li>在安全组中新建一个安全组，名称任意</li>\n<li>添加入站规则和出站规则</li>\n<li>将云服务器主机添加入新建的安全组，并从其他安全组中退出。</li>\n</ol>\n<blockquote>\n<p>入站规则是指外网可以访问服务器的端口，即服务器对外开放资源获取的端口；出站规则是指服务器访问网络上的策略，一般是全部开放，（除非有特殊限制要求，本问题的解决不考虑，所以设为ALL TRAFFIC）</p>\n</blockquote>\n<h1 id=\"在腾讯云服务操作面板中重启服务器使安全组生效\"><a href=\"#在腾讯云服务操作面板中重启服务器使安全组生效\" class=\"headerlink\" title=\"在腾讯云服务操作面板中重启服务器使安全组生效\"></a>在腾讯云服务操作面板中重启服务器使安全组生效</h1><h1 id=\"在客户端系统中使用Navicat等软件连接MYSQL数据库\"><a href=\"#在客户端系统中使用Navicat等软件连接MYSQL数据库\" class=\"headerlink\" title=\"在客户端系统中使用Navicat等软件连接MYSQL数据库\"></a>在客户端系统中使用Navicat等软件连接MYSQL数据库</h1><h1 id=\"就这样，一台MYSQL数据库服务器就搭建完毕了\"><a href=\"#就这样，一台MYSQL数据库服务器就搭建完毕了\" class=\"headerlink\" title=\"就这样，一台MYSQL数据库服务器就搭建完毕了\"></a>就这样，一台MYSQL数据库服务器就搭建完毕了</h1>","excerpt":"","more":"<h1 id=\"修改mysql配置\"><a href=\"#修改mysql配置\" class=\"headerlink\" title=\"修改mysql配置\"></a>修改mysql配置</h1><p>首先需要确认安装的mysql服务器的配置文件/etc/mysql/my.cnf是否将bindless 120.0.0.1:0注释掉，务必保证已注释；</p>\n<h1 id=\"更新腾讯云服务器的安全组策略\"><a href=\"#更新腾讯云服务器的安全组策略\" class=\"headerlink\" title=\"更新腾讯云服务器的安全组策略\"></a>更新腾讯云服务器的安全组策略</h1><ol>\n<li>在云服务器列表中选择安全组</li>\n<li>在安全组中新建一个安全组，名称任意</li>\n<li>添加入站规则和出站规则</li>\n<li>将云服务器主机添加入新建的安全组，并从其他安全组中退出。</li>\n</ol>\n<blockquote>\n<p>入站规则是指外网可以访问服务器的端口，即服务器对外开放资源获取的端口；出站规则是指服务器访问网络上的策略，一般是全部开放，（除非有特殊限制要求，本问题的解决不考虑，所以设为ALL TRAFFIC）</p>\n</blockquote>\n<h1 id=\"在腾讯云服务操作面板中重启服务器使安全组生效\"><a href=\"#在腾讯云服务操作面板中重启服务器使安全组生效\" class=\"headerlink\" title=\"在腾讯云服务操作面板中重启服务器使安全组生效\"></a>在腾讯云服务操作面板中重启服务器使安全组生效</h1><h1 id=\"在客户端系统中使用Navicat等软件连接MYSQL数据库\"><a href=\"#在客户端系统中使用Navicat等软件连接MYSQL数据库\" class=\"headerlink\" title=\"在客户端系统中使用Navicat等软件连接MYSQL数据库\"></a>在客户端系统中使用Navicat等软件连接MYSQL数据库</h1><h1 id=\"就这样，一台MYSQL数据库服务器就搭建完毕了\"><a href=\"#就这样，一台MYSQL数据库服务器就搭建完毕了\" class=\"headerlink\" title=\"就这样，一台MYSQL数据库服务器就搭建完毕了\"></a>就这样，一台MYSQL数据库服务器就搭建完毕了</h1>"},{"title":"Ubuntu14.04常用美化、配置、软件安装（持续更新中。。。）","date":"2016-01-06T08:23:27.000Z","_content":"# 一、安装扁平化主题\n- 1.安装ubuntu-tweak\n```bash\nsudo add-apt-repository ppa:tualatrix/ppa\nsudo apt-get update\nsudo apt-get install ubuntu-tweak\n```\n- 2.下载主题包文件\n```bash\nwget –no-check-certificate https://github.com/anmoljagetia/Flatabulous/archive/master.zip\n```\n下载好后解压到用户根目录的.themes文件夹（没有请使用`mkdir .themes`命令新建文件夹）\n- 3.安装图标\n```bash\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install ultra-flat-icons\n```\n也可`sudo apt-get install ultra-flat-icons-orange`或者`sudo apt-get install ultra-flat-icons-green`来安装其他两种颜色\n- 4.使用ubuntu-tweak图形化界面更改主题及图标即可\n（该部分参考自[http://www.jianshu.com/p/5b80711f304f](http://www.jianshu.com/p/5b80711f304f)）\n\n# 二、安装shadowsocks\n百度一下`ubuntu shadowsocks`的结果很凄惨，根本没有什么有用的，不过google还是挺厉害的，安装`shadowsocks-qt5`即可\n```bash\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n```\n（该部分参考自[https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html](https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html)）\n\n# 三、安装常用工具\n- 1.rinetd端口转发工具\n```bash\nsudo apt-get install rinetd    (配置文件为/etc/rinetd.conf)\n```","source":"_posts/ubuntu-beatiful.md","raw":"---\ntitle: Ubuntu14.04常用美化、配置、软件安装（持续更新中。。。）\ndate: 2016-01-06 16:23:27\ntags:\n- ubuntu\n- 美化\n- 软件安装\ncategories: tech\n---\n# 一、安装扁平化主题\n- 1.安装ubuntu-tweak\n```bash\nsudo add-apt-repository ppa:tualatrix/ppa\nsudo apt-get update\nsudo apt-get install ubuntu-tweak\n```\n- 2.下载主题包文件\n```bash\nwget –no-check-certificate https://github.com/anmoljagetia/Flatabulous/archive/master.zip\n```\n下载好后解压到用户根目录的.themes文件夹（没有请使用`mkdir .themes`命令新建文件夹）\n- 3.安装图标\n```bash\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install ultra-flat-icons\n```\n也可`sudo apt-get install ultra-flat-icons-orange`或者`sudo apt-get install ultra-flat-icons-green`来安装其他两种颜色\n- 4.使用ubuntu-tweak图形化界面更改主题及图标即可\n（该部分参考自[http://www.jianshu.com/p/5b80711f304f](http://www.jianshu.com/p/5b80711f304f)）\n\n# 二、安装shadowsocks\n百度一下`ubuntu shadowsocks`的结果很凄惨，根本没有什么有用的，不过google还是挺厉害的，安装`shadowsocks-qt5`即可\n```bash\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n```\n（该部分参考自[https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html](https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html)）\n\n# 三、安装常用工具\n- 1.rinetd端口转发工具\n```bash\nsudo apt-get install rinetd    (配置文件为/etc/rinetd.conf)\n```","slug":"ubuntu-beatiful","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5h000ttstnhwjwjpcs","content":"<h1 id=\"一、安装扁平化主题\"><a href=\"#一、安装扁平化主题\" class=\"headerlink\" title=\"一、安装扁平化主题\"></a>一、安装扁平化主题</h1><ul>\n<li>1.安装ubuntu-tweak<pre><code class=\"bash\">sudo add-apt-repository ppa:tualatrix/ppa\nsudo apt-get update\nsudo apt-get install ubuntu-tweak\n</code></pre>\n</li>\n<li>2.下载主题包文件<pre><code class=\"bash\">wget –no-check-certificate https://github.com/anmoljagetia/Flatabulous/archive/master.zip\n</code></pre>\n下载好后解压到用户根目录的.themes文件夹（没有请使用<code>mkdir .themes</code>命令新建文件夹）</li>\n<li>3.安装图标<pre><code class=\"bash\">sudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install ultra-flat-icons\n</code></pre>\n也可<code>sudo apt-get install ultra-flat-icons-orange</code>或者<code>sudo apt-get install ultra-flat-icons-green</code>来安装其他两种颜色</li>\n<li>4.使用ubuntu-tweak图形化界面更改主题及图标即可<br>（该部分参考自<a href=\"http://www.jianshu.com/p/5b80711f304f\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/5b80711f304f</a>）</li>\n</ul>\n<h1 id=\"二、安装shadowsocks\"><a href=\"#二、安装shadowsocks\" class=\"headerlink\" title=\"二、安装shadowsocks\"></a>二、安装shadowsocks</h1><p>百度一下<code>ubuntu shadowsocks</code>的结果很凄惨，根本没有什么有用的，不过google还是挺厉害的，安装<code>shadowsocks-qt5</code>即可</p>\n<pre><code class=\"bash\">sudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n</code></pre>\n<p>（该部分参考自<a href=\"https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html\" target=\"_blank\" rel=\"external\">https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html</a>）</p>\n<h1 id=\"三、安装常用工具\"><a href=\"#三、安装常用工具\" class=\"headerlink\" title=\"三、安装常用工具\"></a>三、安装常用工具</h1><ul>\n<li>1.rinetd端口转发工具<pre><code class=\"bash\">sudo apt-get install rinetd    (配置文件为/etc/rinetd.conf)\n</code></pre>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"一、安装扁平化主题\"><a href=\"#一、安装扁平化主题\" class=\"headerlink\" title=\"一、安装扁平化主题\"></a>一、安装扁平化主题</h1><ul>\n<li>1.安装ubuntu-tweak<pre><code class=\"bash\">sudo add-apt-repository ppa:tualatrix/ppa\nsudo apt-get update\nsudo apt-get install ubuntu-tweak\n</code></pre>\n</li>\n<li>2.下载主题包文件<pre><code class=\"bash\">wget –no-check-certificate https://github.com/anmoljagetia/Flatabulous/archive/master.zip\n</code></pre>\n下载好后解压到用户根目录的.themes文件夹（没有请使用<code>mkdir .themes</code>命令新建文件夹）</li>\n<li>3.安装图标<pre><code class=\"bash\">sudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install ultra-flat-icons\n</code></pre>\n也可<code>sudo apt-get install ultra-flat-icons-orange</code>或者<code>sudo apt-get install ultra-flat-icons-green</code>来安装其他两种颜色</li>\n<li>4.使用ubuntu-tweak图形化界面更改主题及图标即可<br>（该部分参考自<a href=\"http://www.jianshu.com/p/5b80711f304f\">http://www.jianshu.com/p/5b80711f304f</a>）</li>\n</ul>\n<h1 id=\"二、安装shadowsocks\"><a href=\"#二、安装shadowsocks\" class=\"headerlink\" title=\"二、安装shadowsocks\"></a>二、安装shadowsocks</h1><p>百度一下<code>ubuntu shadowsocks</code>的结果很凄惨，根本没有什么有用的，不过google还是挺厉害的，安装<code>shadowsocks-qt5</code>即可</p>\n<pre><code class=\"bash\">sudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n</code></pre>\n<p>（该部分参考自<a href=\"https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html\">https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html</a>）</p>\n<h1 id=\"三、安装常用工具\"><a href=\"#三、安装常用工具\" class=\"headerlink\" title=\"三、安装常用工具\"></a>三、安装常用工具</h1><ul>\n<li>1.rinetd端口转发工具<pre><code class=\"bash\">sudo apt-get install rinetd    (配置文件为/etc/rinetd.conf)\n</code></pre>\n</li>\n</ul>\n"},{"title":"ubuntu14.04安装composer+laravel配置","date":"2016-02-05T08:29:05.000Z","_content":"安装前提：系统已安装好php环境，可在全局使用php命令\n# 安装compsoer并设置为全局调用\n```bash\ncurl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n```\n\n# 使用composer建立laravel installer安装工具\n```bash\ncomposer global require \"laravel/installer\"\n```\n\n# 将laravel命令添加进用户环境变量\n打开`~/.bashrc`文件最末添加命令：`PATH=$PATH:~/.composer/vendor/bin`\n`source ~/.bashrc` 命令使环境变量变化生效\n\n# 可以在全局使用laravel new {应用名称}了","source":"_posts/ubuntu-composer.md","raw":"---\ntitle: ubuntu14.04安装composer+laravel配置\ndate: 2016-02-05 16:29:05\ntags:\n- ubuntu\n- composer\n- laravel\ncategories: tech\n---\n安装前提：系统已安装好php环境，可在全局使用php命令\n# 安装compsoer并设置为全局调用\n```bash\ncurl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n```\n\n# 使用composer建立laravel installer安装工具\n```bash\ncomposer global require \"laravel/installer\"\n```\n\n# 将laravel命令添加进用户环境变量\n打开`~/.bashrc`文件最末添加命令：`PATH=$PATH:~/.composer/vendor/bin`\n`source ~/.bashrc` 命令使环境变量变化生效\n\n# 可以在全局使用laravel new {应用名称}了","slug":"ubuntu-composer","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5i000wtstnovtqla1h","content":"<p>安装前提：系统已安装好php环境，可在全局使用php命令</p>\n<h1 id=\"安装compsoer并设置为全局调用\"><a href=\"#安装compsoer并设置为全局调用\" class=\"headerlink\" title=\"安装compsoer并设置为全局调用\"></a>安装compsoer并设置为全局调用</h1><pre><code class=\"bash\">curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n</code></pre>\n<h1 id=\"使用composer建立laravel-installer安装工具\"><a href=\"#使用composer建立laravel-installer安装工具\" class=\"headerlink\" title=\"使用composer建立laravel installer安装工具\"></a>使用composer建立laravel installer安装工具</h1><pre><code class=\"bash\">composer global require &quot;laravel/installer&quot;\n</code></pre>\n<h1 id=\"将laravel命令添加进用户环境变量\"><a href=\"#将laravel命令添加进用户环境变量\" class=\"headerlink\" title=\"将laravel命令添加进用户环境变量\"></a>将laravel命令添加进用户环境变量</h1><p>打开<code>~/.bashrc</code>文件最末添加命令：<code>PATH=$PATH:~/.composer/vendor/bin</code><br><code>source ~/.bashrc</code> 命令使环境变量变化生效</p>\n<h1 id=\"可以在全局使用laravel-new-应用名称-了\"><a href=\"#可以在全局使用laravel-new-应用名称-了\" class=\"headerlink\" title=\"可以在全局使用laravel new {应用名称}了\"></a>可以在全局使用laravel new {应用名称}了</h1>","excerpt":"","more":"<p>安装前提：系统已安装好php环境，可在全局使用php命令</p>\n<h1 id=\"安装compsoer并设置为全局调用\"><a href=\"#安装compsoer并设置为全局调用\" class=\"headerlink\" title=\"安装compsoer并设置为全局调用\"></a>安装compsoer并设置为全局调用</h1><pre><code class=\"bash\">curl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n</code></pre>\n<h1 id=\"使用composer建立laravel-installer安装工具\"><a href=\"#使用composer建立laravel-installer安装工具\" class=\"headerlink\" title=\"使用composer建立laravel installer安装工具\"></a>使用composer建立laravel installer安装工具</h1><pre><code class=\"bash\">composer global require &quot;laravel/installer&quot;\n</code></pre>\n<h1 id=\"将laravel命令添加进用户环境变量\"><a href=\"#将laravel命令添加进用户环境变量\" class=\"headerlink\" title=\"将laravel命令添加进用户环境变量\"></a>将laravel命令添加进用户环境变量</h1><p>打开<code>~/.bashrc</code>文件最末添加命令：<code>PATH=$PATH:~/.composer/vendor/bin</code><br><code>source ~/.bashrc</code> 命令使环境变量变化生效</p>\n<h1 id=\"可以在全局使用laravel-new-应用名称-了\"><a href=\"#可以在全局使用laravel-new-应用名称-了\" class=\"headerlink\" title=\"可以在全局使用laravel new {应用名称}了\"></a>可以在全局使用laravel new {应用名称}了</h1>"},{"title":"ubuntu-14.04-lts安装配置nodejs+bower","date":"2015-12-23T08:16:16.000Z","_content":"> 强烈推荐方案二\n\n# 一、方案一\n安装准备：`pyhton，make，gcc，g++`均已安装\n- 第一步 将`nodejs的ppa源`加入系统    ```$ sudo  add-apt-repository ppa:chris-lea/node.js```\n- 第二步 更新系统软件源缓存并安装`nodejs`  ```$sudo apt-get update  $ sudo apt-get install nodejs```\n- 第三步 使用`npm`命令全局安装bower命令 ```$ sudo npm install bower -g```\n到此`nodejs`和`bower`工具安装完成，接下来请享受`bower`工具带来的舒适吧！\n注：$ 为`bash`命令行前标识符\n\n# 二、方案二\n由于国内直接访问软件源的网速不是很好，而且`apt源`的`nodejs`版本也不是很好，所以建议采用方案二——使用`NPM淘宝镜像`来实现\n- 第一步  在`https://npm.taobao.org/mirrors/node`中找到你想要的`nodejs`版本，建议采用`v4.4.3LTS版本`或者`the latest版本`\n参考命令为：```wget –no-check-certifica https://npm.taobao.org/mirrors/node/v4.4.3/node-v4.4.3-linux-x64.tar.gz```\n（因为实验时主机为`Ubuntu 14.04 LTS 64位`操作系统，所以选择`node-v4.4.3-linux-x64.tar.gz`）\n- 第二步 在用户根目录创建node文件夹，将下载的压缩包内容解压到该文件夹\n参考命令为：```tar zxf node-v4.4.3-linux-x64.tar.gz ~/node/```\n- 第三步  将node和npm命令加入用户环境变量\n参考命令为： `vim .bashrc`\n在`.bashrc`文件的末尾加入`PATH=$PATH:~/node/bin`\n```source .bashrc```\n（使该配置文件立即生效，如果不生效可以重新开个窗口试试`node -v` 是否会返回`v4.4.3`）\n（这样的命令就是只能单用户使用，如果需要多用户使用，请将`node文件夹`设置在系统公用目录，然后将`bin`目录赋给权限`755`）\n- 第四步  安装cnpm\n参考命令为：```npm install -g cnpm --registry=https://registry.npm.taobao.org```\n到此为止，`cnpm`命令就可以完全替代`npm`进行使用，并且安装模块的速度杠杠的哦（毕竟是淘宝镜像源啊～）\n- 第五步  安装bower\n参考命令：`cnpm install -g bower`\n","source":"_posts/ubuntu-nodejs.md","raw":"---\ntitle: ubuntu-14.04-lts安装配置nodejs+bower\ndate: 2015-12-23 16:16:16\ntags:\n- ubuntu\n- nodejs\n- bower\ncategories: tech\n---\n> 强烈推荐方案二\n\n# 一、方案一\n安装准备：`pyhton，make，gcc，g++`均已安装\n- 第一步 将`nodejs的ppa源`加入系统    ```$ sudo  add-apt-repository ppa:chris-lea/node.js```\n- 第二步 更新系统软件源缓存并安装`nodejs`  ```$sudo apt-get update  $ sudo apt-get install nodejs```\n- 第三步 使用`npm`命令全局安装bower命令 ```$ sudo npm install bower -g```\n到此`nodejs`和`bower`工具安装完成，接下来请享受`bower`工具带来的舒适吧！\n注：$ 为`bash`命令行前标识符\n\n# 二、方案二\n由于国内直接访问软件源的网速不是很好，而且`apt源`的`nodejs`版本也不是很好，所以建议采用方案二——使用`NPM淘宝镜像`来实现\n- 第一步  在`https://npm.taobao.org/mirrors/node`中找到你想要的`nodejs`版本，建议采用`v4.4.3LTS版本`或者`the latest版本`\n参考命令为：```wget –no-check-certifica https://npm.taobao.org/mirrors/node/v4.4.3/node-v4.4.3-linux-x64.tar.gz```\n（因为实验时主机为`Ubuntu 14.04 LTS 64位`操作系统，所以选择`node-v4.4.3-linux-x64.tar.gz`）\n- 第二步 在用户根目录创建node文件夹，将下载的压缩包内容解压到该文件夹\n参考命令为：```tar zxf node-v4.4.3-linux-x64.tar.gz ~/node/```\n- 第三步  将node和npm命令加入用户环境变量\n参考命令为： `vim .bashrc`\n在`.bashrc`文件的末尾加入`PATH=$PATH:~/node/bin`\n```source .bashrc```\n（使该配置文件立即生效，如果不生效可以重新开个窗口试试`node -v` 是否会返回`v4.4.3`）\n（这样的命令就是只能单用户使用，如果需要多用户使用，请将`node文件夹`设置在系统公用目录，然后将`bin`目录赋给权限`755`）\n- 第四步  安装cnpm\n参考命令为：```npm install -g cnpm --registry=https://registry.npm.taobao.org```\n到此为止，`cnpm`命令就可以完全替代`npm`进行使用，并且安装模块的速度杠杠的哦（毕竟是淘宝镜像源啊～）\n- 第五步  安装bower\n参考命令：`cnpm install -g bower`\n","slug":"ubuntu-nodejs","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5j000ztstn00pkbreq","content":"<blockquote>\n<p>强烈推荐方案二</p>\n</blockquote>\n<h1 id=\"一、方案一\"><a href=\"#一、方案一\" class=\"headerlink\" title=\"一、方案一\"></a>一、方案一</h1><p>安装准备：<code>pyhton，make，gcc，g++</code>均已安装</p>\n<ul>\n<li>第一步 将<code>nodejs的ppa源</code>加入系统    <code>$ sudo  add-apt-repository ppa:chris-lea/node.js</code></li>\n<li>第二步 更新系统软件源缓存并安装<code>nodejs</code>  <code>$sudo apt-get update  $ sudo apt-get install nodejs</code></li>\n<li>第三步 使用<code>npm</code>命令全局安装bower命令 <code>$ sudo npm install bower -g</code><br>到此<code>nodejs</code>和<code>bower</code>工具安装完成，接下来请享受<code>bower</code>工具带来的舒适吧！<br>注：$ 为<code>bash</code>命令行前标识符</li>\n</ul>\n<h1 id=\"二、方案二\"><a href=\"#二、方案二\" class=\"headerlink\" title=\"二、方案二\"></a>二、方案二</h1><p>由于国内直接访问软件源的网速不是很好，而且<code>apt源</code>的<code>nodejs</code>版本也不是很好，所以建议采用方案二——使用<code>NPM淘宝镜像</code>来实现</p>\n<ul>\n<li>第一步  在<code>https://npm.taobao.org/mirrors/node</code>中找到你想要的<code>nodejs</code>版本，建议采用<code>v4.4.3LTS版本</code>或者<code>the latest版本</code><br>参考命令为：<code>wget –no-check-certifica https://npm.taobao.org/mirrors/node/v4.4.3/node-v4.4.3-linux-x64.tar.gz</code><br>（因为实验时主机为<code>Ubuntu 14.04 LTS 64位</code>操作系统，所以选择<code>node-v4.4.3-linux-x64.tar.gz</code>）</li>\n<li>第二步 在用户根目录创建node文件夹，将下载的压缩包内容解压到该文件夹<br>参考命令为：<code>tar zxf node-v4.4.3-linux-x64.tar.gz ~/node/</code></li>\n<li>第三步  将node和npm命令加入用户环境变量<br>参考命令为： <code>vim .bashrc</code><br>在<code>.bashrc</code>文件的末尾加入<code>PATH=$PATH:~/node/bin</code><br><code>source .bashrc</code><br>（使该配置文件立即生效，如果不生效可以重新开个窗口试试<code>node -v</code> 是否会返回<code>v4.4.3</code>）<br>（这样的命令就是只能单用户使用，如果需要多用户使用，请将<code>node文件夹</code>设置在系统公用目录，然后将<code>bin</code>目录赋给权限<code>755</code>）</li>\n<li>第四步  安装cnpm<br>参考命令为：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>到此为止，<code>cnpm</code>命令就可以完全替代<code>npm</code>进行使用，并且安装模块的速度杠杠的哦（毕竟是淘宝镜像源啊～）</li>\n<li>第五步  安装bower<br>参考命令：<code>cnpm install -g bower</code></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>强烈推荐方案二</p>\n</blockquote>\n<h1 id=\"一、方案一\"><a href=\"#一、方案一\" class=\"headerlink\" title=\"一、方案一\"></a>一、方案一</h1><p>安装准备：<code>pyhton，make，gcc，g++</code>均已安装</p>\n<ul>\n<li>第一步 将<code>nodejs的ppa源</code>加入系统    <code>$ sudo  add-apt-repository ppa:chris-lea/node.js</code></li>\n<li>第二步 更新系统软件源缓存并安装<code>nodejs</code>  <code>$sudo apt-get update  $ sudo apt-get install nodejs</code></li>\n<li>第三步 使用<code>npm</code>命令全局安装bower命令 <code>$ sudo npm install bower -g</code><br>到此<code>nodejs</code>和<code>bower</code>工具安装完成，接下来请享受<code>bower</code>工具带来的舒适吧！<br>注：$ 为<code>bash</code>命令行前标识符</li>\n</ul>\n<h1 id=\"二、方案二\"><a href=\"#二、方案二\" class=\"headerlink\" title=\"二、方案二\"></a>二、方案二</h1><p>由于国内直接访问软件源的网速不是很好，而且<code>apt源</code>的<code>nodejs</code>版本也不是很好，所以建议采用方案二——使用<code>NPM淘宝镜像</code>来实现</p>\n<ul>\n<li>第一步  在<code>https://npm.taobao.org/mirrors/node</code>中找到你想要的<code>nodejs</code>版本，建议采用<code>v4.4.3LTS版本</code>或者<code>the latest版本</code><br>参考命令为：<code>wget –no-check-certifica https://npm.taobao.org/mirrors/node/v4.4.3/node-v4.4.3-linux-x64.tar.gz</code><br>（因为实验时主机为<code>Ubuntu 14.04 LTS 64位</code>操作系统，所以选择<code>node-v4.4.3-linux-x64.tar.gz</code>）</li>\n<li>第二步 在用户根目录创建node文件夹，将下载的压缩包内容解压到该文件夹<br>参考命令为：<code>tar zxf node-v4.4.3-linux-x64.tar.gz ~/node/</code></li>\n<li>第三步  将node和npm命令加入用户环境变量<br>参考命令为： <code>vim .bashrc</code><br>在<code>.bashrc</code>文件的末尾加入<code>PATH=$PATH:~/node/bin</code><br><code>source .bashrc</code><br>（使该配置文件立即生效，如果不生效可以重新开个窗口试试<code>node -v</code> 是否会返回<code>v4.4.3</code>）<br>（这样的命令就是只能单用户使用，如果需要多用户使用，请将<code>node文件夹</code>设置在系统公用目录，然后将<code>bin</code>目录赋给权限<code>755</code>）</li>\n<li>第四步  安装cnpm<br>参考命令为：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>到此为止，<code>cnpm</code>命令就可以完全替代<code>npm</code>进行使用，并且安装模块的速度杠杠的哦（毕竟是淘宝镜像源啊～）</li>\n<li>第五步  安装bower<br>参考命令：<code>cnpm install -g bower</code></li>\n</ul>\n"},{"title":"ubuntu16.04下安装nvidia gtx 970显卡驱动","date":"2017-05-09T04:02:49.000Z","_content":"# 实验环境\n- Ubuntu 16.04 Desktop (内核版本：4.8.0-46-generic)\n- 显卡：GTX-960\n\n# 准备工作\n## 下载NVIDIA驱动程序\n- 在[nvidia官网下载](http://www.nvidia.cn/Download/index.aspx?lang=cn)对应的驱动（`.run`文件）\n## 删除旧驱动\n- `sudo apt-get purge nvidia*`（如果返回卸载成功或无匹配结果均可）\n## 禁用自带的nouveau nvidia驱动\n- 通过命令`sudo vim /etc/modprobe.d/blacklist-nouveau.conf`创建文件，并添加内容如下：\n```\nblacklist nouveau\noptions nouveau modeset=0\n```\n- 执行更新命令`sudo update-initramfs -u`，并重启操作系统（重启后可用`lsmod | grep nouveau`检查是否禁用成功）\n## 安装内核头\n- 通过命令安装\n```shell\nsudo apt-get install linux-headers-$(uname -r)\n```\n\n# 正式安装过程\n- 通过命令`sudo service lightdm stop`关闭`x-window`\n- 执行NVIDIA驱动安装程序`sudo sh NVIDIA.run`（`.run`文件需提前赋予执行权限）\n- 一步一步选择下去执行安装即可，最终显示安装成功\n- 通过命令`sudo service lightdm start`开启`x-window`\n\n# 完成显卡驱动安装","source":"_posts/ubuntu-nvidia.md","raw":"---\ntitle: ubuntu16.04下安装nvidia gtx 970显卡驱动\ndate: 2017-05-09 12:02:49\ntags:\n- ubuntu\n- nvidia\ncategories: tech\n---\n# 实验环境\n- Ubuntu 16.04 Desktop (内核版本：4.8.0-46-generic)\n- 显卡：GTX-960\n\n# 准备工作\n## 下载NVIDIA驱动程序\n- 在[nvidia官网下载](http://www.nvidia.cn/Download/index.aspx?lang=cn)对应的驱动（`.run`文件）\n## 删除旧驱动\n- `sudo apt-get purge nvidia*`（如果返回卸载成功或无匹配结果均可）\n## 禁用自带的nouveau nvidia驱动\n- 通过命令`sudo vim /etc/modprobe.d/blacklist-nouveau.conf`创建文件，并添加内容如下：\n```\nblacklist nouveau\noptions nouveau modeset=0\n```\n- 执行更新命令`sudo update-initramfs -u`，并重启操作系统（重启后可用`lsmod | grep nouveau`检查是否禁用成功）\n## 安装内核头\n- 通过命令安装\n```shell\nsudo apt-get install linux-headers-$(uname -r)\n```\n\n# 正式安装过程\n- 通过命令`sudo service lightdm stop`关闭`x-window`\n- 执行NVIDIA驱动安装程序`sudo sh NVIDIA.run`（`.run`文件需提前赋予执行权限）\n- 一步一步选择下去执行安装即可，最终显示安装成功\n- 通过命令`sudo service lightdm start`开启`x-window`\n\n# 完成显卡驱动安装","slug":"ubuntu-nvidia","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5k0012tstnbqpgb458","content":"<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>Ubuntu 16.04 Desktop (内核版本：4.8.0-46-generic)</li>\n<li>显卡：GTX-960</li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"下载NVIDIA驱动程序\"><a href=\"#下载NVIDIA驱动程序\" class=\"headerlink\" title=\"下载NVIDIA驱动程序\"></a>下载NVIDIA驱动程序</h2><ul>\n<li>在<a href=\"http://www.nvidia.cn/Download/index.aspx?lang=cn\" target=\"_blank\" rel=\"external\">nvidia官网下载</a>对应的驱动（<code>.run</code>文件）<h2 id=\"删除旧驱动\"><a href=\"#删除旧驱动\" class=\"headerlink\" title=\"删除旧驱动\"></a>删除旧驱动</h2></li>\n<li><code>sudo apt-get purge nvidia*</code>（如果返回卸载成功或无匹配结果均可）<h2 id=\"禁用自带的nouveau-nvidia驱动\"><a href=\"#禁用自带的nouveau-nvidia驱动\" class=\"headerlink\" title=\"禁用自带的nouveau nvidia驱动\"></a>禁用自带的nouveau nvidia驱动</h2></li>\n<li>通过命令<code>sudo vim /etc/modprobe.d/blacklist-nouveau.conf</code>创建文件，并添加内容如下：<pre><code>blacklist nouveau\noptions nouveau modeset=0\n</code></pre></li>\n<li>执行更新命令<code>sudo update-initramfs -u</code>，并重启操作系统（重启后可用<code>lsmod | grep nouveau</code>检查是否禁用成功）<h2 id=\"安装内核头\"><a href=\"#安装内核头\" class=\"headerlink\" title=\"安装内核头\"></a>安装内核头</h2></li>\n<li>通过命令安装<pre><code class=\"shell\">sudo apt-get install linux-headers-$(uname -r)\n</code></pre>\n</li>\n</ul>\n<h1 id=\"正式安装过程\"><a href=\"#正式安装过程\" class=\"headerlink\" title=\"正式安装过程\"></a>正式安装过程</h1><ul>\n<li>通过命令<code>sudo service lightdm stop</code>关闭<code>x-window</code></li>\n<li>执行NVIDIA驱动安装程序<code>sudo sh NVIDIA.run</code>（<code>.run</code>文件需提前赋予执行权限）</li>\n<li>一步一步选择下去执行安装即可，最终显示安装成功</li>\n<li>通过命令<code>sudo service lightdm start</code>开启<code>x-window</code></li>\n</ul>\n<h1 id=\"完成显卡驱动安装\"><a href=\"#完成显卡驱动安装\" class=\"headerlink\" title=\"完成显卡驱动安装\"></a>完成显卡驱动安装</h1>","excerpt":"","more":"<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>Ubuntu 16.04 Desktop (内核版本：4.8.0-46-generic)</li>\n<li>显卡：GTX-960</li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"下载NVIDIA驱动程序\"><a href=\"#下载NVIDIA驱动程序\" class=\"headerlink\" title=\"下载NVIDIA驱动程序\"></a>下载NVIDIA驱动程序</h2><ul>\n<li>在<a href=\"http://www.nvidia.cn/Download/index.aspx?lang=cn\">nvidia官网下载</a>对应的驱动（<code>.run</code>文件）<h2 id=\"删除旧驱动\"><a href=\"#删除旧驱动\" class=\"headerlink\" title=\"删除旧驱动\"></a>删除旧驱动</h2></li>\n<li><code>sudo apt-get purge nvidia*</code>（如果返回卸载成功或无匹配结果均可）<h2 id=\"禁用自带的nouveau-nvidia驱动\"><a href=\"#禁用自带的nouveau-nvidia驱动\" class=\"headerlink\" title=\"禁用自带的nouveau nvidia驱动\"></a>禁用自带的nouveau nvidia驱动</h2></li>\n<li>通过命令<code>sudo vim /etc/modprobe.d/blacklist-nouveau.conf</code>创建文件，并添加内容如下：<pre><code>blacklist nouveau\noptions nouveau modeset=0\n</code></pre></li>\n<li>执行更新命令<code>sudo update-initramfs -u</code>，并重启操作系统（重启后可用<code>lsmod | grep nouveau</code>检查是否禁用成功）<h2 id=\"安装内核头\"><a href=\"#安装内核头\" class=\"headerlink\" title=\"安装内核头\"></a>安装内核头</h2></li>\n<li>通过命令安装<pre><code class=\"shell\">sudo apt-get install linux-headers-$(uname -r)\n</code></pre>\n</li>\n</ul>\n<h1 id=\"正式安装过程\"><a href=\"#正式安装过程\" class=\"headerlink\" title=\"正式安装过程\"></a>正式安装过程</h1><ul>\n<li>通过命令<code>sudo service lightdm stop</code>关闭<code>x-window</code></li>\n<li>执行NVIDIA驱动安装程序<code>sudo sh NVIDIA.run</code>（<code>.run</code>文件需提前赋予执行权限）</li>\n<li>一步一步选择下去执行安装即可，最终显示安装成功</li>\n<li>通过命令<code>sudo service lightdm start</code>开启<code>x-window</code></li>\n</ul>\n<h1 id=\"完成显卡驱动安装\"><a href=\"#完成显卡驱动安装\" class=\"headerlink\" title=\"完成显卡驱动安装\"></a>完成显卡驱动安装</h1>"},{"title":"unbound+dnscrypt搭建无污染DNS服务","date":"2017-12-03T10:23:41.000Z","_content":"\n# 引言\n\n鉴于某些原因，我们日常生活中使用的公共DNS总是会存在一些奇奇怪怪的DNS解析，例如某些国内云平台大型网站无法正常解析DNS，因此搭建无污染DNS服务成为了一项值得尝试、有意义的事情。在搭建的技术栈上，我们选择了`unbound`和`dnscrypt`。当然，这个世界上还有很多开源的、很好用的DNS服务器产品，比如`knot DNS`、`dnspord-sr`、`powerdns`等，它们也在很多大型的ISP提供商的DNS产品上得到了很多的实践，但是就我们个人而言，如果需要搭建一个小范围、公共的DNS服务，那么`unbound`是足够的，并且对于我们实现无污染有非常好的基础。废话少说，不如跟我一起来搭建一下。\n\n# 实验环境\n\n- 操作系统：CentOS 6.9\n- `Unbound`版本：目前最新`1.6.7` [源码下载地址](http://unbound.net/downloads/unbound-latest.tar.gz)\n- `Dnscrypt-proxy`版本：目前最新`1.9.5` [源码下载地址](https://download.dnscrypt.org/dnscrypt-proxy/dnscrypt-proxy-1.9.5.tar.gz)\n- 依赖库`libsodium`版本：目前最新`1.0.15`[源码下载地址](https://download.libsodium.org/libsodium/releases/libsodium-1.0.15.tar.gz)\n- 依赖库`libevent`版本：目前最新`2.1.8`[源码下载地址](https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz)(在github上，需要浏览器下载)\n\n# 实验过程\n\n\n\n### 安装`libsodium`\n\n- 解压 `tar zxf libsodium-1.0.15.tar.gz `\n- 进入文件夹`cd libsodium-1.0.15`\n\n```bash\n./configure\n./autogen.sh\n./configure\nmake -j12 #j后面为CPU核数，加快编译\nsudo make install\nsudo ldconfig\n```\n\n- 安装完成\n\n### 安装`libevent`\n\n- 解压`tar zxf libevent-2.1.8-stable.tar.gz `\n- 进入文件夹`cd libevent-2.1.8-stable`\n\n```bash\n./configure --prefix=/usr\n./autogen.sh\n./configure\nmake -j12\nsudo make install\nsudo -i\necho /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\nsudo ldconfig\n```\n\n- 安装完成\n\n### 安装`dnscrypt-proxy`\n\n- 解压`tar zxf dnscrypt-proxy-1.9.5.tar.gz `\n- 进入文件夹`cd dnscrypt-proxy-1.9.5`\n\n```bash\n./configure\nmake -j12\nsudo make install\n```\n\n> 如果提示报错 与libevent有关，请再次运行 sudo ldconfig 并重新运行以上命令。\n\n### 配置`dnscrypt-proxy`\n\n- 配置文件目录`/usr/local/etc/dnscrypt-proxy.conf`，具体需要修改注释的有下面内容：\n\n```conf\nResolverName cisco\nResolversList /usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv\nDaemonize no\nPidFile /var/run/dnscrypt-proxy.pid\nUser dnscrypt\nLocalAddress 127.0.0.1:5353\n\n#可选\nQueryLogFile /tmp/dns-queries.log\nQueryLogFile /tmp/dns-\n```\n\n- 添加用户`dnscrypt`：`sudo useadd -d /var/run/dnscrypt dnscrypt`\n- 创建主目录并赋予权限：`sudo mkdir /var/run/dnscrypt && sudo chown dnscrypt /var/run/dnscrypt`\n- 运行：`sudo /usr/local/sbin/dnscrypt-proxy /usr/local/etc/dnscrypt-proxy.conf`\n\n> 如果是在ubuntu系统下或者能够使用systemctl的环境下，请在/usr/lib/systemd/system/dnscrypt-proxy.socket修改配置，参考资料3中所示。\n\n### 安装`unbound`\n\n- 解压`tar zxf unbound-1.6.7.tar.gz`\n- 进入文件夹 `cd unbound-1.6.7`\n\n```bash\n./configure --with-libevent\nmake -j12\nsudo make install\n```\n\n- 安装完成\n\n### 配置`unbound`\n\n- 下载`dnsmasq-china-list`：`wget -c https://github.com/felixonmars/dnsmasq-china-list/archive/master.zip`\n- 解压并进入文件夹：`unzip master.zip && cd dnsmasq-china-list-master `\n- 生成`accelerated-domains.china.unbound.conf`：`make unbound`\n- 移动加速配置到`unbound`配置目录：`sudo mv accelerated-domains.china.unbound.conf /usr/local/etc/unbound`\n- 下载`named.cache`到`/usr/local/etc/unbound`目录：`wget -c ftp://FTP.INTERNIC.NET/domain/named.cache `\n- 修改配置文件`/usr/local/etc//unbound/unbound.conf`：\n\n```conf\nserver:\n      num-threads: 2 # 线程数可以修改为物理核心数\n      interface: 0.0.0.0 # 侦听所有 IPv4 地址\n      interface: ::0 # 侦听所有 IPv6 地址\n      # 如果只需要本机使用，则一个 interface: 127.0.0.1 即可\n      so-rcvbuf: 4m\n      so-sndbuf: 4m # 本机使用的话，这俩 buf 可以取消注释\n      so-reuseport: yes # 如果开了多线程，就写 yes\n      msg-cache-size: 64m # 本机可以设置 4m 或者更小\n      rrset-cache-size: 128m # 本机可以设置 4m 或者更小\n      cache-max-ttl: 3600 # 建议设置一个不太大的值...专治各种运营商 DNS 缓存不服\n      outgoing-num-tcp: 256 # 限制每个线程向上级查询的 TCP 并发数\n      incoming-num-tcp: 1024 # 限制每个线程接受查询的 TCP 并发数\n      # 下面这四个不需要解释了吧，不想用那个就写 no\n      do-ip4: yes\n      do-ip6: yes\n      do-udp: yes\n      do-tcp: yes\n      tcp-upstream: no # 默认是 no，隧道状态比较稳的话也不需要写 yes。一些情况下强制使用 tcp 连上游的话写 yes\n      access-control: 0.0.0.0/0 allow # 本机用的话建议设置 127.0.0.0/8 allow，局域网用适当调整\n      chroot: \"/usr/local/etc/unbound\"\n      username: \"unbound\"\n      root-hints: \"/usr/local/etc/unbound/named.cache\" # 没有的话在 ftp://FTP.INTERNIC.NET/domain/named.cache 下载一份\n      hide-identity: yes # 不返回对 id.server 和 hostname.bind 的查询。\n      hide-version: yes # 不返回对 version.server 和 version.bind 的查询。\n      # 不过下面有 identity 和 version 的自定义选项，不隐藏这些的话，修改下选项还可以卖个萌(´・ω・｀)\n      harden-glue: yes # 建议打开\n      module-config: \"iterator\" # 禁用 DNSSEC 检查，如果上游不支持 DNSSEC 就关掉。注意这个选项有可能在其他 include 的文件里\n      unwanted-reply-threshold: 10000000 # 针对各种网络不服，数值为建议值，具体可以自己修改看看效果\n      do-not-query-localhost: no # 一般是为了防止扯皮丢包开着，不过等下要用 DNSCrypt 所以关掉\n      directory: \"/usr/local/etc/unbound\"\n      pidfile: \"/usr/local/etc/unbound/unbound.pid\"\n      prefetch: yes # 蛮好用的，开着吧\n      minimal-responses: yes # 省带宽，开着吧。本机用可以关掉\n      # 关键部分来了，把默认查询全部丢给 DNSCrypt。使用 [地址]@[端口] 指定查询地址和端口，默认端口 53。\n      # 然后把国内的地址丢给国内的缓存服务器。这两个选项的顺序不能错哟。\n      # 如果使用隧道查询，把这个地址改为隧道对端的地址，或者一个国外的 DNS 服务器都可以，例如 8.8.8.8。\n      # 具体看是在对端开 DNS 还是直接用国外的服务器。后者的话，前面 outgoing-interface 可以直接设置隧道本地端的地址，不过要配合 dnsmasq-china-list 的话，还是写路由表比较合适，否则不够灵活。\n      include: \"/etc/unbound/accelerated-domains.china.unbound.conf\"\n\nforward-zone:\n    name: \".\"\n    forward-addr: 127.0.0.1@5353\n```\n\n- 运行：`sudo /usr/local/sbin/unbound -c /usr/local/etc/unbound/unbound.conf `（会自动进入后台执行）\n\n# 实验验证\n\n```bash\ndig facebook.com  @114.114.114.114\ndig facebook.com  @127.0.0.1\n#将两条命令查询出的ip放到ipip.net查询一下，看是否属于facebook机房的。可以看出，前者不是后者是，那么就无污染DNS就搭建完成了。虽然这样一来你就能够获得正确的facebook.com的ip，但是这并不意味着你就能正常访问facebook，因为ip是不通，这也正是为什么修改hosts而无法访问某搜索引擎的原因了。\n```\n\n\n\n# 参考资料\n\n- https://03k.org/linux-dnscrypt-proxy.html\n- http://blog.csdn.net/guowenyan001/article/details/39048893\n- https://blog.phoenixlzx.com/2016/04/27/better-dns-with-unbound/\n\n","source":"_posts/unbound-dns.md","raw":"---\ntitle: unbound+dnscrypt搭建无污染DNS服务\ndate: 2017-12-03 18:23:41\ntags:\n- DNS\n- unbound\n- dnscrypt\ncategories:\n- tech\n---\n\n# 引言\n\n鉴于某些原因，我们日常生活中使用的公共DNS总是会存在一些奇奇怪怪的DNS解析，例如某些国内云平台大型网站无法正常解析DNS，因此搭建无污染DNS服务成为了一项值得尝试、有意义的事情。在搭建的技术栈上，我们选择了`unbound`和`dnscrypt`。当然，这个世界上还有很多开源的、很好用的DNS服务器产品，比如`knot DNS`、`dnspord-sr`、`powerdns`等，它们也在很多大型的ISP提供商的DNS产品上得到了很多的实践，但是就我们个人而言，如果需要搭建一个小范围、公共的DNS服务，那么`unbound`是足够的，并且对于我们实现无污染有非常好的基础。废话少说，不如跟我一起来搭建一下。\n\n# 实验环境\n\n- 操作系统：CentOS 6.9\n- `Unbound`版本：目前最新`1.6.7` [源码下载地址](http://unbound.net/downloads/unbound-latest.tar.gz)\n- `Dnscrypt-proxy`版本：目前最新`1.9.5` [源码下载地址](https://download.dnscrypt.org/dnscrypt-proxy/dnscrypt-proxy-1.9.5.tar.gz)\n- 依赖库`libsodium`版本：目前最新`1.0.15`[源码下载地址](https://download.libsodium.org/libsodium/releases/libsodium-1.0.15.tar.gz)\n- 依赖库`libevent`版本：目前最新`2.1.8`[源码下载地址](https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz)(在github上，需要浏览器下载)\n\n# 实验过程\n\n\n\n### 安装`libsodium`\n\n- 解压 `tar zxf libsodium-1.0.15.tar.gz `\n- 进入文件夹`cd libsodium-1.0.15`\n\n```bash\n./configure\n./autogen.sh\n./configure\nmake -j12 #j后面为CPU核数，加快编译\nsudo make install\nsudo ldconfig\n```\n\n- 安装完成\n\n### 安装`libevent`\n\n- 解压`tar zxf libevent-2.1.8-stable.tar.gz `\n- 进入文件夹`cd libevent-2.1.8-stable`\n\n```bash\n./configure --prefix=/usr\n./autogen.sh\n./configure\nmake -j12\nsudo make install\nsudo -i\necho /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\nsudo ldconfig\n```\n\n- 安装完成\n\n### 安装`dnscrypt-proxy`\n\n- 解压`tar zxf dnscrypt-proxy-1.9.5.tar.gz `\n- 进入文件夹`cd dnscrypt-proxy-1.9.5`\n\n```bash\n./configure\nmake -j12\nsudo make install\n```\n\n> 如果提示报错 与libevent有关，请再次运行 sudo ldconfig 并重新运行以上命令。\n\n### 配置`dnscrypt-proxy`\n\n- 配置文件目录`/usr/local/etc/dnscrypt-proxy.conf`，具体需要修改注释的有下面内容：\n\n```conf\nResolverName cisco\nResolversList /usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv\nDaemonize no\nPidFile /var/run/dnscrypt-proxy.pid\nUser dnscrypt\nLocalAddress 127.0.0.1:5353\n\n#可选\nQueryLogFile /tmp/dns-queries.log\nQueryLogFile /tmp/dns-\n```\n\n- 添加用户`dnscrypt`：`sudo useadd -d /var/run/dnscrypt dnscrypt`\n- 创建主目录并赋予权限：`sudo mkdir /var/run/dnscrypt && sudo chown dnscrypt /var/run/dnscrypt`\n- 运行：`sudo /usr/local/sbin/dnscrypt-proxy /usr/local/etc/dnscrypt-proxy.conf`\n\n> 如果是在ubuntu系统下或者能够使用systemctl的环境下，请在/usr/lib/systemd/system/dnscrypt-proxy.socket修改配置，参考资料3中所示。\n\n### 安装`unbound`\n\n- 解压`tar zxf unbound-1.6.7.tar.gz`\n- 进入文件夹 `cd unbound-1.6.7`\n\n```bash\n./configure --with-libevent\nmake -j12\nsudo make install\n```\n\n- 安装完成\n\n### 配置`unbound`\n\n- 下载`dnsmasq-china-list`：`wget -c https://github.com/felixonmars/dnsmasq-china-list/archive/master.zip`\n- 解压并进入文件夹：`unzip master.zip && cd dnsmasq-china-list-master `\n- 生成`accelerated-domains.china.unbound.conf`：`make unbound`\n- 移动加速配置到`unbound`配置目录：`sudo mv accelerated-domains.china.unbound.conf /usr/local/etc/unbound`\n- 下载`named.cache`到`/usr/local/etc/unbound`目录：`wget -c ftp://FTP.INTERNIC.NET/domain/named.cache `\n- 修改配置文件`/usr/local/etc//unbound/unbound.conf`：\n\n```conf\nserver:\n      num-threads: 2 # 线程数可以修改为物理核心数\n      interface: 0.0.0.0 # 侦听所有 IPv4 地址\n      interface: ::0 # 侦听所有 IPv6 地址\n      # 如果只需要本机使用，则一个 interface: 127.0.0.1 即可\n      so-rcvbuf: 4m\n      so-sndbuf: 4m # 本机使用的话，这俩 buf 可以取消注释\n      so-reuseport: yes # 如果开了多线程，就写 yes\n      msg-cache-size: 64m # 本机可以设置 4m 或者更小\n      rrset-cache-size: 128m # 本机可以设置 4m 或者更小\n      cache-max-ttl: 3600 # 建议设置一个不太大的值...专治各种运营商 DNS 缓存不服\n      outgoing-num-tcp: 256 # 限制每个线程向上级查询的 TCP 并发数\n      incoming-num-tcp: 1024 # 限制每个线程接受查询的 TCP 并发数\n      # 下面这四个不需要解释了吧，不想用那个就写 no\n      do-ip4: yes\n      do-ip6: yes\n      do-udp: yes\n      do-tcp: yes\n      tcp-upstream: no # 默认是 no，隧道状态比较稳的话也不需要写 yes。一些情况下强制使用 tcp 连上游的话写 yes\n      access-control: 0.0.0.0/0 allow # 本机用的话建议设置 127.0.0.0/8 allow，局域网用适当调整\n      chroot: \"/usr/local/etc/unbound\"\n      username: \"unbound\"\n      root-hints: \"/usr/local/etc/unbound/named.cache\" # 没有的话在 ftp://FTP.INTERNIC.NET/domain/named.cache 下载一份\n      hide-identity: yes # 不返回对 id.server 和 hostname.bind 的查询。\n      hide-version: yes # 不返回对 version.server 和 version.bind 的查询。\n      # 不过下面有 identity 和 version 的自定义选项，不隐藏这些的话，修改下选项还可以卖个萌(´・ω・｀)\n      harden-glue: yes # 建议打开\n      module-config: \"iterator\" # 禁用 DNSSEC 检查，如果上游不支持 DNSSEC 就关掉。注意这个选项有可能在其他 include 的文件里\n      unwanted-reply-threshold: 10000000 # 针对各种网络不服，数值为建议值，具体可以自己修改看看效果\n      do-not-query-localhost: no # 一般是为了防止扯皮丢包开着，不过等下要用 DNSCrypt 所以关掉\n      directory: \"/usr/local/etc/unbound\"\n      pidfile: \"/usr/local/etc/unbound/unbound.pid\"\n      prefetch: yes # 蛮好用的，开着吧\n      minimal-responses: yes # 省带宽，开着吧。本机用可以关掉\n      # 关键部分来了，把默认查询全部丢给 DNSCrypt。使用 [地址]@[端口] 指定查询地址和端口，默认端口 53。\n      # 然后把国内的地址丢给国内的缓存服务器。这两个选项的顺序不能错哟。\n      # 如果使用隧道查询，把这个地址改为隧道对端的地址，或者一个国外的 DNS 服务器都可以，例如 8.8.8.8。\n      # 具体看是在对端开 DNS 还是直接用国外的服务器。后者的话，前面 outgoing-interface 可以直接设置隧道本地端的地址，不过要配合 dnsmasq-china-list 的话，还是写路由表比较合适，否则不够灵活。\n      include: \"/etc/unbound/accelerated-domains.china.unbound.conf\"\n\nforward-zone:\n    name: \".\"\n    forward-addr: 127.0.0.1@5353\n```\n\n- 运行：`sudo /usr/local/sbin/unbound -c /usr/local/etc/unbound/unbound.conf `（会自动进入后台执行）\n\n# 实验验证\n\n```bash\ndig facebook.com  @114.114.114.114\ndig facebook.com  @127.0.0.1\n#将两条命令查询出的ip放到ipip.net查询一下，看是否属于facebook机房的。可以看出，前者不是后者是，那么就无污染DNS就搭建完成了。虽然这样一来你就能够获得正确的facebook.com的ip，但是这并不意味着你就能正常访问facebook，因为ip是不通，这也正是为什么修改hosts而无法访问某搜索引擎的原因了。\n```\n\n\n\n# 参考资料\n\n- https://03k.org/linux-dnscrypt-proxy.html\n- http://blog.csdn.net/guowenyan001/article/details/39048893\n- https://blog.phoenixlzx.com/2016/04/27/better-dns-with-unbound/\n\n","slug":"unbound-dns","published":1,"updated":"2017-12-03T11:46:59.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5l0014tstnbg0ihznr","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>鉴于某些原因，我们日常生活中使用的公共DNS总是会存在一些奇奇怪怪的DNS解析，例如某些国内云平台大型网站无法正常解析DNS，因此搭建无污染DNS服务成为了一项值得尝试、有意义的事情。在搭建的技术栈上，我们选择了<code>unbound</code>和<code>dnscrypt</code>。当然，这个世界上还有很多开源的、很好用的DNS服务器产品，比如<code>knot DNS</code>、<code>dnspord-sr</code>、<code>powerdns</code>等，它们也在很多大型的ISP提供商的DNS产品上得到了很多的实践，但是就我们个人而言，如果需要搭建一个小范围、公共的DNS服务，那么<code>unbound</code>是足够的，并且对于我们实现无污染有非常好的基础。废话少说，不如跟我一起来搭建一下。</p>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>操作系统：CentOS 6.9</li>\n<li><code>Unbound</code>版本：目前最新<code>1.6.7</code> <a href=\"http://unbound.net/downloads/unbound-latest.tar.gz\" target=\"_blank\" rel=\"external\">源码下载地址</a></li>\n<li><code>Dnscrypt-proxy</code>版本：目前最新<code>1.9.5</code> <a href=\"https://download.dnscrypt.org/dnscrypt-proxy/dnscrypt-proxy-1.9.5.tar.gz\" target=\"_blank\" rel=\"external\">源码下载地址</a></li>\n<li>依赖库<code>libsodium</code>版本：目前最新<code>1.0.15</code><a href=\"https://download.libsodium.org/libsodium/releases/libsodium-1.0.15.tar.gz\" target=\"_blank\" rel=\"external\">源码下载地址</a></li>\n<li>依赖库<code>libevent</code>版本：目前最新<code>2.1.8</code><a href=\"https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz\" target=\"_blank\" rel=\"external\">源码下载地址</a>(在github上，需要浏览器下载)</li>\n</ul>\n<h1 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h1><h3 id=\"安装libsodium\"><a href=\"#安装libsodium\" class=\"headerlink\" title=\"安装libsodium\"></a>安装<code>libsodium</code></h3><ul>\n<li>解压 <code>tar zxf libsodium-1.0.15.tar.gz</code></li>\n<li>进入文件夹<code>cd libsodium-1.0.15</code></li>\n</ul>\n<pre><code class=\"bash\">./configure\n./autogen.sh\n./configure\nmake -j12 #j后面为CPU核数，加快编译\nsudo make install\nsudo ldconfig\n</code></pre>\n<ul>\n<li>安装完成</li>\n</ul>\n<h3 id=\"安装libevent\"><a href=\"#安装libevent\" class=\"headerlink\" title=\"安装libevent\"></a>安装<code>libevent</code></h3><ul>\n<li>解压<code>tar zxf libevent-2.1.8-stable.tar.gz</code></li>\n<li>进入文件夹<code>cd libevent-2.1.8-stable</code></li>\n</ul>\n<pre><code class=\"bash\">./configure --prefix=/usr\n./autogen.sh\n./configure\nmake -j12\nsudo make install\nsudo -i\necho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf\nsudo ldconfig\n</code></pre>\n<ul>\n<li>安装完成</li>\n</ul>\n<h3 id=\"安装dnscrypt-proxy\"><a href=\"#安装dnscrypt-proxy\" class=\"headerlink\" title=\"安装dnscrypt-proxy\"></a>安装<code>dnscrypt-proxy</code></h3><ul>\n<li>解压<code>tar zxf dnscrypt-proxy-1.9.5.tar.gz</code></li>\n<li>进入文件夹<code>cd dnscrypt-proxy-1.9.5</code></li>\n</ul>\n<pre><code class=\"bash\">./configure\nmake -j12\nsudo make install\n</code></pre>\n<blockquote>\n<p>如果提示报错 与libevent有关，请再次运行 sudo ldconfig 并重新运行以上命令。</p>\n</blockquote>\n<h3 id=\"配置dnscrypt-proxy\"><a href=\"#配置dnscrypt-proxy\" class=\"headerlink\" title=\"配置dnscrypt-proxy\"></a>配置<code>dnscrypt-proxy</code></h3><ul>\n<li>配置文件目录<code>/usr/local/etc/dnscrypt-proxy.conf</code>，具体需要修改注释的有下面内容：</li>\n</ul>\n<pre><code class=\"conf\">ResolverName cisco\nResolversList /usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv\nDaemonize no\nPidFile /var/run/dnscrypt-proxy.pid\nUser dnscrypt\nLocalAddress 127.0.0.1:5353\n\n#可选\nQueryLogFile /tmp/dns-queries.log\nQueryLogFile /tmp/dns-\n</code></pre>\n<ul>\n<li>添加用户<code>dnscrypt</code>：<code>sudo useadd -d /var/run/dnscrypt dnscrypt</code></li>\n<li>创建主目录并赋予权限：<code>sudo mkdir /var/run/dnscrypt &amp;&amp; sudo chown dnscrypt /var/run/dnscrypt</code></li>\n<li>运行：<code>sudo /usr/local/sbin/dnscrypt-proxy /usr/local/etc/dnscrypt-proxy.conf</code></li>\n</ul>\n<blockquote>\n<p>如果是在ubuntu系统下或者能够使用systemctl的环境下，请在/usr/lib/systemd/system/dnscrypt-proxy.socket修改配置，参考资料3中所示。</p>\n</blockquote>\n<h3 id=\"安装unbound\"><a href=\"#安装unbound\" class=\"headerlink\" title=\"安装unbound\"></a>安装<code>unbound</code></h3><ul>\n<li>解压<code>tar zxf unbound-1.6.7.tar.gz</code></li>\n<li>进入文件夹 <code>cd unbound-1.6.7</code></li>\n</ul>\n<pre><code class=\"bash\">./configure --with-libevent\nmake -j12\nsudo make install\n</code></pre>\n<ul>\n<li>安装完成</li>\n</ul>\n<h3 id=\"配置unbound\"><a href=\"#配置unbound\" class=\"headerlink\" title=\"配置unbound\"></a>配置<code>unbound</code></h3><ul>\n<li>下载<code>dnsmasq-china-list</code>：<code>wget -c https://github.com/felixonmars/dnsmasq-china-list/archive/master.zip</code></li>\n<li>解压并进入文件夹：<code>unzip master.zip &amp;&amp; cd dnsmasq-china-list-master</code></li>\n<li>生成<code>accelerated-domains.china.unbound.conf</code>：<code>make unbound</code></li>\n<li>移动加速配置到<code>unbound</code>配置目录：<code>sudo mv accelerated-domains.china.unbound.conf /usr/local/etc/unbound</code></li>\n<li>下载<code>named.cache</code>到<code>/usr/local/etc/unbound</code>目录：<code>wget -c ftp://FTP.INTERNIC.NET/domain/named.cache</code></li>\n<li>修改配置文件<code>/usr/local/etc//unbound/unbound.conf</code>：</li>\n</ul>\n<pre><code class=\"conf\">server:\n      num-threads: 2 # 线程数可以修改为物理核心数\n      interface: 0.0.0.0 # 侦听所有 IPv4 地址\n      interface: ::0 # 侦听所有 IPv6 地址\n      # 如果只需要本机使用，则一个 interface: 127.0.0.1 即可\n      so-rcvbuf: 4m\n      so-sndbuf: 4m # 本机使用的话，这俩 buf 可以取消注释\n      so-reuseport: yes # 如果开了多线程，就写 yes\n      msg-cache-size: 64m # 本机可以设置 4m 或者更小\n      rrset-cache-size: 128m # 本机可以设置 4m 或者更小\n      cache-max-ttl: 3600 # 建议设置一个不太大的值...专治各种运营商 DNS 缓存不服\n      outgoing-num-tcp: 256 # 限制每个线程向上级查询的 TCP 并发数\n      incoming-num-tcp: 1024 # 限制每个线程接受查询的 TCP 并发数\n      # 下面这四个不需要解释了吧，不想用那个就写 no\n      do-ip4: yes\n      do-ip6: yes\n      do-udp: yes\n      do-tcp: yes\n      tcp-upstream: no # 默认是 no，隧道状态比较稳的话也不需要写 yes。一些情况下强制使用 tcp 连上游的话写 yes\n      access-control: 0.0.0.0/0 allow # 本机用的话建议设置 127.0.0.0/8 allow，局域网用适当调整\n      chroot: &quot;/usr/local/etc/unbound&quot;\n      username: &quot;unbound&quot;\n      root-hints: &quot;/usr/local/etc/unbound/named.cache&quot; # 没有的话在 ftp://FTP.INTERNIC.NET/domain/named.cache 下载一份\n      hide-identity: yes # 不返回对 id.server 和 hostname.bind 的查询。\n      hide-version: yes # 不返回对 version.server 和 version.bind 的查询。\n      # 不过下面有 identity 和 version 的自定义选项，不隐藏这些的话，修改下选项还可以卖个萌(´・ω・｀)\n      harden-glue: yes # 建议打开\n      module-config: &quot;iterator&quot; # 禁用 DNSSEC 检查，如果上游不支持 DNSSEC 就关掉。注意这个选项有可能在其他 include 的文件里\n      unwanted-reply-threshold: 10000000 # 针对各种网络不服，数值为建议值，具体可以自己修改看看效果\n      do-not-query-localhost: no # 一般是为了防止扯皮丢包开着，不过等下要用 DNSCrypt 所以关掉\n      directory: &quot;/usr/local/etc/unbound&quot;\n      pidfile: &quot;/usr/local/etc/unbound/unbound.pid&quot;\n      prefetch: yes # 蛮好用的，开着吧\n      minimal-responses: yes # 省带宽，开着吧。本机用可以关掉\n      # 关键部分来了，把默认查询全部丢给 DNSCrypt。使用 [地址]@[端口] 指定查询地址和端口，默认端口 53。\n      # 然后把国内的地址丢给国内的缓存服务器。这两个选项的顺序不能错哟。\n      # 如果使用隧道查询，把这个地址改为隧道对端的地址，或者一个国外的 DNS 服务器都可以，例如 8.8.8.8。\n      # 具体看是在对端开 DNS 还是直接用国外的服务器。后者的话，前面 outgoing-interface 可以直接设置隧道本地端的地址，不过要配合 dnsmasq-china-list 的话，还是写路由表比较合适，否则不够灵活。\n      include: &quot;/etc/unbound/accelerated-domains.china.unbound.conf&quot;\n\nforward-zone:\n    name: &quot;.&quot;\n    forward-addr: 127.0.0.1@5353\n</code></pre>\n<ul>\n<li>运行：<code>sudo /usr/local/sbin/unbound -c /usr/local/etc/unbound/unbound.conf</code>（会自动进入后台执行）</li>\n</ul>\n<h1 id=\"实验验证\"><a href=\"#实验验证\" class=\"headerlink\" title=\"实验验证\"></a>实验验证</h1><pre><code class=\"bash\">dig facebook.com  @114.114.114.114\ndig facebook.com  @127.0.0.1\n#将两条命令查询出的ip放到ipip.net查询一下，看是否属于facebook机房的。可以看出，前者不是后者是，那么就无污染DNS就搭建完成了。虽然这样一来你就能够获得正确的facebook.com的ip，但是这并不意味着你就能正常访问facebook，因为ip是不通，这也正是为什么修改hosts而无法访问某搜索引擎的原因了。\n</code></pre>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://03k.org/linux-dnscrypt-proxy.html\" target=\"_blank\" rel=\"external\">https://03k.org/linux-dnscrypt-proxy.html</a></li>\n<li><a href=\"http://blog.csdn.net/guowenyan001/article/details/39048893\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/guowenyan001/article/details/39048893</a></li>\n<li><a href=\"https://blog.phoenixlzx.com/2016/04/27/better-dns-with-unbound/\" target=\"_blank\" rel=\"external\">https://blog.phoenixlzx.com/2016/04/27/better-dns-with-unbound/</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>鉴于某些原因，我们日常生活中使用的公共DNS总是会存在一些奇奇怪怪的DNS解析，例如某些国内云平台大型网站无法正常解析DNS，因此搭建无污染DNS服务成为了一项值得尝试、有意义的事情。在搭建的技术栈上，我们选择了<code>unbound</code>和<code>dnscrypt</code>。当然，这个世界上还有很多开源的、很好用的DNS服务器产品，比如<code>knot DNS</code>、<code>dnspord-sr</code>、<code>powerdns</code>等，它们也在很多大型的ISP提供商的DNS产品上得到了很多的实践，但是就我们个人而言，如果需要搭建一个小范围、公共的DNS服务，那么<code>unbound</code>是足够的，并且对于我们实现无污染有非常好的基础。废话少说，不如跟我一起来搭建一下。</p>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>操作系统：CentOS 6.9</li>\n<li><code>Unbound</code>版本：目前最新<code>1.6.7</code> <a href=\"http://unbound.net/downloads/unbound-latest.tar.gz\">源码下载地址</a></li>\n<li><code>Dnscrypt-proxy</code>版本：目前最新<code>1.9.5</code> <a href=\"https://download.dnscrypt.org/dnscrypt-proxy/dnscrypt-proxy-1.9.5.tar.gz\">源码下载地址</a></li>\n<li>依赖库<code>libsodium</code>版本：目前最新<code>1.0.15</code><a href=\"https://download.libsodium.org/libsodium/releases/libsodium-1.0.15.tar.gz\">源码下载地址</a></li>\n<li>依赖库<code>libevent</code>版本：目前最新<code>2.1.8</code><a href=\"https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz\">源码下载地址</a>(在github上，需要浏览器下载)</li>\n</ul>\n<h1 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h1><h3 id=\"安装libsodium\"><a href=\"#安装libsodium\" class=\"headerlink\" title=\"安装libsodium\"></a>安装<code>libsodium</code></h3><ul>\n<li>解压 <code>tar zxf libsodium-1.0.15.tar.gz</code></li>\n<li>进入文件夹<code>cd libsodium-1.0.15</code></li>\n</ul>\n<pre><code class=\"bash\">./configure\n./autogen.sh\n./configure\nmake -j12 #j后面为CPU核数，加快编译\nsudo make install\nsudo ldconfig\n</code></pre>\n<ul>\n<li>安装完成</li>\n</ul>\n<h3 id=\"安装libevent\"><a href=\"#安装libevent\" class=\"headerlink\" title=\"安装libevent\"></a>安装<code>libevent</code></h3><ul>\n<li>解压<code>tar zxf libevent-2.1.8-stable.tar.gz</code></li>\n<li>进入文件夹<code>cd libevent-2.1.8-stable</code></li>\n</ul>\n<pre><code class=\"bash\">./configure --prefix=/usr\n./autogen.sh\n./configure\nmake -j12\nsudo make install\nsudo -i\necho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf\nsudo ldconfig\n</code></pre>\n<ul>\n<li>安装完成</li>\n</ul>\n<h3 id=\"安装dnscrypt-proxy\"><a href=\"#安装dnscrypt-proxy\" class=\"headerlink\" title=\"安装dnscrypt-proxy\"></a>安装<code>dnscrypt-proxy</code></h3><ul>\n<li>解压<code>tar zxf dnscrypt-proxy-1.9.5.tar.gz</code></li>\n<li>进入文件夹<code>cd dnscrypt-proxy-1.9.5</code></li>\n</ul>\n<pre><code class=\"bash\">./configure\nmake -j12\nsudo make install\n</code></pre>\n<blockquote>\n<p>如果提示报错 与libevent有关，请再次运行 sudo ldconfig 并重新运行以上命令。</p>\n</blockquote>\n<h3 id=\"配置dnscrypt-proxy\"><a href=\"#配置dnscrypt-proxy\" class=\"headerlink\" title=\"配置dnscrypt-proxy\"></a>配置<code>dnscrypt-proxy</code></h3><ul>\n<li>配置文件目录<code>/usr/local/etc/dnscrypt-proxy.conf</code>，具体需要修改注释的有下面内容：</li>\n</ul>\n<pre><code class=\"conf\">ResolverName cisco\nResolversList /usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv\nDaemonize no\nPidFile /var/run/dnscrypt-proxy.pid\nUser dnscrypt\nLocalAddress 127.0.0.1:5353\n\n#可选\nQueryLogFile /tmp/dns-queries.log\nQueryLogFile /tmp/dns-\n</code></pre>\n<ul>\n<li>添加用户<code>dnscrypt</code>：<code>sudo useadd -d /var/run/dnscrypt dnscrypt</code></li>\n<li>创建主目录并赋予权限：<code>sudo mkdir /var/run/dnscrypt &amp;&amp; sudo chown dnscrypt /var/run/dnscrypt</code></li>\n<li>运行：<code>sudo /usr/local/sbin/dnscrypt-proxy /usr/local/etc/dnscrypt-proxy.conf</code></li>\n</ul>\n<blockquote>\n<p>如果是在ubuntu系统下或者能够使用systemctl的环境下，请在/usr/lib/systemd/system/dnscrypt-proxy.socket修改配置，参考资料3中所示。</p>\n</blockquote>\n<h3 id=\"安装unbound\"><a href=\"#安装unbound\" class=\"headerlink\" title=\"安装unbound\"></a>安装<code>unbound</code></h3><ul>\n<li>解压<code>tar zxf unbound-1.6.7.tar.gz</code></li>\n<li>进入文件夹 <code>cd unbound-1.6.7</code></li>\n</ul>\n<pre><code class=\"bash\">./configure --with-libevent\nmake -j12\nsudo make install\n</code></pre>\n<ul>\n<li>安装完成</li>\n</ul>\n<h3 id=\"配置unbound\"><a href=\"#配置unbound\" class=\"headerlink\" title=\"配置unbound\"></a>配置<code>unbound</code></h3><ul>\n<li>下载<code>dnsmasq-china-list</code>：<code>wget -c https://github.com/felixonmars/dnsmasq-china-list/archive/master.zip</code></li>\n<li>解压并进入文件夹：<code>unzip master.zip &amp;&amp; cd dnsmasq-china-list-master</code></li>\n<li>生成<code>accelerated-domains.china.unbound.conf</code>：<code>make unbound</code></li>\n<li>移动加速配置到<code>unbound</code>配置目录：<code>sudo mv accelerated-domains.china.unbound.conf /usr/local/etc/unbound</code></li>\n<li>下载<code>named.cache</code>到<code>/usr/local/etc/unbound</code>目录：<code>wget -c ftp://FTP.INTERNIC.NET/domain/named.cache</code></li>\n<li>修改配置文件<code>/usr/local/etc//unbound/unbound.conf</code>：</li>\n</ul>\n<pre><code class=\"conf\">server:\n      num-threads: 2 # 线程数可以修改为物理核心数\n      interface: 0.0.0.0 # 侦听所有 IPv4 地址\n      interface: ::0 # 侦听所有 IPv6 地址\n      # 如果只需要本机使用，则一个 interface: 127.0.0.1 即可\n      so-rcvbuf: 4m\n      so-sndbuf: 4m # 本机使用的话，这俩 buf 可以取消注释\n      so-reuseport: yes # 如果开了多线程，就写 yes\n      msg-cache-size: 64m # 本机可以设置 4m 或者更小\n      rrset-cache-size: 128m # 本机可以设置 4m 或者更小\n      cache-max-ttl: 3600 # 建议设置一个不太大的值...专治各种运营商 DNS 缓存不服\n      outgoing-num-tcp: 256 # 限制每个线程向上级查询的 TCP 并发数\n      incoming-num-tcp: 1024 # 限制每个线程接受查询的 TCP 并发数\n      # 下面这四个不需要解释了吧，不想用那个就写 no\n      do-ip4: yes\n      do-ip6: yes\n      do-udp: yes\n      do-tcp: yes\n      tcp-upstream: no # 默认是 no，隧道状态比较稳的话也不需要写 yes。一些情况下强制使用 tcp 连上游的话写 yes\n      access-control: 0.0.0.0/0 allow # 本机用的话建议设置 127.0.0.0/8 allow，局域网用适当调整\n      chroot: &quot;/usr/local/etc/unbound&quot;\n      username: &quot;unbound&quot;\n      root-hints: &quot;/usr/local/etc/unbound/named.cache&quot; # 没有的话在 ftp://FTP.INTERNIC.NET/domain/named.cache 下载一份\n      hide-identity: yes # 不返回对 id.server 和 hostname.bind 的查询。\n      hide-version: yes # 不返回对 version.server 和 version.bind 的查询。\n      # 不过下面有 identity 和 version 的自定义选项，不隐藏这些的话，修改下选项还可以卖个萌(´・ω・｀)\n      harden-glue: yes # 建议打开\n      module-config: &quot;iterator&quot; # 禁用 DNSSEC 检查，如果上游不支持 DNSSEC 就关掉。注意这个选项有可能在其他 include 的文件里\n      unwanted-reply-threshold: 10000000 # 针对各种网络不服，数值为建议值，具体可以自己修改看看效果\n      do-not-query-localhost: no # 一般是为了防止扯皮丢包开着，不过等下要用 DNSCrypt 所以关掉\n      directory: &quot;/usr/local/etc/unbound&quot;\n      pidfile: &quot;/usr/local/etc/unbound/unbound.pid&quot;\n      prefetch: yes # 蛮好用的，开着吧\n      minimal-responses: yes # 省带宽，开着吧。本机用可以关掉\n      # 关键部分来了，把默认查询全部丢给 DNSCrypt。使用 [地址]@[端口] 指定查询地址和端口，默认端口 53。\n      # 然后把国内的地址丢给国内的缓存服务器。这两个选项的顺序不能错哟。\n      # 如果使用隧道查询，把这个地址改为隧道对端的地址，或者一个国外的 DNS 服务器都可以，例如 8.8.8.8。\n      # 具体看是在对端开 DNS 还是直接用国外的服务器。后者的话，前面 outgoing-interface 可以直接设置隧道本地端的地址，不过要配合 dnsmasq-china-list 的话，还是写路由表比较合适，否则不够灵活。\n      include: &quot;/etc/unbound/accelerated-domains.china.unbound.conf&quot;\n\nforward-zone:\n    name: &quot;.&quot;\n    forward-addr: 127.0.0.1@5353\n</code></pre>\n<ul>\n<li>运行：<code>sudo /usr/local/sbin/unbound -c /usr/local/etc/unbound/unbound.conf</code>（会自动进入后台执行）</li>\n</ul>\n<h1 id=\"实验验证\"><a href=\"#实验验证\" class=\"headerlink\" title=\"实验验证\"></a>实验验证</h1><pre><code class=\"bash\">dig facebook.com  @114.114.114.114\ndig facebook.com  @127.0.0.1\n#将两条命令查询出的ip放到ipip.net查询一下，看是否属于facebook机房的。可以看出，前者不是后者是，那么就无污染DNS就搭建完成了。虽然这样一来你就能够获得正确的facebook.com的ip，但是这并不意味着你就能正常访问facebook，因为ip是不通，这也正是为什么修改hosts而无法访问某搜索引擎的原因了。\n</code></pre>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://03k.org/linux-dnscrypt-proxy.html\">https://03k.org/linux-dnscrypt-proxy.html</a></li>\n<li><a href=\"http://blog.csdn.net/guowenyan001/article/details/39048893\">http://blog.csdn.net/guowenyan001/article/details/39048893</a></li>\n<li><a href=\"https://blog.phoenixlzx.com/2016/04/27/better-dns-with-unbound/\">https://blog.phoenixlzx.com/2016/04/27/better-dns-with-unbound/</a></li>\n</ul>\n"},{"title":"小小网页秀","date":"2015-08-08T05:57:34.000Z","_content":"\n### 下面是一些很早之前做的一些网页，仅供欣赏：\n\n* [特色寝室答辩](http://love.wl27.cn/614)\n* [学生标兵答辩](http://love.wl27.cn/bb/)\n* [markdown在线编辑器](http://mk.wl27.cn)\n\n","source":"_posts/web-show.md","raw":"---\ntitle: 小小网页秀\ndate: 2015-08-08 13:57:34\ntags: 网页秀\ncategories: 作品展示\n---\n\n### 下面是一些很早之前做的一些网页，仅供欣赏：\n\n* [特色寝室答辩](http://love.wl27.cn/614)\n* [学生标兵答辩](http://love.wl27.cn/bb/)\n* [markdown在线编辑器](http://mk.wl27.cn)\n\n","slug":"web-show","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5m0017tstn0yfkunlm","content":"<h3 id=\"下面是一些很早之前做的一些网页，仅供欣赏：\"><a href=\"#下面是一些很早之前做的一些网页，仅供欣赏：\" class=\"headerlink\" title=\"下面是一些很早之前做的一些网页，仅供欣赏：\"></a>下面是一些很早之前做的一些网页，仅供欣赏：</h3><ul>\n<li><a href=\"http://love.wl27.cn/614\" target=\"_blank\" rel=\"external\">特色寝室答辩</a></li>\n<li><a href=\"http://love.wl27.cn/bb/\" target=\"_blank\" rel=\"external\">学生标兵答辩</a></li>\n<li><a href=\"http://mk.wl27.cn\" target=\"_blank\" rel=\"external\">markdown在线编辑器</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"下面是一些很早之前做的一些网页，仅供欣赏：\"><a href=\"#下面是一些很早之前做的一些网页，仅供欣赏：\" class=\"headerlink\" title=\"下面是一些很早之前做的一些网页，仅供欣赏：\"></a>下面是一些很早之前做的一些网页，仅供欣赏：</h3><ul>\n<li><a href=\"http://love.wl27.cn/614\">特色寝室答辩</a></li>\n<li><a href=\"http://love.wl27.cn/bb/\">学生标兵答辩</a></li>\n<li><a href=\"http://mk.wl27.cn\">markdown在线编辑器</a></li>\n</ul>\n"},{"title":"作为码农，我们为什么要写作","date":"2015-08-12T07:56:22.000Z","_content":"　　在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。\n# 提高自己对知识的掌握层次\n　　美国教育心理学家Bloom将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。\n![认知历程图](/images/071832044245186.png)\n　　对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。\n　　我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。\n# 提高表达和沟通的能力\n　　作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。\n　　长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。\n# 接受读者的沟通和反馈\n　　当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：\n* 错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。\n* 认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。\n* 了解更多相关信息：一些读者会回复说：”某某框架也用了这个技术方案”，或者是：”你的这个实现方案没有另一个某某开源方案好”。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。\n\n# 影响力\n　　当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。\n# 结束语\n　　在写作过程中，你将收获提高自己对知识的掌握层次和提高表达和沟通的能力的好处。\n　　在写作结束后，你将收获错误内容反馈、认识朋友和了解更多相关信息的好处。\n　　在坚持写作一段时间，你将收获影响力和传递知识的乐趣。\n　　另外，《暗时间》的作者刘未鹏在他的文章，也总结了很多写作的好处，大家也可以看看。\n　　看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！\n\n原文转载自[作者：唐巧](http://kb.cnblogs.com/page/526625/)","source":"_posts/why-write.md","raw":"---\ntitle: 作为码农，我们为什么要写作\ndate: 2015-08-12 15:56:22\ntags: \n- 码农\n- 写作\ncategories: 哲学\n---\n　　在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。\n# 提高自己对知识的掌握层次\n　　美国教育心理学家Bloom将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。\n![认知历程图](/images/071832044245186.png)\n　　对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。\n　　我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。\n# 提高表达和沟通的能力\n　　作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。\n　　长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。\n# 接受读者的沟通和反馈\n　　当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：\n* 错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。\n* 认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。\n* 了解更多相关信息：一些读者会回复说：”某某框架也用了这个技术方案”，或者是：”你的这个实现方案没有另一个某某开源方案好”。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。\n\n# 影响力\n　　当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。\n# 结束语\n　　在写作过程中，你将收获提高自己对知识的掌握层次和提高表达和沟通的能力的好处。\n　　在写作结束后，你将收获错误内容反馈、认识朋友和了解更多相关信息的好处。\n　　在坚持写作一段时间，你将收获影响力和传递知识的乐趣。\n　　另外，《暗时间》的作者刘未鹏在他的文章，也总结了很多写作的好处，大家也可以看看。\n　　看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！\n\n原文转载自[作者：唐巧](http://kb.cnblogs.com/page/526625/)","slug":"why-write","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5n001atstnoottx7ly","content":"<p>　　在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。</p>\n<h1 id=\"提高自己对知识的掌握层次\"><a href=\"#提高自己对知识的掌握层次\" class=\"headerlink\" title=\"提高自己对知识的掌握层次\"></a>提高自己对知识的掌握层次</h1><p>　　美国教育心理学家Bloom将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。<br><img src=\"/images/071832044245186.png\" alt=\"认知历程图\"><br>　　对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。<br>　　我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。</p>\n<h1 id=\"提高表达和沟通的能力\"><a href=\"#提高表达和沟通的能力\" class=\"headerlink\" title=\"提高表达和沟通的能力\"></a>提高表达和沟通的能力</h1><p>　　作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。<br>　　长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。</p>\n<h1 id=\"接受读者的沟通和反馈\"><a href=\"#接受读者的沟通和反馈\" class=\"headerlink\" title=\"接受读者的沟通和反馈\"></a>接受读者的沟通和反馈</h1><p>　　当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：</p>\n<ul>\n<li>错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。</li>\n<li>认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。</li>\n<li>了解更多相关信息：一些读者会回复说：”某某框架也用了这个技术方案”，或者是：”你的这个实现方案没有另一个某某开源方案好”。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。</li>\n</ul>\n<h1 id=\"影响力\"><a href=\"#影响力\" class=\"headerlink\" title=\"影响力\"></a>影响力</h1><p>　　当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。</p>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>　　在写作过程中，你将收获提高自己对知识的掌握层次和提高表达和沟通的能力的好处。<br>　　在写作结束后，你将收获错误内容反馈、认识朋友和了解更多相关信息的好处。<br>　　在坚持写作一段时间，你将收获影响力和传递知识的乐趣。<br>　　另外，《暗时间》的作者刘未鹏在他的文章，也总结了很多写作的好处，大家也可以看看。<br>　　看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！</p>\n<p>原文转载自<a href=\"http://kb.cnblogs.com/page/526625/\" target=\"_blank\" rel=\"external\">作者：唐巧</a></p>\n","excerpt":"","more":"<p>　　在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。</p>\n<h1 id=\"提高自己对知识的掌握层次\"><a href=\"#提高自己对知识的掌握层次\" class=\"headerlink\" title=\"提高自己对知识的掌握层次\"></a>提高自己对知识的掌握层次</h1><p>　　美国教育心理学家Bloom将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。<br><img src=\"/images/071832044245186.png\" alt=\"认知历程图\"><br>　　对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。<br>　　我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。</p>\n<h1 id=\"提高表达和沟通的能力\"><a href=\"#提高表达和沟通的能力\" class=\"headerlink\" title=\"提高表达和沟通的能力\"></a>提高表达和沟通的能力</h1><p>　　作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。<br>　　长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。</p>\n<h1 id=\"接受读者的沟通和反馈\"><a href=\"#接受读者的沟通和反馈\" class=\"headerlink\" title=\"接受读者的沟通和反馈\"></a>接受读者的沟通和反馈</h1><p>　　当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：</p>\n<ul>\n<li>错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。</li>\n<li>认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。</li>\n<li>了解更多相关信息：一些读者会回复说：”某某框架也用了这个技术方案”，或者是：”你的这个实现方案没有另一个某某开源方案好”。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。</li>\n</ul>\n<h1 id=\"影响力\"><a href=\"#影响力\" class=\"headerlink\" title=\"影响力\"></a>影响力</h1><p>　　当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。</p>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><p>　　在写作过程中，你将收获提高自己对知识的掌握层次和提高表达和沟通的能力的好处。<br>　　在写作结束后，你将收获错误内容反馈、认识朋友和了解更多相关信息的好处。<br>　　在坚持写作一段时间，你将收获影响力和传递知识的乐趣。<br>　　另外，《暗时间》的作者刘未鹏在他的文章，也总结了很多写作的好处，大家也可以看看。<br>　　看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！</p>\n<p>原文转载自<a href=\"http://kb.cnblogs.com/page/526625/\">作者：唐巧</a></p>\n"},{"title":"windows配置composer和laravel笔记","date":"2015-11-11T08:09:39.000Z","_content":"# 一、安装及配置composer\n- 1.由于getcomposer.org的服务器在国外，国内访问网速有点慢，所以采用了国内镜像（http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中\n- 2.下载php至电脑上，并将php.exe所在文件夹位置添加至环境变量Path中\n- 3.在composer.phar所在文件夹按住Shift键点击鼠标右键选择“在此处打开cmd命令”，输入     \n```bash\necho @php \"%~dp0composer.phar\" %*>composer.bat\n```\n- 4.到这里，composer全局安装完成，在命令行中输入”composer -v”进行验证是否成功\n- 5.输入下列命令配置composer包和依赖库国内下载镜像\n```bash\ncomposer config -g repositories.packagist composer https://packagist.phpcomposer.com\n```\n- 6.composer配置已较为完善，试试看，访问速度还不错哟\n\n# 二、安装laravel应用\n[laravel中文官网文档](http://laravel-china.org/docs/5.0/installation)是提供了两种安装方法，一种是采用配置laravel安装工具（反正我是按照配的结果安装应用时返回错误的），另一种是采用composer命令的方式安装，个人觉得第二种方法靠谱点，毕竟我用第二种方法就成功地创建了laravel应用（虽然命令稍微长一点）\n```bash\ncomposer create-project laravel/laravel blog  –prefer-dist\n```\n解释：composer create-project 就是使用composer工具创建项目的意思，laravel/laravel就是指明模板是什么， blog是你要创建的应用的名称，后面那个就是命令的参数","source":"_posts/windows-composer.md","raw":"---\ntitle: windows配置composer和laravel笔记\ndate: 2015-11-11 16:09:39\ntags:\n- windows\n- laravel\n- composer\ncategories: tech\n---\n# 一、安装及配置composer\n- 1.由于getcomposer.org的服务器在国外，国内访问网速有点慢，所以采用了国内镜像（http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中\n- 2.下载php至电脑上，并将php.exe所在文件夹位置添加至环境变量Path中\n- 3.在composer.phar所在文件夹按住Shift键点击鼠标右键选择“在此处打开cmd命令”，输入     \n```bash\necho @php \"%~dp0composer.phar\" %*>composer.bat\n```\n- 4.到这里，composer全局安装完成，在命令行中输入”composer -v”进行验证是否成功\n- 5.输入下列命令配置composer包和依赖库国内下载镜像\n```bash\ncomposer config -g repositories.packagist composer https://packagist.phpcomposer.com\n```\n- 6.composer配置已较为完善，试试看，访问速度还不错哟\n\n# 二、安装laravel应用\n[laravel中文官网文档](http://laravel-china.org/docs/5.0/installation)是提供了两种安装方法，一种是采用配置laravel安装工具（反正我是按照配的结果安装应用时返回错误的），另一种是采用composer命令的方式安装，个人觉得第二种方法靠谱点，毕竟我用第二种方法就成功地创建了laravel应用（虽然命令稍微长一点）\n```bash\ncomposer create-project laravel/laravel blog  –prefer-dist\n```\n解释：composer create-project 就是使用composer工具创建项目的意思，laravel/laravel就是指明模板是什么， blog是你要创建的应用的名称，后面那个就是命令的参数","slug":"windows-composer","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5p001ftstnus3jy5vj","content":"<h1 id=\"一、安装及配置composer\"><a href=\"#一、安装及配置composer\" class=\"headerlink\" title=\"一、安装及配置composer\"></a>一、安装及配置composer</h1><ul>\n<li>1.由于getcomposer.org的服务器在国外，国内访问网速有点慢，所以采用了国内镜像（<a href=\"http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中\" target=\"_blank\" rel=\"external\">http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中</a></li>\n<li>2.下载php至电脑上，并将php.exe所在文件夹位置添加至环境变量Path中</li>\n<li>3.在composer.phar所在文件夹按住Shift键点击鼠标右键选择“在此处打开cmd命令”，输入     <pre><code class=\"bash\">echo @php &quot;%~dp0composer.phar&quot; %*&gt;composer.bat\n</code></pre>\n</li>\n<li>4.到这里，composer全局安装完成，在命令行中输入”composer -v”进行验证是否成功</li>\n<li>5.输入下列命令配置composer包和依赖库国内下载镜像<pre><code class=\"bash\">composer config -g repositories.packagist composer https://packagist.phpcomposer.com\n</code></pre>\n</li>\n<li>6.composer配置已较为完善，试试看，访问速度还不错哟</li>\n</ul>\n<h1 id=\"二、安装laravel应用\"><a href=\"#二、安装laravel应用\" class=\"headerlink\" title=\"二、安装laravel应用\"></a>二、安装laravel应用</h1><p><a href=\"http://laravel-china.org/docs/5.0/installation\" target=\"_blank\" rel=\"external\">laravel中文官网文档</a>是提供了两种安装方法，一种是采用配置laravel安装工具（反正我是按照配的结果安装应用时返回错误的），另一种是采用composer命令的方式安装，个人觉得第二种方法靠谱点，毕竟我用第二种方法就成功地创建了laravel应用（虽然命令稍微长一点）</p>\n<pre><code class=\"bash\">composer create-project laravel/laravel blog  –prefer-dist\n</code></pre>\n<p>解释：composer create-project 就是使用composer工具创建项目的意思，laravel/laravel就是指明模板是什么， blog是你要创建的应用的名称，后面那个就是命令的参数</p>\n","excerpt":"","more":"<h1 id=\"一、安装及配置composer\"><a href=\"#一、安装及配置composer\" class=\"headerlink\" title=\"一、安装及配置composer\"></a>一、安装及配置composer</h1><ul>\n<li>1.由于getcomposer.org的服务器在国外，国内访问网速有点慢，所以采用了国内镜像（<a href=\"http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中\">http://packagist.cn/）获得composer.phar包，将composer.phar所在文件夹位置添加至环境变量Path中</a></li>\n<li>2.下载php至电脑上，并将php.exe所在文件夹位置添加至环境变量Path中</li>\n<li>3.在composer.phar所在文件夹按住Shift键点击鼠标右键选择“在此处打开cmd命令”，输入     <pre><code class=\"bash\">echo @php &quot;%~dp0composer.phar&quot; %*&gt;composer.bat\n</code></pre>\n</li>\n<li>4.到这里，composer全局安装完成，在命令行中输入”composer -v”进行验证是否成功</li>\n<li>5.输入下列命令配置composer包和依赖库国内下载镜像<pre><code class=\"bash\">composer config -g repositories.packagist composer https://packagist.phpcomposer.com\n</code></pre>\n</li>\n<li>6.composer配置已较为完善，试试看，访问速度还不错哟</li>\n</ul>\n<h1 id=\"二、安装laravel应用\"><a href=\"#二、安装laravel应用\" class=\"headerlink\" title=\"二、安装laravel应用\"></a>二、安装laravel应用</h1><p><a href=\"http://laravel-china.org/docs/5.0/installation\">laravel中文官网文档</a>是提供了两种安装方法，一种是采用配置laravel安装工具（反正我是按照配的结果安装应用时返回错误的），另一种是采用composer命令的方式安装，个人觉得第二种方法靠谱点，毕竟我用第二种方法就成功地创建了laravel应用（虽然命令稍微长一点）</p>\n<pre><code class=\"bash\">composer create-project laravel/laravel blog  –prefer-dist\n</code></pre>\n<p>解释：composer create-project 就是使用composer工具创建项目的意思，laravel/laravel就是指明模板是什么， blog是你要创建的应用的名称，后面那个就是命令的参数</p>\n"},{"title":"windows安装配置python 3.5.1+pip 8.1.0 +django 1.9.4","date":"2016-03-08T14:12:49.000Z","_content":"# 下载并安装python3.5.1\n> python官网：https://www.python.org/downloads/\n\n- 下载完毕后，点击`.exe`文件直接安装，安装选项可以选择配置`python`到系统变量、安装`pip`工具\n- 在`cmd窗口`使用`python`命令检查`python`是否安装成功（成功的话会进入`python shell`，失败会返回没有这个命令）\n\n# 更新pip至最新版本\n- 在`cmd窗口`使用`pip list`命令检查pip是否安装成功（成功的话会显示当前`pip`的版本和`setuptool`的版本）\n- 输入`python -m pip install -U pip`命令升级`pip`至最新版本\n- 再输入`pip list`检查当前`pip`版本（当前`pip`的最新版本为`8.1.0`版本）\n\n# 更换pip的镜像源为上海大学开源社区镜像源\n- 由于pip的默认服务器在美国，日常使用`pip install`命令会出现超时，所以我们要把镜像源更换为`上海大学开源社区pip镜像源`\n- 更换方法是，在当前windows用户的主目录，添加一个`pip`文件夹，在`pip`文件夹中新建一个`pip.ini`文件，并把以下内容写入文件：\n```\n[global]\nindex-url=https://pypi.shuosc.org/simple\n[list]\nformat=columns\n```\n\n# 安装django1.9.4（当前最新版本）\n新开一个cmd窗口，在窗口中输入`pip install django`命令来安装`django`最新版本","source":"_posts/windows-pip.md","raw":"---\ntitle: windows安装配置python 3.5.1+pip 8.1.0 +django 1.9.4\ndate: 2016-03-08 22:12:49\ntags:\n- windows\n- pip\ncategories: tech\n---\n# 下载并安装python3.5.1\n> python官网：https://www.python.org/downloads/\n\n- 下载完毕后，点击`.exe`文件直接安装，安装选项可以选择配置`python`到系统变量、安装`pip`工具\n- 在`cmd窗口`使用`python`命令检查`python`是否安装成功（成功的话会进入`python shell`，失败会返回没有这个命令）\n\n# 更新pip至最新版本\n- 在`cmd窗口`使用`pip list`命令检查pip是否安装成功（成功的话会显示当前`pip`的版本和`setuptool`的版本）\n- 输入`python -m pip install -U pip`命令升级`pip`至最新版本\n- 再输入`pip list`检查当前`pip`版本（当前`pip`的最新版本为`8.1.0`版本）\n\n# 更换pip的镜像源为上海大学开源社区镜像源\n- 由于pip的默认服务器在美国，日常使用`pip install`命令会出现超时，所以我们要把镜像源更换为`上海大学开源社区pip镜像源`\n- 更换方法是，在当前windows用户的主目录，添加一个`pip`文件夹，在`pip`文件夹中新建一个`pip.ini`文件，并把以下内容写入文件：\n```\n[global]\nindex-url=https://pypi.shuosc.org/simple\n[list]\nformat=columns\n```\n\n# 安装django1.9.4（当前最新版本）\n新开一个cmd窗口，在窗口中输入`pip install django`命令来安装`django`最新版本","slug":"windows-pip","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5p001htstnjcu2vmey","content":"<h1 id=\"下载并安装python3-5-1\"><a href=\"#下载并安装python3-5-1\" class=\"headerlink\" title=\"下载并安装python3.5.1\"></a>下载并安装python3.5.1</h1><blockquote>\n<p>python官网：<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">https://www.python.org/downloads/</a></p>\n</blockquote>\n<ul>\n<li>下载完毕后，点击<code>.exe</code>文件直接安装，安装选项可以选择配置<code>python</code>到系统变量、安装<code>pip</code>工具</li>\n<li>在<code>cmd窗口</code>使用<code>python</code>命令检查<code>python</code>是否安装成功（成功的话会进入<code>python shell</code>，失败会返回没有这个命令）</li>\n</ul>\n<h1 id=\"更新pip至最新版本\"><a href=\"#更新pip至最新版本\" class=\"headerlink\" title=\"更新pip至最新版本\"></a>更新pip至最新版本</h1><ul>\n<li>在<code>cmd窗口</code>使用<code>pip list</code>命令检查pip是否安装成功（成功的话会显示当前<code>pip</code>的版本和<code>setuptool</code>的版本）</li>\n<li>输入<code>python -m pip install -U pip</code>命令升级<code>pip</code>至最新版本</li>\n<li>再输入<code>pip list</code>检查当前<code>pip</code>版本（当前<code>pip</code>的最新版本为<code>8.1.0</code>版本）</li>\n</ul>\n<h1 id=\"更换pip的镜像源为上海大学开源社区镜像源\"><a href=\"#更换pip的镜像源为上海大学开源社区镜像源\" class=\"headerlink\" title=\"更换pip的镜像源为上海大学开源社区镜像源\"></a>更换pip的镜像源为上海大学开源社区镜像源</h1><ul>\n<li>由于pip的默认服务器在美国，日常使用<code>pip install</code>命令会出现超时，所以我们要把镜像源更换为<code>上海大学开源社区pip镜像源</code></li>\n<li>更换方法是，在当前windows用户的主目录，添加一个<code>pip</code>文件夹，在<code>pip</code>文件夹中新建一个<code>pip.ini</code>文件，并把以下内容写入文件：<pre><code>[global]\nindex-url=https://pypi.shuosc.org/simple\n[list]\nformat=columns\n</code></pre></li>\n</ul>\n<h1 id=\"安装django1-9-4（当前最新版本）\"><a href=\"#安装django1-9-4（当前最新版本）\" class=\"headerlink\" title=\"安装django1.9.4（当前最新版本）\"></a>安装django1.9.4（当前最新版本）</h1><p>新开一个cmd窗口，在窗口中输入<code>pip install django</code>命令来安装<code>django</code>最新版本</p>\n","excerpt":"","more":"<h1 id=\"下载并安装python3-5-1\"><a href=\"#下载并安装python3-5-1\" class=\"headerlink\" title=\"下载并安装python3.5.1\"></a>下载并安装python3.5.1</h1><blockquote>\n<p>python官网：<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></p>\n</blockquote>\n<ul>\n<li>下载完毕后，点击<code>.exe</code>文件直接安装，安装选项可以选择配置<code>python</code>到系统变量、安装<code>pip</code>工具</li>\n<li>在<code>cmd窗口</code>使用<code>python</code>命令检查<code>python</code>是否安装成功（成功的话会进入<code>python shell</code>，失败会返回没有这个命令）</li>\n</ul>\n<h1 id=\"更新pip至最新版本\"><a href=\"#更新pip至最新版本\" class=\"headerlink\" title=\"更新pip至最新版本\"></a>更新pip至最新版本</h1><ul>\n<li>在<code>cmd窗口</code>使用<code>pip list</code>命令检查pip是否安装成功（成功的话会显示当前<code>pip</code>的版本和<code>setuptool</code>的版本）</li>\n<li>输入<code>python -m pip install -U pip</code>命令升级<code>pip</code>至最新版本</li>\n<li>再输入<code>pip list</code>检查当前<code>pip</code>版本（当前<code>pip</code>的最新版本为<code>8.1.0</code>版本）</li>\n</ul>\n<h1 id=\"更换pip的镜像源为上海大学开源社区镜像源\"><a href=\"#更换pip的镜像源为上海大学开源社区镜像源\" class=\"headerlink\" title=\"更换pip的镜像源为上海大学开源社区镜像源\"></a>更换pip的镜像源为上海大学开源社区镜像源</h1><ul>\n<li>由于pip的默认服务器在美国，日常使用<code>pip install</code>命令会出现超时，所以我们要把镜像源更换为<code>上海大学开源社区pip镜像源</code></li>\n<li>更换方法是，在当前windows用户的主目录，添加一个<code>pip</code>文件夹，在<code>pip</code>文件夹中新建一个<code>pip.ini</code>文件，并把以下内容写入文件：<pre><code>[global]\nindex-url=https://pypi.shuosc.org/simple\n[list]\nformat=columns\n</code></pre></li>\n</ul>\n<h1 id=\"安装django1-9-4（当前最新版本）\"><a href=\"#安装django1-9-4（当前最新版本）\" class=\"headerlink\" title=\"安装django1.9.4（当前最新版本）\"></a>安装django1.9.4（当前最新版本）</h1><p>新开一个cmd窗口，在窗口中输入<code>pip install django</code>命令来安装<code>django</code>最新版本</p>\n"},{"title":"解决VPS升级/安装WordPress主题及插件需要输入FTP账户和密码的问题","date":"2015-08-08T06:24:10.000Z","_content":"\n今天正式将原来博客网站转移至VPS中，原博客域名 `www.wl27.cn` 正式改为 `blog.wl27.cn` 。在VPS中搭建Wordpress博客，和使用主机空间搭建稍微有些不同。我使用的这台VPS是`Ubuntu 14.04 LTS`版本系统，采用LNMP一键架设整个服务坏境。在和使用主机空间搭建一样完成之后，由于Linux安全权限原因，我在网站后台升级、安全主题或者插件的时候，会出现提示需要我提供FTP信息的界面。有这样的字样提示”要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商”。\n解决这样一个问题，其实只需要我们可以给自己的WP网站授权就可以了。\n```bash\nchown -R www /home/wwwroot/blog.wl27.cn(修改成网站域名目录)\n```\n","source":"_posts/wordpress-ftp.md","raw":"---\ntitle: 解决VPS升级/安装WordPress主题及插件需要输入FTP账户和密码的问题\ndate: 2015-08-08 14:24:10\ntags: \n- vps \n- ftp \n- wordpress主题安装\ncategories: tech\n---\n\n今天正式将原来博客网站转移至VPS中，原博客域名 `www.wl27.cn` 正式改为 `blog.wl27.cn` 。在VPS中搭建Wordpress博客，和使用主机空间搭建稍微有些不同。我使用的这台VPS是`Ubuntu 14.04 LTS`版本系统，采用LNMP一键架设整个服务坏境。在和使用主机空间搭建一样完成之后，由于Linux安全权限原因，我在网站后台升级、安全主题或者插件的时候，会出现提示需要我提供FTP信息的界面。有这样的字样提示”要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商”。\n解决这样一个问题，其实只需要我们可以给自己的WP网站授权就可以了。\n```bash\nchown -R www /home/wwwroot/blog.wl27.cn(修改成网站域名目录)\n```\n","slug":"wordpress-ftp","published":1,"updated":"2017-12-03T10:21:27.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaqpcu5r001jtstn1xgfpc4p","content":"<p>今天正式将原来博客网站转移至VPS中，原博客域名 <code>www.wl27.cn</code> 正式改为 <code>blog.wl27.cn</code> 。在VPS中搭建Wordpress博客，和使用主机空间搭建稍微有些不同。我使用的这台VPS是<code>Ubuntu 14.04 LTS</code>版本系统，采用LNMP一键架设整个服务坏境。在和使用主机空间搭建一样完成之后，由于Linux安全权限原因，我在网站后台升级、安全主题或者插件的时候，会出现提示需要我提供FTP信息的界面。有这样的字样提示”要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商”。<br>解决这样一个问题，其实只需要我们可以给自己的WP网站授权就可以了。</p>\n<pre><code class=\"bash\">chown -R www /home/wwwroot/blog.wl27.cn(修改成网站域名目录)\n</code></pre>\n","excerpt":"","more":"<p>今天正式将原来博客网站转移至VPS中，原博客域名 <code>www.wl27.cn</code> 正式改为 <code>blog.wl27.cn</code> 。在VPS中搭建Wordpress博客，和使用主机空间搭建稍微有些不同。我使用的这台VPS是<code>Ubuntu 14.04 LTS</code>版本系统，采用LNMP一键架设整个服务坏境。在和使用主机空间搭建一样完成之后，由于Linux安全权限原因，我在网站后台升级、安全主题或者插件的时候，会出现提示需要我提供FTP信息的界面。有这样的字样提示”要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商”。<br>解决这样一个问题，其实只需要我们可以给自己的WP网站授权就可以了。</p>\n<pre><code class=\"bash\">chown -R www /home/wwwroot/blog.wl27.cn(修改成网站域名目录)\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjaqpcu570007tstnk0c3vrg0","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5b000ctstn47io3n20"},{"post_id":"cjaqpcu4x0000tstn3utxchrb","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5c000ftstnw8dexvlm"},{"post_id":"cjaqpcu570008tstnp3ns1tw5","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5d000itstnourg5r34"},{"post_id":"cjaqpcu5a000btstn48rrnvf9","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5f000mtstn04b964a6"},{"post_id":"cjaqpcu550006tstnloo2xh30","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5g000ptstnz83n0mzu"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5h000rtstn3aaafo0e"},{"post_id":"cjaqpcu5f000ntstn69r8t0ak","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5i000vtstnhlm8cj0j"},{"post_id":"cjaqpcu5g000qtstn13c7a1gy","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5j000ytstn2cffz4w0"},{"post_id":"cjaqpcu5h000ttstnhwjwjpcs","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5k0011tstnn4hl5v4t"},{"post_id":"cjaqpcu5e000jtstnfekoyh6t","category_id":"cjaqpcu5g000otstn4ev1dykl","_id":"cjaqpcu5l0013tstn3yy4wwow"},{"post_id":"cjaqpcu5i000wtstnovtqla1h","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5m0016tstngwrecf53"},{"post_id":"cjaqpcu5j000ztstn00pkbreq","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5n0019tstn4ery7tgt"},{"post_id":"cjaqpcu5k0012tstnbqpgb458","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5o001etstnu9gcoe2k"},{"post_id":"cjaqpcu5l0014tstnbg0ihznr","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5p001gtstnahfkgrbu"},{"post_id":"cjaqpcu5p001ftstnus3jy5vj","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5s001mtstnddlovn8s"},{"post_id":"cjaqpcu5p001htstnjcu2vmey","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5s001otstnc65nzb12"},{"post_id":"cjaqpcu5m0017tstn0yfkunlm","category_id":"cjaqpcu5o001dtstnekbcwkmh","_id":"cjaqpcu5t001qtstnw5wk4zun"},{"post_id":"cjaqpcu5r001jtstn1xgfpc4p","category_id":"cjaqpcu530004tstnwbnvo76v","_id":"cjaqpcu5t001rtstnybtz3jk9"},{"post_id":"cjaqpcu5n001atstnoottx7ly","category_id":"cjaqpcu5r001ktstngdfctd2z","_id":"cjaqpcu5t001ttstnn11v4gka"}],"PostTag":[{"post_id":"cjaqpcu4x0000tstn3utxchrb","tag_id":"cjaqpcu550005tstnvcst5mzo","_id":"cjaqpcu5d000htstnr5yo3bbj"},{"post_id":"cjaqpcu4x0000tstn3utxchrb","tag_id":"cjaqpcu58000atstnhrc4n135","_id":"cjaqpcu5e000ktstnamn0iu4o"},{"post_id":"cjaqpcu550006tstnloo2xh30","tag_id":"cjaqpcu5c000etstno7expkkk","_id":"cjaqpcu5i000utstn33w2et1k"},{"post_id":"cjaqpcu550006tstnloo2xh30","tag_id":"cjaqpcu5e000ltstns4gdg4jj","_id":"cjaqpcu5j000xtstnmuv7znln"},{"post_id":"cjaqpcu570007tstnk0c3vrg0","tag_id":"cjaqpcu5h000ststngar4huei","_id":"cjaqpcu5n0018tstnxlrr7dhg"},{"post_id":"cjaqpcu570007tstnk0c3vrg0","tag_id":"cjaqpcu5k0010tstn0ughtd08","_id":"cjaqpcu5o001btstn7j64455d"},{"post_id":"cjaqpcu570008tstnp3ns1tw5","tag_id":"cjaqpcu5m0015tstnlxfnfuvs","_id":"cjaqpcu5s001ltstnbhqtb5so"},{"post_id":"cjaqpcu570008tstnp3ns1tw5","tag_id":"cjaqpcu5o001ctstnbaigy6kg","_id":"cjaqpcu5s001ntstn1o7hmpnm"},{"post_id":"cjaqpcu5a000btstn48rrnvf9","tag_id":"cjaqpcu5q001itstnl64fioap","_id":"cjaqpcu5t001utstnx1p2q8ma"},{"post_id":"cjaqpcu5a000btstn48rrnvf9","tag_id":"cjaqpcu5s001ptstnzps5srzt","_id":"cjaqpcu5u001vtstn43h12eda"},{"post_id":"cjaqpcu5b000dtstnlq5bsds3","tag_id":"cjaqpcu5q001itstnl64fioap","_id":"cjaqpcu5u001ztstnsupr83ka"},{"post_id":"cjaqpcu5b000dtstnlq5bsds3","tag_id":"cjaqpcu5u001wtstnrbn0ot7o","_id":"cjaqpcu5v0020tstnspc56gab"},{"post_id":"cjaqpcu5b000dtstnlq5bsds3","tag_id":"cjaqpcu5u001xtstnid01c3qc","_id":"cjaqpcu5v0022tstnpagb3c8u"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","tag_id":"cjaqpcu5u001ytstnnluy725r","_id":"cjaqpcu5w0028tstn0xppomkv"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","tag_id":"cjaqpcu5v0021tstnpdzmfcno","_id":"cjaqpcu5w0029tstnt81z1ajp"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","tag_id":"cjaqpcu5v0023tstn5f1am4jf","_id":"cjaqpcu5x002btstn4j4g5mft"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","tag_id":"cjaqpcu5v0024tstnbdwpep8b","_id":"cjaqpcu5x002ctstndfy3gueg"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","tag_id":"cjaqpcu5v0025tstnzngmbws3","_id":"cjaqpcu5x002etstnxhaz9gh7"},{"post_id":"cjaqpcu5c000gtstnjsvrqfqr","tag_id":"cjaqpcu5w0026tstnoniy6322","_id":"cjaqpcu5x002ftstnt498cn1i"},{"post_id":"cjaqpcu5e000jtstnfekoyh6t","tag_id":"cjaqpcu5w0027tstnzichqzur","_id":"cjaqpcu5x002htstnpqzipje1"},{"post_id":"cjaqpcu5f000ntstn69r8t0ak","tag_id":"cjaqpcu5w002atstnj5rusokq","_id":"cjaqpcu5y002itstn8ez80boj"},{"post_id":"cjaqpcu5g000qtstn13c7a1gy","tag_id":"cjaqpcu5w002atstnj5rusokq","_id":"cjaqpcu5y002ktstny2xjukng"},{"post_id":"cjaqpcu5g000qtstn13c7a1gy","tag_id":"cjaqpcu5x002gtstn86qk2c9q","_id":"cjaqpcu5y002ltstnj7x0eiuo"},{"post_id":"cjaqpcu5h000ttstnhwjwjpcs","tag_id":"cjaqpcu5e000ltstns4gdg4jj","_id":"cjaqpcu5z002otstnlc9ativi"},{"post_id":"cjaqpcu5h000ttstnhwjwjpcs","tag_id":"cjaqpcu5y002jtstnuqg6gcew","_id":"cjaqpcu5z002ptstnxkzmn9tj"},{"post_id":"cjaqpcu5h000ttstnhwjwjpcs","tag_id":"cjaqpcu5y002mtstnqeb35mf1","_id":"cjaqpcu5z002rtstnfzst8lsj"},{"post_id":"cjaqpcu5i000wtstnovtqla1h","tag_id":"cjaqpcu5e000ltstns4gdg4jj","_id":"cjaqpcu60002ttstn7aaquuqf"},{"post_id":"cjaqpcu5i000wtstnovtqla1h","tag_id":"cjaqpcu5z002ntstnf0v6ek74","_id":"cjaqpcu60002utstn33tyqp7r"},{"post_id":"cjaqpcu5i000wtstnovtqla1h","tag_id":"cjaqpcu5m0015tstnlxfnfuvs","_id":"cjaqpcu60002wtstnzayqb8l7"},{"post_id":"cjaqpcu5j000ztstn00pkbreq","tag_id":"cjaqpcu5e000ltstns4gdg4jj","_id":"cjaqpcu63002ytstnif63quyl"},{"post_id":"cjaqpcu5j000ztstn00pkbreq","tag_id":"cjaqpcu5z002ststnsxvhwdvf","_id":"cjaqpcu63002ztstnaecejerm"},{"post_id":"cjaqpcu5j000ztstn00pkbreq","tag_id":"cjaqpcu60002vtstn35em8vhy","_id":"cjaqpcu630031tstn46mb290d"},{"post_id":"cjaqpcu5k0012tstnbqpgb458","tag_id":"cjaqpcu5e000ltstns4gdg4jj","_id":"cjaqpcu630032tstn04dp360l"},{"post_id":"cjaqpcu5k0012tstnbqpgb458","tag_id":"cjaqpcu60002xtstnupgtibpx","_id":"cjaqpcu640034tstns4cvrt2y"},{"post_id":"cjaqpcu5l0014tstnbg0ihznr","tag_id":"cjaqpcu630030tstnl7nw96s9","_id":"cjaqpcu650037tstn8q2qis70"},{"post_id":"cjaqpcu5l0014tstnbg0ihznr","tag_id":"cjaqpcu640033tstnztg15ryq","_id":"cjaqpcu650038tstnrv4moaod"},{"post_id":"cjaqpcu5l0014tstnbg0ihznr","tag_id":"cjaqpcu640035tstnqk41n0w1","_id":"cjaqpcu65003atstnw57nj4mp"},{"post_id":"cjaqpcu5m0017tstn0yfkunlm","tag_id":"cjaqpcu640036tstnrppkeqk5","_id":"cjaqpcu66003btstne7za5ybe"},{"post_id":"cjaqpcu5n001atstnoottx7ly","tag_id":"cjaqpcu650039tstn029a1ye6","_id":"cjaqpcu66003etstngb2fygb3"},{"post_id":"cjaqpcu5n001atstnoottx7ly","tag_id":"cjaqpcu66003ctstnw9e7zirg","_id":"cjaqpcu67003ftstnziwbggzk"},{"post_id":"cjaqpcu5p001ftstnus3jy5vj","tag_id":"cjaqpcu66003dtstnbrvnhvbn","_id":"cjaqpcu68003itstn2im4hrqw"},{"post_id":"cjaqpcu5p001ftstnus3jy5vj","tag_id":"cjaqpcu5m0015tstnlxfnfuvs","_id":"cjaqpcu68003jtstnww3j9kga"},{"post_id":"cjaqpcu5p001ftstnus3jy5vj","tag_id":"cjaqpcu5z002ntstnf0v6ek74","_id":"cjaqpcu68003ltstnboi88xow"},{"post_id":"cjaqpcu5p001htstnjcu2vmey","tag_id":"cjaqpcu66003dtstnbrvnhvbn","_id":"cjaqpcu69003ntstny7latln3"},{"post_id":"cjaqpcu5p001htstnjcu2vmey","tag_id":"cjaqpcu68003ktstn40np08m1","_id":"cjaqpcu69003otstn90y1swtm"},{"post_id":"cjaqpcu5r001jtstn1xgfpc4p","tag_id":"cjaqpcu68003mtstnz2ebiwe0","_id":"cjaqpcu6a003rtstnunt2h7nh"},{"post_id":"cjaqpcu5r001jtstn1xgfpc4p","tag_id":"cjaqpcu69003ptstnyogr8u81","_id":"cjaqpcu6a003ststnshqrvgzf"},{"post_id":"cjaqpcu5r001jtstn1xgfpc4p","tag_id":"cjaqpcu69003qtstnq4kt5clk","_id":"cjaqpcu6a003ttstnphg9fr3c"}],"Tag":[{"name":"archlinux","_id":"cjaqpcu550005tstnvcst5mzo"},{"name":"setup","_id":"cjaqpcu58000atstnhrc4n135"},{"name":"docker","_id":"cjaqpcu5c000etstno7expkkk"},{"name":"ubuntu","_id":"cjaqpcu5e000ltstns4gdg4jj"},{"name":"gravatar","_id":"cjaqpcu5h000ststngar4huei"},{"name":"wordpress","_id":"cjaqpcu5k0010tstn0ughtd08"},{"name":"laravel","_id":"cjaqpcu5m0015tstnlxfnfuvs"},{"name":"lnmpa","_id":"cjaqpcu5o001ctstnbaigy6kg"},{"name":"linux","_id":"cjaqpcu5q001itstnl64fioap"},{"name":"踢出ssh用户","_id":"cjaqpcu5s001ptstnzps5srzt"},{"name":"lvm","_id":"cjaqpcu5u001wtstnrbn0ot7o"},{"name":"合并磁盘","_id":"cjaqpcu5u001xtstnid01c3qc"},{"name":"mirror","_id":"cjaqpcu5u001ytstnnluy725r"},{"name":"build","_id":"cjaqpcu5v0021tstnpdzmfcno"},{"name":"rsync","_id":"cjaqpcu5v0023tstn5f1am4jf"},{"name":"cran","_id":"cjaqpcu5v0024tstnbdwpep8b"},{"name":"wget","_id":"cjaqpcu5v0025tstnzngmbws3"},{"name":"bandsnatch","_id":"cjaqpcu5w0026tstnoniy6322"},{"name":"现代诗","_id":"cjaqpcu5w0027tstnzichqzur"},{"name":"腾讯云","_id":"cjaqpcu5w002atstnj5rusokq"},{"name":"Mysql","_id":"cjaqpcu5x002gtstn86qk2c9q"},{"name":"美化","_id":"cjaqpcu5y002jtstnuqg6gcew"},{"name":"软件安装","_id":"cjaqpcu5y002mtstnqeb35mf1"},{"name":"composer","_id":"cjaqpcu5z002ntstnf0v6ek74"},{"name":"nodejs","_id":"cjaqpcu5z002ststnsxvhwdvf"},{"name":"bower","_id":"cjaqpcu60002vtstn35em8vhy"},{"name":"nvidia","_id":"cjaqpcu60002xtstnupgtibpx"},{"name":"DNS","_id":"cjaqpcu630030tstnl7nw96s9"},{"name":"unbound","_id":"cjaqpcu640033tstnztg15ryq"},{"name":"dnscrypt","_id":"cjaqpcu640035tstnqk41n0w1"},{"name":"网页秀","_id":"cjaqpcu640036tstnrppkeqk5"},{"name":"码农","_id":"cjaqpcu650039tstn029a1ye6"},{"name":"写作","_id":"cjaqpcu66003ctstnw9e7zirg"},{"name":"windows","_id":"cjaqpcu66003dtstnbrvnhvbn"},{"name":"pip","_id":"cjaqpcu68003ktstn40np08m1"},{"name":"vps","_id":"cjaqpcu68003mtstnz2ebiwe0"},{"name":"ftp","_id":"cjaqpcu69003ptstnyogr8u81"},{"name":"wordpress主题安装","_id":"cjaqpcu69003qtstnq4kt5clk"}]}}